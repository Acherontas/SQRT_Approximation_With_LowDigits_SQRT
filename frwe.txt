voyeristic behaviours and others have fun 
ur number ,ur precision , ur sleep time , ur log ,ur automation 0 no 1 auto , ur bee auto 0 for no log 1 for log 
the approximation while loops times to run if -1 infinite loop will occur  
with main number 54646484564546546545646454564654565923049885950498916232091151705833472
will count the digit from 54646484564546546545646454564654565923049885950498916232091151705833472
with string of it 54646484564546546545646454564654565923049885950498916232091151705833472
71
 @ CDIS : with main number 54646484564546546545646454564654565923049885950498916232091151705833472
Main cdi 337
Secondary cdi 13
Secondary cdi 4
Exiting Secondary cdi 4
with sqrt of math 233765875534789180113750536509909856

9 25 |34 16| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 34 ::== 1607249546016074898401366310725134330949349462806317327526417999593472
            ----->  | *2 3214499092032149796802732621450268661898698925612634655052835999186944
            ----->  /2 803624773008037449200683155362567165474674731403158663763208999796736
                 --> 401812386504018724600341577681283582737337365701579331881604499898368
                 --> 200906193252009362300170788840641791368668682850789665940802249949184
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1033300441267551544926177063897578436224693570422701250412987874803712 32144990920321497968027326214502672
i insert 6458127757922197155788606649359865101789210210306019730349262316240896 80362477300803744920068315536256680
i insert 0 0
i insert 64581277579221971557886066493598652264043348151418828150811742175232 8036247730080374492006831553625668
i insert 40363298487013732223678791558499156387722065395069170975755241871376384 200906193252009362300170788840641696
CDIS Start 
section_temp 0
section h inf
1607249546016074898401366310725134330949349462806317327526417999593472 / 13 ::== 123634580462774992184720485440394956522714356423297684472026506461184
            ----->  | *2 247269160925549984369440970880789913045428712846595368944053012922368
            ----->  /2 61817290231387496092360242720197478261357178211648842236013253230592
                 --> 30908645115693748046180121360098739130678589105824421118006626615296
                 --> 15454322557846874023090060680049369565339294552912210559003313307648
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 611420379448255352027323706448271553577958295115299978181634284322816 24726916092554998436944097088078984
i insert 3821377371551595950170773165301697438323301120003040518977052762701824 61817290231387496092360242720197464
i insert 0 0
i insert 38213773715515959501707731653016972098622393444706248636352142770176 6181729023138749609236024272019746
i insert 23883608572197474688567332283135610817209126204278328486341287652360192 154543225578468740230900606800493664
section_temp 0
section h inf
123634580462774992184720485440394956522714356423297684472026506461184 / 4 ::== 30908645115693748046180121360098739130678589105824421118006626615296
            ----->  | *2 61817290231387496092360242720197478261357178211648842236013253230592
            ----->  /2 15454322557846874023090060680049369565339294552912210559003313307648
                 --> 7727161278923437011545030340024684782669647276456105279501656653824
                 --> 3863580639461718505772515170012342391334823638228052639750828326912
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3821377371551595950170773165301697438323301120003040518977052762701824 61817290231387496092360242720197464
i insert 23883608572197474688567332283135610817209126204278328486341287652360192 154543225578468740230900606800493664
i insert 0 0
i insert 238836085721974746885673322831356089895206320000190032436065797668864 15454322557846874023090060680049366
i insert 1492725535762342168035458267695975676075570387767395530396330478272512 38635806394617185057725151700123416
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 16 ::== 3415405285284159159102903410290910370190617871906182264505696981614592
            ----->  | *2 6830810570568318318205806820581820740381235743812364529011393963229184
            ----->  /2 1707702642642079579551451705145455185095308935953091132252848490807296
                 --> 853851321321039789775725852572727592547654467976545566126424245403648
                 --> 426925660660519894887862926286363796273827233988272783063212122701824
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4665997305098787445057268304162511237501471783951632251724310383689728 68308105705683183182058068205818240
i insert 29162483156867421531607926901015692077467708660522503426735171732242432 170770264264207957955145170514545600
i insert 0 0
i insert 291624831568674215316079269010156952343841986496977015732769398980608 17077026426420795795514517051454560
i insert 1822655197304213845725495431313480754841731791282656464170948233265152 42692566066051989488786292628636400
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 / 337 ::== 10134733784225991570038289051308339369716526536020084422078483136512
            ----->  | *2 20269467568451983140076578102616678739433053072040168844156966273024
            ----->  /2 5067366892112995785019144525654169684858263268010042211039241568256
                 --> 2533683446056497892509572262827084842429131634005021105519620784128
                 --> 1266841723028248946254786131413542421214565817002510552759810392064
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 41085131550852674982233429053372881300856103759317761104116978198511616 202694675684519831400765781026166752
i insert 2567820721928292186389589315835805081303506484957360069007311137406976 50673668921129957850191445256541688
i insert 0 0
i insert 25678207219282921863895893158358053097645682604897757243491496230912 5067366892112995785019144525654169
i insert 16048879512051826164934933223973782173530664213769710713735400946401280 126684172302824894625478613141354224
removals 
reporing rt 4
section_temp 0
section h inf
1607249546016074898401366310725134330949349462806317327526417999593472 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 1597114812231848906831328021673826030521859375281504457083061985607680
            ----->  | *2 3194229624463697813662656043347652061043718750563008914166123971215360
            ----->  /2 798557406115924453415664010836913015260929687640752228541530992803840
                 --> 399278703057962226707832005418456507630464843820376114270765496401920
                 --> 199639351528981113353916002709228253815232421910188057135382748200960
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1020310289380149596218559141476291914762954152398365516218525546446848 31942296244636978136626560433476512
i insert 6376939308625934976365994634226823927269590164867711109194166426402816 79855740611592445341566401083691280
i insert 0 0
i insert 63769393086259349763659946342268244672684634524897844763657846652928 7985574061159244534156640108369128
i insert 39855870678912093602287466463917647053132446433705932737825302139371520 199639351528981113353916002709228192
section_temp 0
section h inf
123634580462774992184720485440394956522714356423297684472026506461184 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 113499846678549000614682196389086614556849400619863785784699858714624
            ----->  | *2 226999693357098001229364392778173229113698801239727571569399717429248
            ----->  /2 56749923339274500307341098194543307278424700309931892892349929357312
                 --> 28374961669637250153670549097271653639212350154965946446174964678656
                 --> 14187480834818625076835274548635826819606175077482973223087482339328
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 51528860784216522427477661973560619624231063999133300150374635004755968 226999693357098001229364392778173248
i insert 3220553799013532651717353873347538726514441499945831259398414687797248 56749923339274500307341098194543312
i insert 0 0
i insert 32205537990135326517173538733475387888220038023637628017643706384384 5674992333927450030734109819454331
i insert 20128461243834579073233461708422115213026765170402120128505383913259008 141874808348186250768352745486358272
section_temp 0
section h inf
30908645115693748046180121360098739130678589105824421118006626615296 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 20773911331467756476141832308790399760962062569804336695928143478784
            ----->  | *2 41547822662935512952283664617580799521924125139608673391856286957568
            ----->  /2 10386955665733878238070916154395199880481031284902168347964071739392
                 --> 5193477832866939119035458077197599940240515642451084173982035869696
                 --> 2596738916433469559517729038598799970120257821225542086991017934848
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1726221568030737818723846715385352727503943945428785647402994234294272 41547822662935512952283664617580800
i insert 10788884800192111367024041971158454879206648605158878522220479034425344 103869556657338782380709161543952000
i insert 0 0
i insert 107888848001921113670240419711584545468996496589299102962687139643392 10386955665733878238070916154395200
i insert 674305300012006960439002623197403429950415537822429907638779939651584 25967389164334695595177290385988000
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 3405270551499933167532865121239601903609628311266885281086458432585728
            ----->  | *2 6810541102999866335065730242479203807219256622533770562172916865171456
            ----->  /2 1702635275749966583766432560619800951804814155633442640543229216292864
                 --> 851317637874983291883216280309900475902407077816721320271614608146432
                 --> 425658818937491645941608140154950237951203538908360660135807304073216
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4638347011565063594794225206409586279147758214801027052571411164954624 68105411029998663350657302424792040
i insert 28989668822281647467463907540059912583138494111361577948812494430535680 170263527574996658376643256061980096
i insert 0 0
i insert 289896688222816474674639075400599142446734888425064190785713197809664 17026352757499665837664325606198010
i insert 1811854301392602966716494221253744536446155881960098621800780901908480 42565881893749164594160814015495024
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 32144990920321497968027326214502672 ^2 ::== 1033300441267551544926177063897578436224693570422701250412987874803712 as intpart 1033300441267551544926177063897578436224693570422701250412987874803712  diafora 53613184123278995000720277500756989314513686584335540224412871716503552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 80362477300803744920068315536256680 ^2 ::== 6458127757922197155788606649359865101789210210306019730349262316240896 as intpart 6458127757922197155788606649359865101789210210306019730349262316240896  diafora 48188356806624349389857847915294702815102669417566705857452479810109440 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 8036247730080374492006831553625668 ^2 ::== 64581277579221971557886066493598652264043348151418828150811742175232 as intpart 64581277579221971557886066493598652264043348151418828150811742175232  diafora 54581903286967324574088568498160966388095376651426800553755963996241920 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 200906193252009362300170788840641696 ^2 ::== 40363298487013732223678791558499156387722065395069170975755241871376384 as intpart 40363298487013732223678791558499156387722065395069170975755241871376384  diafora 14283186077532814321967663006155409535327820555429745256335909834457088 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 24726916092554998436944097088078984 ^2 ::== 611420379448255352027323706448271553577958295115299978181634284322816 as intpart 611420379448255352027323706448271553577958295115299978181634284322816  diafora 54035064185098291193619130858206296778697670015543635892059814179635200 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 61817290231387496092360242720197464 ^2 ::== 3821377371551595950170773165301697438323301120003040518977052762701824 as intpart 3821377371551595950170773165301697438323301120003040518977052762701824  diafora 50825107192994950595475681399352866490884591153122066357403508522614784 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 6181729023138749609236024272019746 ^2 ::== 38213773715515959501707731653016972098622393444706248636352142770176 as intpart 38213773715515959501707731653016972098622393444706248636352142770176  diafora 54608270790831030586144746833001547439992877723419370081080367760015360 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 154543225578468740230900606800493664 ^2 ::== 23883608572197474688567332283135610817209126204278328486341287652360192 as intpart 23883608572197474688567332283135610817209126204278328486341287652360192  diafora 30762875992349071857079122281518955105840759746220587745749864053473280 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 61817290231387496092360242720197464 ^2 ::== 3821377371551595950170773165301697438323301120003040518977052762701824 as intpart 3821377371551595950170773165301697438323301120003040518977052762701824  diafora 50825107192994950595475681399352866490884591153122066357403508522614784 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 154543225578468740230900606800493664 ^2 ::== 23883608572197474688567332283135610817209126204278328486341287652360192 as intpart 23883608572197474688567332283135610817209126204278328486341287652360192  diafora 30762875992349071857079122281518955105840759746220587745749864053473280 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15454322557846874023090060680049366 ^2 ::== 238836085721974746885673322831356089895206320000190032436065797668864 as intpart 238836085721974746885673322831356089895206320000190032436065797668864  diafora 54407648478824571798760781241823211037767550810578736018730234287226880 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 38635806394617185057725151700123416 ^2 ::== 1492725535762342168035458267695975676075570387767395530396330478272512 as intpart 1492725535762342168035458267695975676075570387767395530396330478272512  diafora 53153759028784204377610996296958588585439320831586679571935995877130240 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68308105705683183182058068205818240 ^2 ::== 4665997305098787445057268304162511237501471783951632251724310383689728 as intpart 4665997305098787445057268304162511237501471783951632251724310383689728  diafora 49980487259447759100589186260492056679390407843921093336077431742660608 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170770264264207957955145170514545600 ^2 ::== 29162483156867421531607926901015692077467708660522503426735171732242432 as intpart 29162483156867421531607926901015692077467708660522503426735171732242432  diafora 25484001407679125014038527663638873845582177289976412805355979973591040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17077026426420795795514517051454560 ^2 ::== 291624831568674215316079269010156952343841986496977015732769398980608 as intpart 291624831568674215316079269010156952343841986496977015732769398980608  diafora 54354859732977872330330375295644408098400171730150897623234998997876736 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42692566066051989488786292628636400 ^2 ::== 1822655197304213845725495431313480754841731791282656464170948233265152 as intpart 1822655197304213845725495431313480754841731791282656464170948233265152  diafora 52823829367242332699920959133341083506673159428071418638161378122137600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202694675684519831400765781026166752 ^2 ::== 41085131550852674982233429053372881300856103759317761104116978198511616 as intpart 41085131550852674982233429053372881300856103759317761104116978198511616  diafora 13561353013693871563413025511281684622193782191181155127974173507321856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 50673668921129957850191445256541688 ^2 ::== 2567820721928292186389589315835805081303506484957360069007311137406976 as intpart 2567820721928292186389589315835805081303506484957360069007311137406976  diafora 52078663842618254359256865248818761838667376304228460840939135778684928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5067366892112995785019144525654169 ^2 ::== 25678207219282921863895893158358053097645682604897757243491496230912 as intpart 25678207219282921863895893158358053097645682604897757243491496230912  diafora 54620806357327263623782558671496208467066378999399195755854738069913600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 126684172302824894625478613141354224 ^2 ::== 16048879512051826164934933223973782173530664213769710713735400946401280 as intpart 16048879512051826164934933223973782173530664213769710713735400946401280  diafora 38597605052494720380711521340680783749519221736729205518355750759432192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 31942296244636978136626560433476512 ^2 ::== 1020310289380149596218559141476291914762954152398365516218525546446848 as intpart 1020310289380149596218559141476291914762954152398365516218525546446848  diafora 53626174275166396949427895423178274839054429163672971280752038834601984 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 79855740611592445341566401083691280 ^2 ::== 6376939308625934976365994634226823927269590164867711109194166426402816 as intpart 6376939308625934976365994634226823927269590164867711109194166426402816  diafora 48269545255920611569280459930427741331166297893173268670993455139258368 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7985574061159244534156640108369128 ^2 ::== 63769393086259349763659946342268244672684634524897844763657846652928 as intpart 63769393086259349763659946342268244672684634524897844763657846652928  diafora 54582715171460287195882794618312297730300169901322294672632457151381504 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 199639351528981113353916002709228192 ^2 ::== 39855870678912093602287466463917647053132446433705932737825302139371520 as intpart 39855870678912093602287466463917647053132446433705932737825302139371520  diafora 14790613885634452943358988100736918869917439516792983494265849566461952 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 226999693357098001229364392778173248 ^2 ::== 51528860784216522427477661973560619624231063999133300150374635004755968 as intpart 51528860784216522427477661973560619624231063999133300150374635004755968  diafora 3117623780330024118168792591093946298818821951365616081716516701077504 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 56749923339274500307341098194543312 ^2 ::== 3220553799013532651717353873347538726514441499945831259398414687797248 as intpart 3220553799013532651717353873347538726514441499945831259398414687797248  diafora 51425930765533013893929100691307029190377438127926894328403327438553088 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5674992333927450030734109819454331 ^2 ::== 32205537990135326517173538733475387888220038023637628017643706384384 as intpart 32205537990135326517173538733475387888220038023637628017643706384384  diafora 54614279026556411219129281025921090343046682146686656348445143818305536 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 141874808348186250768352745486358272 ^2 ::== 20128461243834579073233461708422115213026765170402120128505383913259008 as intpart 20128461243834579073233461708422115213026765170402120128505383913259008  diafora 34518023320711967472412992856232450710023120780096796103585767792574464 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 41547822662935512952283664617580800 ^2 ::== 1726221568030737818723846715385352727503943945428785647402994234294272 as intpart 1726221568030737818723846715385352727503943945428785647402994234294272  diafora 52920262996515808726922607849269211866317946220154257680881097191194624 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 103869556657338782380709161543952000 ^2 ::== 10788884800192111367024041971158454879206648605158878522220479034425344 as intpart 10788884800192111367024041971158454879206648605158878522220479034425344  diafora 43857599764354435178622412593496112373071233130255910613677732951752704 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10386955665733878238070916154395200 ^2 ::== 107888848001921113670240419711584545468996496589299102962687139643392 as intpart 107888848001921113670240419711584545468996496589299102962687139643392  diafora 54538595716544625431976214144942983620653132340955152654302878789271552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 25967389164334695595177290385988000 ^2 ::== 674305300012006960439002623197403429950415537822429907638779939651584 as intpart 674305300012006960439002623197403429950415537822429907638779939651584  diafora 53972179264534539585207451941457163240790218041691664832843843173875712 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68105411029998663350657302424792040 ^2 ::== 4638347011565063594794225206409586279147758214801027052571411164954624 as intpart 4638347011565063594794225206409586279147758214801027052571411164954624  diafora 50008137552981482950852229358244980973130123520613762083326800821223424 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170263527574996658376643256061980096 ^2 ::== 28989668822281647467463907540059912583138494111361577948812494430535680 as intpart 28989668822281647467463907540059912583138494111361577948812494430535680  diafora 25656815742264899078182547024594653339911391839137338283278657275297792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17026352757499665837664325606198010 ^2 ::== 289896688222816474674639075400599142446734888425064190785713197809664 as intpart 289896688222816474674639075400599142446734888425064190785713197809664  diafora 54356587876323730070971815489253969189828893422233871679455735266148352 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42565881893749164594160814015495024 ^2 ::== 1811854301392602966716494221253744536446155881960098621800780901908480 as intpart 1811854301392602966716494221253744536446155881960098621800780901908480  diafora 52834630263153943578929960343400821718910729014767785836242135874011136 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 226999693357098001229364392778173248 ^2 ::== 51528860784216522427477661973560619624231063999133300150374635004755968 as intpart 51528860784216522427477661973560619624231063999133300150374635004755968  diafora 3117623780330024118168792591093946298818821951365616081716516701077504 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

9 |25| 34 |16| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 25 ::== 2185859382581861861825858182586182796429354932209861397740493301874688
            ----->  | *2 4371718765163723723651716365172365592858709864419722795480986603749376
            ----->  /2 1092929691290930930912929091293091398214677466104930698870246650937344
                 --> 546464845645465465456464545646545699107338733052465349435123325468672
                 --> 273232422822732732728232272823272849553669366526232674717561662734336
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1911192496168463337495457097384964498137436774855217785486281183068160 43717187651637237236517163651723672
i insert 11944953101052895859346606858656027864128730633173384989825433591611392 109292969129093093091292909129309184
i insert 0 0
i insert 119449531010528958593466068586560281133589798428451111592892573941760 10929296912909309309129290912930918
i insert 746559568815805991209162928666001741508045664573336561864089599475712 27323242282273273272823227282327296
CDIS Start 
section_temp 0
section h inf
2185859382581861861825858182586182796429354932209861397740493301874688 / 13 ::== 168143029429373989371219860198937133393984048445533065798041334710272
            ----->  | *2 336286058858747978742439720397874266787968096891066131596082669420544
            ----->  /2 84071514714686994685609930099468566696992024222766532899020667355136
                 --> 42035757357343497342804965049734283348496012111383266449510333677568
                 --> 21017878678671748671402482524867141674248006055691633224755166838784
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1130883133827493099109737927446722562252072458476109358263397750145024 33628605885874797874243972039787412
i insert 7068019586421831869435862046542016138690577470311546573878147839688704 84071514714686994685609930099468528
i insert 0 0
i insert 70680195864218318694358620465420160140754528654756834891462359384064 8407151471468699468560993009946853
i insert 44175122415136449183974137790887601199123108135676134312690189068140544 210178786786717486714024825248671328
section_temp 0
section h inf
168143029429373989371219860198937133393984048445533065798041334710272 / 4 ::== 42035757357343497342804965049734283348496012111383266449510333677568
            ----->  | *2 84071514714686994685609930099468566696992024222766532899020667355136
            ----->  /2 21017878678671748671402482524867141674248006055691633224755166838784
                 --> 10508939339335874335701241262433570837124003027845816612377583419392
                 --> 5254469669667937167850620631216785418562001513922908306188791709696
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 7068019586421831869435862046542016138690577470311546573878147839688704 84071514714686994685609930099468528
i insert 44175122415136449183974137790887601199123108135676134312690189068140544 210178786786717486714024825248671328
i insert 0 0
i insert 441751224151364491839741377908876008668161091894471660867384239980544 21017878678671748671402482524867132
i insert 2760945150946028073998383611930475074945194258479758394543136816758784 52544696696679371678506206312167832
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 16 ::== 3415405285284159159102903410290910370190617871906182264505696981614592
            ----->  | *2 6830810570568318318205806820581820740381235743812364529011393963229184
            ----->  /2 1707702642642079579551451705145455185095308935953091132252848490807296
                 --> 853851321321039789775725852572727592547654467976545566126424245403648
                 --> 426925660660519894887862926286363796273827233988272783063212122701824
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4665997305098787445057268304162511237501471783951632251724310383689728 68308105705683183182058068205818240
i insert 29162483156867421531607926901015692077467708660522503426735171732242432 170770264264207957955145170514545600
i insert 0 0
i insert 291624831568674215316079269010156952343841986496977015732769398980608 17077026426420795795514517051454560
i insert 1822655197304213845725495431313480754841731791282656464170948233265152 42692566066051989488786292628636400
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 / 337 ::== 10134733784225991570038289051308339369716526536020084422078483136512
            ----->  | *2 20269467568451983140076578102616678739433053072040168844156966273024
            ----->  /2 5067366892112995785019144525654169684858263268010042211039241568256
                 --> 2533683446056497892509572262827084842429131634005021105519620784128
                 --> 1266841723028248946254786131413542421214565817002510552759810392064
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 41085131550852674982233429053372881300856103759317761104116978198511616 202694675684519831400765781026166752
i insert 2567820721928292186389589315835805081303506484957360069007311137406976 50673668921129957850191445256541688
i insert 0 0
i insert 25678207219282921863895893158358053097645682604897757243491496230912 5067366892112995785019144525654169
i insert 16048879512051826164934933223973782173530664213769710713735400946401280 126684172302824894625478613141354224
removals 
reporing rt 4
section_temp 0
section h inf
2185859382581861861825858182586182796429354932209861397740493301874688 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 2175724648797635870255819893534874329848365371570564414321254752845824
            ----->  | *2 4351449297595271740511639787069748659696730743141128828642509505691648
            ----->  /2 1087862324398817935127909946767437164924182685785282207160627376422912
                 --> 543931162199408967563954973383718582462091342892641103580313688211456
                 --> 271965581099704483781977486691859291231045671446320551790156844105728
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1893511098954238380290103118857553411024666471487301241743706993721344 43514492975952717405116397870697488
i insert 11834444368463989876813144492859706492755172823192855179235813220155392 108786232439881793512790994676743712
i insert 0 0
i insert 118344443684639898768131444928597088189041654467956327608981687107584 10878623243988179351279099467674372
i insert 739652773028999367300821530803731655797198301449553448702238326259712 27196558109970448378197748669185928
section_temp 0
section h inf
168143029429373989371219860198937133393984048445533065798041334710272 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 158008295645147997801181571147628791428119092642099167110714686963712
            ----->  | *2 316016591290295995602363142295257582856238185284198334221429373927424
            ----->  /2 79004147822573998900590785573814395714059546321049583555357343481856
                 --> 39502073911286999450295392786907197857029773160524791777678671740928
                 --> 19751036955643499725147696393453598928514886580262395888839335870464
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 998664859707379829066913486071575778248310459815357397553671470841856 31601659129029599560236314229525744
i insert 6241655373171123931668209287947349320204313134582541214857947466694656 79004147822573998900590785573814360
i insert 0 0
i insert 62416553731711239316682092879473486140519403738459837347104466927616 7900414782257399890059078557381436
i insert 39010346082319524572926308049670935245118950768514691948572762087358464 197510369556434997251476963934535904
section_temp 0
section h inf
42035757357343497342804965049734283348496012111383266449510333677568 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 31901023573117505772766675998425946574927914842776996292680015151104
            ----->  | *2 63802047146235011545533351996851893149855829685553992585360030302208
            ----->  /2 15950511786558752886383337999212973287463957421388498146340007575552
                 --> 7975255893279376443191668999606486643731978710694249073170003787776
                 --> 3987627946639688221595834499803243321865989355347124536585001893888
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4070701220050395180732001730063647641143574035003281179283731941163008 63802047146235011545533351996851880
i insert 25441882625314969879575010812897797092533339826312570918619794492096512 159505117865587528863833379992129696
i insert 0 0
i insert 254418826253149698795750108128977977571473377187705073705233246322688 15950511786558752886383337999212970
i insert 1590117664082185617473438175806112318283333739144535682413737155756032 39876279466396882215958344998032424
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 3405270551499933167532865121239601903609628311266885281086458432585728
            ----->  | *2 6810541102999866335065730242479203807219256622533770562172916865171456
            ----->  /2 1702635275749966583766432560619800951804814155633442640543229216292864
                 --> 851317637874983291883216280309900475902407077816721320271614608146432
                 --> 425658818937491645941608140154950237951203538908360660135807304073216
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4638347011565063594794225206409586279147758214801027052571411164954624 68105411029998663350657302424792040
i insert 28989668822281647467463907540059912583138494111361577948812494430535680 170263527574996658376643256061980096
i insert 0 0
i insert 289896688222816474674639075400599142446734888425064190785713197809664 17026352757499665837664325606198010
i insert 1811854301392602966716494221253744536446155881960098621800780901908480 42565881893749164594160814015495024
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 43717187651637237236517163651723672 ^2 ::== 1911192496168463337495457097384964498137436774855217785486281183068160 as intpart 1911192496168463337495457097384964498137436774855217785486281183068160  diafora 52735292068378083208150997467269599763377454444498857316846045172334592 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 109292969129093093091292909129309184 ^2 ::== 11944953101052895859346606858656027864128730633173384989825433591611392 as intpart 11944953101052895859346606858656027864128730633173384989825433591611392  diafora 42701531463493650686299847705998536729693159532409658338458657833877504 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10929296912909309309129290912930918 ^2 ::== 119449531010528958593466068586560281133589798428451111592892573941760 as intpart 119449531010528958593466068586560281133589798428451111592892573941760  diafora 54527035033536017587052988496068007864219351604976690131550688038092800 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 27323242282273273272823227282327296 ^2 ::== 746559568815805991209162928666001741508045664573336561864089599475712 as intpart 746559568815805991209162928666001741508045664573336561864089599475712  diafora 53899924995730740554437291635988562104623096871994528258028530418319360 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 33628605885874797874243972039787412 ^2 ::== 1130883133827493099109737927446722562252072458476109358263397750145024 as intpart 1130883133827493099109737927446722562252072458476109358263397750145024  diafora 53515601430719053446536716637207844191565310857595227438707166630903808 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 84071514714686994685609930099468528 ^2 ::== 7068019586421831869435862046542016138690577470311546573878147839688704 as intpart 7068019586421831869435862046542016138690577470311546573878147839688704  diafora 47578464978124714676210592518112548455131312695271496754405943585800192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 8407151471468699468560993009946853 ^2 ::== 70680195864218318694358620465420160140754528654756834891462359384064 as intpart 70680195864218318694358620465420160140754528654756834891462359384064  diafora 54575804368682328226952095944189144153297105276047594552745827288219648 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 210178786786717486714024825248671328 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544  diafora 10471362149410097361672316773766964723926777814822781919400962637692928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 84071514714686994685609930099468528 ^2 ::== 7068019586421831869435862046542016138690577470311546573878147839688704 as intpart 7068019586421831869435862046542016138690577470311546573878147839688704  diafora 47578464978124714676210592518112548455131312695271496754405943585800192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 210178786786717486714024825248671328 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544  diafora 10471362149410097361672316773766964723926777814822781919400962637692928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 21017878678671748671402482524867132 ^2 ::== 441751224151364491839741377908876008668161091894471660867384239980544 as intpart 441751224151364491839741377908876008668161091894471660867384239980544  diafora 54204733340395182053806713186745691825146968799421011870446416618848256 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 52544696696679371678506206312167832 ^2 ::== 2760945150946028073998383611930475074945194258479758394543136816758784 as intpart 2760945150946028073998383611930475074945194258479758394543136816758784  diafora 51885539413600518471648070952724092177332687476935030741355075169419264 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68308105705683183182058068205818240 ^2 ::== 4665997305098787445057268304162511237501471783951632251724310383689728 as intpart 4665997305098787445057268304162511237501471783951632251724310383689728  diafora 49980487259447759100589186260492056679390407843921093336077431742660608 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170770264264207957955145170514545600 ^2 ::== 29162483156867421531607926901015692077467708660522503426735171732242432 as intpart 29162483156867421531607926901015692077467708660522503426735171732242432  diafora 25484001407679125014038527663638873845582177289976412805355979973591040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17077026426420795795514517051454560 ^2 ::== 291624831568674215316079269010156952343841986496977015732769398980608 as intpart 291624831568674215316079269010156952343841986496977015732769398980608  diafora 54354859732977872330330375295644408098400171730150897623234998997876736 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42692566066051989488786292628636400 ^2 ::== 1822655197304213845725495431313480754841731791282656464170948233265152 as intpart 1822655197304213845725495431313480754841731791282656464170948233265152  diafora 52823829367242332699920959133341083506673159428071418638161378122137600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202694675684519831400765781026166752 ^2 ::== 41085131550852674982233429053372881300856103759317761104116978198511616 as intpart 41085131550852674982233429053372881300856103759317761104116978198511616  diafora 13561353013693871563413025511281684622193782191181155127974173507321856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 50673668921129957850191445256541688 ^2 ::== 2567820721928292186389589315835805081303506484957360069007311137406976 as intpart 2567820721928292186389589315835805081303506484957360069007311137406976  diafora 52078663842618254359256865248818761838667376304228460840939135778684928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5067366892112995785019144525654169 ^2 ::== 25678207219282921863895893158358053097645682604897757243491496230912 as intpart 25678207219282921863895893158358053097645682604897757243491496230912  diafora 54620806357327263623782558671496208467066378999399195755854738069913600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 126684172302824894625478613141354224 ^2 ::== 16048879512051826164934933223973782173530664213769710713735400946401280 as intpart 16048879512051826164934933223973782173530664213769710713735400946401280  diafora 38597605052494720380711521340680783749519221736729205518355750759432192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 43514492975952717405116397870697488 ^2 ::== 1893511098954238380290103118857553411024666471487301241743706993721344 as intpart 1893511098954238380290103118857553411024666471487301241743706993721344  diafora 52752973465592308165356351445797011182797223694095742086540384431767552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 108786232439881793512790994676743712 ^2 ::== 11834444368463989876813144492859706492755172823192855179235813220155392 as intpart 11834444368463989876813144492859706492755172823192855179235813220155392  diafora 42812040196082556668833310071794858101066717342390188149048278205333504 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10878623243988179351279099467674372 ^2 ::== 118344443684639898768131444928597088189041654467956327608981687107584 as intpart 118344443684639898768131444928597088189041654467956327608981687107584  diafora 54528140120861906646878323119725969748705091398160622525849523961462784 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 27196558109970448378197748669185928 ^2 ::== 739652773028999367300821530803731655797198301449553448702238326259712 as intpart 739652773028999367300821530803731655797198301449553448702238326259712  diafora 53906831791517547178345633033850835845710932643636961856659797462482944 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 31601659129029599560236314229525744 ^2 ::== 998664859707379829066913486071575778248310459815357397553671470841856 as intpart 998664859707379829066913486071575778248310459815357397553671470841856  diafora 53647819704839166716579541078582991307876071802484947625368657980293120 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 79004147822573998900590785573814360 ^2 ::== 6241655373171123931668209287947349320204313134582541214857947466694656 as intpart 6241655373171123931668209287947349320204313134582541214857947466694656  diafora 48404829191375422613978245276707213944389581246084629209619083678449664 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7900414782257399890059078557381436 ^2 ::== 62416553731711239316682092879473486140519403738459837347104466927616 as intpart 62416553731711239316682092879473486140519403738459837347104466927616  diafora 54584068010814835306329772471775093838829518351163916097978056128331776 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 197510369556434997251476963934535904 ^2 ::== 39010346082319524572926308049670935245118950768514691948572762087358464 as intpart 39010346082319524572926308049670935245118950768514691948572762087358464  diafora 15636138482227021972720146514983630677930935181984224283518389618475008 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 63802047146235011545533351996851880 ^2 ::== 4070701220050395180732001730063647641143574035003281179283731941163008 as intpart 4070701220050395180732001730063647641143574035003281179283731941163008  diafora 50575783344496151364914452834590915623450320345663889245193299203981312 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 159505117865587528863833379992129696 ^2 ::== 25441882625314969879575010812897797092533339826312570918619794492096512 as intpart 25441882625314969879575010812897797092533339826312570918619794492096512  diafora 29204601939231576666071443751756771488972537694018091121085477774426112 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15950511786558752886383337999212970 ^2 ::== 254418826253149698795750108128977977571473377187705073705233246322688 as intpart 254418826253149698795750108128977977571473377187705073705233246322688  diafora 54392065738293396846850704456525586117789918369051885915651210574036992 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 39876279466396882215958344998032424 ^2 ::== 1590117664082185617473438175806112318283333739144535682413737155756032 as intpart 1590117664082185617473438175806112318283333739144535682413737155756032  diafora 53056366900464360928173016388848455432455046415613705792412122435551232 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68105411029998663350657302424792040 ^2 ::== 4638347011565063594794225206409586279147758214801027052571411164954624 as intpart 4638347011565063594794225206409586279147758214801027052571411164954624  diafora 50008137552981482950852229358244980973130123520613762083326800821223424 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170263527574996658376643256061980096 ^2 ::== 28989668822281647467463907540059912583138494111361577948812494430535680 as intpart 28989668822281647467463907540059912583138494111361577948812494430535680  diafora 25656815742264899078182547024594653339911391839137338283278657275297792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17026352757499665837664325606198010 ^2 ::== 289896688222816474674639075400599142446734888425064190785713197809664 as intpart 289896688222816474674639075400599142446734888425064190785713197809664  diafora 54356587876323730070971815489253969189828893422233871679455735266148352 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42565881893749164594160814015495024 ^2 ::== 1811854301392602966716494221253744536446155881960098621800780901908480 as intpart 1811854301392602966716494221253744536446155881960098621800780901908480  diafora 52834630263153943578929960343400821718910729014767785836242135874011136 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 210178786786717486714024825248671328 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544  diafora 10471362149410097361672316773766964723926777814822781919400962637692928 from 54646484564546546545646454564654565923049885950498916232091151705833472
 of 210178786786717486714024825248671328 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544  diafora 10471362149410097361672316773766964723926777814822781919400962637692928 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

9 26 |35 17| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 35 ::== 1561328130415615615589898701847273378548539387831476966107243062755328
            ----->  | *2 3122656260831231231179797403694546757097078775662953932214486125510656
            ----->  /2 780664065207807807794949350923636689274269693915738483053621531377664
                 --> 390332032603903903897474675461818344637134846957869241526810765688832
                 --> 195166016301951951948737337730909172318567423478934620763405382844416
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 975098212330848641579314845604572435002165705875030238904523801231360 31226562608312312311797974036945460
i insert 6094363827067804009870717785028577303379786978932728710713567420088320 78066406520780780779494935092363648
i insert 0 0
i insert 60943638270678040098707177850285777187635356617189389931532737576960 7806640652078078077949493509236365
i insert 38089773919173775061691986156428605653821176521612292747321558349905920 195166016301951951948737337730909120
CDIS Start 
section_temp 0
section h inf
1561328130415615615589898701847273378548539387831476966107243062755328 / 13 ::== 120102163878124278122299900142097955391301096623853691873170284347392
            ----->  | *2 240204327756248556244599800284195910782602193247707383746340568694784
            ----->  /2 60051081939062139061149950071048977695650548311926845936585142173696
                 --> 30025540969531069530574975035524488847825274155963422968292571086848
                 --> 15012770484765534765287487517762244423912637077981711484146285543424
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 576981190728312805668233636452409724853352488683449845505635385344000 24020432775624855624459980028419584
i insert 3606132442051955035426460227827560448026454108042593308458456088313856 60051081939062139061149950071048960
i insert 0 0
i insert 36061324420519550354264602278275607803334530542715615344102211584000 6005108193906213906114995007104896
i insert 22538327762824718971415376423922254461700332906411049307624175902392320 150127704847655347652874875177622400
section_temp 0
section h inf
120102163878124278122299900142097955391301096623853691873170284347392 / 4 ::== 30025540969531069530574975035524488847825274155963422968292571086848
            ----->  | *2 60051081939062139061149950071048977695650548311926845936585142173696
            ----->  /2 15012770484765534765287487517762244423912637077981711484146285543424
                 --> 7506385242382767382643743758881122211956318538990855742073142771712
                 --> 3753192621191383691321871879440561105978159269495427871036571385856
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3606132442051955035426460227827560448026454108042593308458456088313856 60051081939062139061149950071048960
i insert 22538327762824718971415376423922254461700332906411049307624175902392320 150127704847655347652874875177622400
i insert 0 0
i insert 225383277628247189714153764239222528001653381752662081778653505519616 15012770484765534765287487517762240
i insert 1408645485176544935713461026495140903856270806650690581726510993899520 37531926211913836913218718794405600
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 17 ::== 3214499092032149796802732621450268661898698925612634655052835999186944
            ----->  | *2 6428998184064299593605465242900537323797397851225269310105671998373888
            ----->  /2 1607249546016074898401366310725134330949349462806317327526417999593472
                 --> 803624773008037449200683155362567165474674731403158663763208999796736
                 --> 401812386504018724600341577681283582737337365701579331881604499898368
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4133201765070206179704708255590313744898774281690805001651951499214848 64289981840642995936054652429005344
i insert 25832511031688788623154426597439460407156840841224078921397049264963584 160724954601607489840136631072513360
i insert 0 0
i insert 258325110316887886231544265974394609056173392605675312603246968700928 16072495460160748984013663107251336
i insert 1614531939480549288947151662339966275447302552576504932587315579060224 40181238650401872460034157768128340
section_temp 0
section h inf
3214499092032149796802732621450268661898698925612634655052835999186944 / 337 ::== 9538572973389168536506624989466672729755029279109169789198596571136
            ----->  | *2 19077145946778337073013249978933345459510058558218339578397193142272
            ----->  /2 4769286486694584268253312494733336364877514639554584894599298285568
                 --> 2384643243347292134126656247366668182438757319777292447299649142784
                 --> 1192321621673646067063328123683334091219378659888646223649824571392
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 36393749747468113479071826427901247736355657798396420895491313799004160 190771459467783370730132499789333440
i insert 2274609359216757092441989151743827983522228612399776305968207112437760 47692864866945842682533124947333360
i insert 0 0
i insert 22746093592167570924419891517438281912141029537928814471880602812416 4769286486694584268253312494733336
i insert 14216308495104731827762432198398926807779172768315169211523943605731328 119232162167364606706332812368333408
removals 
reporing rt 4
section_temp 0
section h inf
1561328130415615615589898701847273378548539387831476966107243062755328 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 1551789557442226447053392076857806733078342865860212846103150194589696
            ----->  | *2 3103579114884452894106784153715613466156685731720425692206300389179392
            ----->  /2 775894778721113223526696038428903366539171432930106423051575097294848
                 --> 387947389360556611763348019214451683269585716465053211525787548647424
                 --> 193973694680278305881674009607225841634792858232526605762893774323712
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 963220332234696405571559489224974985266446901099754244534837268447232 31035791148844528941067841537156128
i insert 6020127076466852534822246807656093076378044975972769632927144055144448 77589477872111322352669603842890320
i insert 0 0
i insert 60201270764668525348222468076560936579152931318734640283427329277952 7758947787211132235266960384289032
i insert 37625794227917828342639042547850580065827786368684969076035824994222080 193973694680278305881674009607225792
section_temp 0
section h inf
120102163878124278122299900142097955391301096623853691873170284347392 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 110563590904735109585793275152631289151917140513279057747092099301376
            ----->  | *2 221127181809470219171586550305262578303834281026558115494184198602752
            ----->  /2 55281795452367554792896637576315644575958570256639528873546049650688
                 --> 27640897726183777396448318788157822287979285128319764436773024825344
                 --> 13820448863091888698224159394078911143989642564159882218386512412672
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 48897230534998496992972214058731179490988178063105626302665664308969472 221127181809470219171586550305262592
i insert 3056076908437406062060763378670698718186761128944101643916604019310592 55281795452367554792896637576315648
i insert 0 0
i insert 30560769084374060620607633786706989674170103386158278133804278218752 5528179545236755479289663757631565
i insert 19100480677733787887879771116691867154820756529015119387454657655734272 138204488630918886982241593940789120
section_temp 0
section h inf
30025540969531069530574975035524488847825274155963422968292571086848 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 20486967996141900994068350046057817416144459510561160311718056820736
            ----->  | *2 40973935992283801988136700092115634832288919021122320623436113641472
            ----->  /2 10243483998070950497034175023028908708072229755280580155859028410368
                 --> 5121741999035475248517087511514454354036114877640290077929514205184
                 --> 2560870999517737624258543755757227177018057438820145038964757102592
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1678863430699769993056711529409363482402279446856799012572281182355456 40973935992283801988136700092115636
i insert 10492896441873562456604447058808521474245622464904646630868962953396224 102434839980709504970341750230289088
i insert 0 0
i insert 104928964418735624566044470588085217650142465428549938285767573897216 10243483998070950497034175023028909
i insert 655806027617097653537777941175532592140351404056540414429310184587264 25608709995177376242585437557572272
section_temp 0
section h inf
3214499092032149796802732621450268661898698925612634655052835999186944 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 3204960519058760628266225996460801850275002930526886422072860595978240
            ----->  | *2 6409921038117521256532451992921603700550005861053772844145721191956480
            ----->  /2 1602480259529380314133112998230400925137501465263443211036430297989120
                 --> 801240129764690157066556499115200462568750732631721605518215148994560
                 --> 400620064882345078533278249557600231284375366315860802759107574497280
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4108708771490160139333292916404336638739794589116343634153072767270912 64099210381175212565324519929216016
i insert 25679429821813500870833080727527106982886706698037861747022590426218496 160248025952938031413311299823040048
i insert 0 0
i insert 256794298218135008708330807275271039921237161819771477134567047954432 16024802595293803141331129982304004
i insert 1604964363863343804427067545470444186430419168627366359188911901638656 40062006488234507853327824955760012
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 31226562608312312311797974036945460 ^2 ::== 975098212330848641579314845604572435002165705875030238904523801231360 as intpart 975098212330848641579314845604572435002165705875030238904523801231360  diafora 53671386352215697904067139719049995149582714975768727122945453255032832 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 78066406520780780779494935092363648 ^2 ::== 6094363827067804009870717785028577303379786978932728710713567420088320 as intpart 6094363827067804009870717785028577303379786978932728710713567420088320  diafora 48552120737478742535775736779625987955056101079108251069474054145572864 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7806640652078078077949493509236365 ^2 ::== 60943638270678040098707177850285777187635356617189389931532737576960 as intpart 60943638270678040098707177850285777187635356617189389931532737576960  diafora 54585540926275868505547747386804278920480191979662406508962485272313856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 195166016301951951948737337730909120 ^2 ::== 38089773919173775061691986156428605653821176521612292747321558349905920 as intpart 38089773919173775061691986156428605653821176521612292747321558349905920  diafora 16556710645372771483954468408225960269228709428886623484769593355927552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 24020432775624855624459980028419584 ^2 ::== 576981190728312805668233636452409724853352488683449845505635385344000 as intpart 576981190728312805668233636452409724853352488683449845505635385344000  diafora 54069503373818233739978220928202157527424529246731339290392576600834048 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 60051081939062139061149950071048960 ^2 ::== 3606132442051955035426460227827560448026454108042593308458456088313856 as intpart 3606132442051955035426460227827560448026454108042593308458456088313856  diafora 51040352122494591510219994336827004145795436057540450019825635337175040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 6005108193906213906114995007104896 ^2 ::== 36061324420519550354264602278275607803334530542715615344102211584000 as intpart 36061324420519550354264602278275607803334530542715615344102211584000  diafora 54610423240126026995292189962376289401402304317826537995379695551512576 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 150127704847655347652874875177622400 ^2 ::== 22538327762824718971415376423922254461700332906411049307624175902392320 as intpart 22538327762824718971415376423922254461700332906411049307624175902392320  diafora 32108156801721827574231078140732308802893561474256121116852855242752000 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 60051081939062139061149950071048960 ^2 ::== 3606132442051955035426460227827560448026454108042593308458456088313856 as intpart 3606132442051955035426460227827560448026454108042593308458456088313856  diafora 51040352122494591510219994336827004145795436057540450019825635337175040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 150127704847655347652874875177622400 ^2 ::== 22538327762824718971415376423922254461700332906411049307624175902392320 as intpart 22538327762824718971415376423922254461700332906411049307624175902392320  diafora 32108156801721827574231078140732308802893561474256121116852855242752000 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15012770484765534765287487517762240 ^2 ::== 225383277628247189714153764239222528001653381752662081778653505519616 as intpart 225383277628247189714153764239222528001653381752662081778653505519616  diafora 54421101286918299355932300800415345638120475455791789675486912423395328 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 37531926211913836913218718794405600 ^2 ::== 1408645485176544935713461026495140903856270806650690581726510993899520 as intpart 1408645485176544935713461026495140903856270806650690581726510993899520  diafora 53237839079370001609932993538159424520733116724504773311436993106804736 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 64289981840642995936054652429005344 ^2 ::== 4133201765070206179704708255590313744898774281690805001651951499214848 as intpart 4133201765070206179704708255590313744898774281690805001651951499214848  diafora 50513282799476340365941746309064254171993105346181920586149790627135488 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 160724954601607489840136631072513360 ^2 ::== 25832511031688788623154426597439460407156840841224078921397049264963584 as intpart 25832511031688788623154426597439460407156840841224078921397049264963584  diafora 28813973532857757922492027967215108174349036679106583118308223001559040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 16072495460160748984013663107251336 ^2 ::== 258325110316887886231544265974394609056173392605675312603246968700928 as intpart 258325110316887886231544265974394609056173392605675312603246968700928  diafora 54388159454229658659414910298680173100143831893873945133978641988845568 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 40181238650401872460034157768128340 ^2 ::== 1614531939480549288947151662339966275447302552576504932587315579060224 as intpart 1614531939480549288947151662339966275447302552576504932587315579060224  diafora 53031952625065997256699302902314598816835086032349990734624423451557888 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 190771459467783370730132499789333440 ^2 ::== 36393749747468113479071826427901247736355657798396420895491313799004160 as intpart 36393749747468113479071826427901247736355657798396420895491313799004160  diafora 18252734817078433066574628136753318186694228152102495336599837906829312 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 47692864866945842682533124947333360 ^2 ::== 2274609359216757092441989151743827983522228612399776305968207112437760 as intpart 2274609359216757092441989151743827983522228612399776305968207112437760  diafora 52371875205329789453204465412910738271834656284328108152074709663481856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 4769286486694584268253312494733336 ^2 ::== 22746093592167570924419891517438281912141029537928814471880602812416 as intpart 22746093592167570924419891517438281912141029537928814471880602812416  diafora 54623738470954378974722034673137129188442208764339620719707177210609664 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 119232162167364606706332812368333408 ^2 ::== 14216308495104731827762432198398926807779172768315169211523943605731328 as intpart 14216308495104731827762432198398926807779172768315169211523943605731328  diafora 40430176069441814717884022366255639115270713182183747020567208100102144 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 31035791148844528941067841537156128 ^2 ::== 963220332234696405571559489224974985266446901099754244534837268447232 as intpart 963220332234696405571559489224974985266446901099754244534837268447232  diafora 53683264232311850140074895075429590605476440103170193761604549367300096 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 77589477872111322352669603842890320 ^2 ::== 6020127076466852534822246807656093076378044975972769632927144055144448 as intpart 6020127076466852534822246807656093076378044975972769632927144055144448  diafora 48626357488079694010824207756998474175899836759442019502971067931033600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7758947787211132235266960384289032 ^2 ::== 60201270764668525348222468076560936579152931318734640283427329277952 as intpart 60201270764668525348222468076560936579152931318734640283427329277952  diafora 54586283293781878020298232096578007291850538208643648659348094550278144 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 193973694680278305881674009607225792 ^2 ::== 37625794227917828342639042547850580065827786368684969076035824994222080 as intpart 37625794227917828342639042547850580065827786368684969076035824994222080  diafora 17020690336628718203007412016803985857222099581813947156055326711611392 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 221127181809470219171586550305262592 ^2 ::== 48897230534998496992972214058731179490988178063105626302665664308969472 as intpart 48897230534998496992972214058731179490988178063105626302665664308969472  diafora 5749254029548049552674240505923386432061707887393289929425487396864000 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 55281795452367554792896637576315648 ^2 ::== 3056076908437406062060763378670698718186761128944101643916604019310592 as intpart 3056076908437406062060763378670698718186761128944101643916604019310592  diafora 51590407656109140483585691185983866540249126929096878136271017546350592 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5528179545236755479289663757631565 ^2 ::== 30560769084374060620607633786706989674170103386158278133804278218752 as intpart 30560769084374060620607633786706989674170103386158278133804278218752  diafora 54615923795462172485025846930867858663376279203301721270371538308169728 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 138204488630918886982241593940789120 ^2 ::== 19100480677733787887879771116691867154820756529015119387454657655734272 as intpart 19100480677733787887879771116691867154820756529015119387454657655734272  diafora 35546003886812758657766683447962698768229129421483796844636494050099200 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 40973935992283801988136700092115636 ^2 ::== 1678863430699769993056711529409363482402279446856799012572281182355456 as intpart 1678863430699769993056711529409363482402279446856799012572281182355456  diafora 52967621133846776552589743035245202274494107030527633106542987988434944 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 102434839980709504970341750230289088 ^2 ::== 10492896441873562456604447058808521474245622464904646630868962953396224 as intpart 10492896441873562456604447058808521474245622464904646630868962953396224  diafora 44153588122672984089042007505846044448804263485594269601222188752437248 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10243483998070950497034175023028909 ^2 ::== 104928964418735624566044470588085217650142465428549938285767573897216 as intpart 104928964418735624566044470588085217650142465428549938285767573897216  diafora 54541555600127810921080410094066482356550144499145552166503216823926784 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 25608709995177376242585437557572272 ^2 ::== 655806027617097653537777941175532592140351404056540414429310184587264 as intpart 655806027617097653537777941175532592140351404056540414429310184587264  diafora 53990678536929448892108676623479034327830531385129280495517136731504640 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 64099210381175212565324519929216016 ^2 ::== 4108708771490160139333292916404336638739794589116343634153072767270912 as intpart 4108708771490160139333292916404336638739794589116343634153072767270912  diafora 50537775793056386406313161648250227955082095576466699694131018658217984 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 160248025952938031413311299823040048 ^2 ::== 25679429821813500870833080727527106982886706698037861747022590426218496 as intpart 25679429821813500870833080727527106982886706698037861747022590426218496  diafora 28967054742733045674813373837127461598619170822292800292682681840304128 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 16024802595293803141331129982304004 ^2 ::== 256794298218135008708330807275271039921237161819771477134567047954432 as intpart 256794298218135008708330807275271039921237161819771477134567047954432  diafora 54389690266328411536938123757379295464665896944579839150372173530529792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 40062006488234507853327824955760012 ^2 ::== 1604964363863343804427067545470444186430419168627366359188911901638656 as intpart 1604964363863343804427067545470444186430419168627366359188911901638656  diafora 53041520200683202741219387019184124228921958878588811567540477829840896 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 221127181809470219171586550305262592 ^2 ::== 48897230534998496992972214058731179490988178063105626302665664308969472 as intpart 48897230534998496992972214058731179490988178063105626302665664308969472  diafora 5749254029548049552674240505923386432061707887393289929425487396864000 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

9 |26| 35 |17| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 26 ::== 2101787867867174867140248252486714073963457151942266008926582757916672
            ----->  | *2 4203575735734349734280496504973428147926914303884532017853165515833344
            ----->  /2 1050893933933587433570124126243357036981728575971133004463291378958336
                 --> 525446966966793716785062063121678518490864287985566502231645689479168
                 --> 262723483483396858392531031560839259245432143992783251115822844739584
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1767004896605457967358965511635504034672644367577886643469536959922176 42035757357343497342804965049734264
i insert 11043780603784112295993534447721900299780777033919033578172547267035136 105089393393358743357012412624335664
i insert 0 0
i insert 110437806037841122959935344477219002167040272973617915216846059995136 10508939339335874335701241262433566
i insert 690236287736507018499595902982618768736298564619939598635784204189696 26272348348339685839253103156083916
CDIS Start 
section_temp 0
section h inf
2101787867867174867140248252486714073963457151942266008926582757916672 / 13 ::== 161675989835936528241557557883593382316732306249670264485896628731904
            ----->  | *2 323351979671873056483115115767186764633464612499340528971793257463808
            ----->  /2 80837994917968264120778778941796691158366153124835132242948314365952
                 --> 40418997458984132060389389470898345579183076562417566121474157182976
                 --> 20209498729492066030194694735449172789591538281208783060737078591488
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1045565027577194063526015095642311379421246983521518708290357439758336 32335197967187305648311511576718684
i insert 6534781422357462897037594347764446038306043910452249870326792730968064 80837994917968264120778778941796712
i insert 0 0
i insert 65347814223574628970375943477644461213827936470094919268147339984896 8083799491796826412077877894179671
i insert 40842383889734143106484964673527785080956782870494815881928334007861248 202094987294920660301946947354491776
section_temp 0
section h inf
161675989835936528241557557883593382316732306249670264485896628731904 / 4 ::== 40418997458984132060389389470898345579183076562417566121474157182976
            ----->  | *2 80837994917968264120778778941796691158366153124835132242948314365952
            ----->  /2 20209498729492066030194694735449172789591538281208783060737078591488
                 --> 10104749364746033015097347367724586394795769140604391530368539295744
                 --> 5052374682373016507548673683862293197397884570302195765184269647872
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 6534781422357462897037594347764446038306043910452249870326792730968064 80837994917968264120778778941796712
i insert 40842383889734143106484964673527785080956782870494815881928334007861248 202094987294920660301946947354491776
i insert 0 0
i insert 408423838897341431064849646735277877394127744403265616895424545685504 20209498729492066030194694735449178
i insert 2552648993108383944155310292095486567559798929405925992620520875491328 50523746823730165075486736838622944
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 17 ::== 3214499092032149796802732621450268661898698925612634655052835999186944
            ----->  | *2 6428998184064299593605465242900537323797397851225269310105671998373888
            ----->  /2 1607249546016074898401366310725134330949349462806317327526417999593472
                 --> 803624773008037449200683155362567165474674731403158663763208999796736
                 --> 401812386504018724600341577681283582737337365701579331881604499898368
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4133201765070206179704708255590313744898774281690805001651951499214848 64289981840642995936054652429005344
i insert 25832511031688788623154426597439460407156840841224078921397049264963584 160724954601607489840136631072513360
i insert 0 0
i insert 258325110316887886231544265974394609056173392605675312603246968700928 16072495460160748984013663107251336
i insert 1614531939480549288947151662339966275447302552576504932587315579060224 40181238650401872460034157768128340
section_temp 0
section h inf
3214499092032149796802732621450268661898698925612634655052835999186944 / 337 ::== 9538572973389168536506624989466672729755029279109169789198596571136
            ----->  | *2 19077145946778337073013249978933345459510058558218339578397193142272
            ----->  /2 4769286486694584268253312494733336364877514639554584894599298285568
                 --> 2384643243347292134126656247366668182438757319777292447299649142784
                 --> 1192321621673646067063328123683334091219378659888646223649824571392
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 36393749747468113479071826427901247736355657798396420895491313799004160 190771459467783370730132499789333440
i insert 2274609359216757092441989151743827983522228612399776305968207112437760 47692864866945842682533124947333360
i insert 0 0
i insert 22746093592167570924419891517438281912141029537928814471880602812416 4769286486694584268253312494733336
i insert 14216308495104731827762432198398926807779172768315169211523943605731328 119232162167364606706332812368333408
removals 
reporing rt 4
section_temp 0
section h inf
2101787867867174867140248252486714073963457151942266008926582757916672 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 2092249294893785698603741627497247262339761156856517775946607354707968
            ----->  | *2 4184498589787571397207483254994494524679522313713035551893214709415936
            ----->  /2 1046124647446892849301870813748623631169880578428258887973303677353984
                 --> 523062323723446424650935406874311815584940289214129443986651838676992
                 --> 261531161861723212325467703437155907792470144607064721993325919338496
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1751002844793417372232321314723051288266860800278762229790057506537472 41844985897875713972074832549944928
i insert 10943767779958858576452008217019070219360881055513295710236094345773056 104612464744689284930187081374862320
i insert 0 0
i insert 109437677799588585764520082170190705516678800017422639361878594158592 10461246474468928493018708137486232
i insert 683985486247428661028250513563691888710055065969580981889755896610816 26153116186172321232546770343715580
section_temp 0
section h inf
161675989835936528241557557883593382316732306249670264485896628731904 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 152137416862547359705050932894126716077348350139095630359818443685888
            ----->  | *2 304274833725094719410101865788253432154696700278191260719636887371776
            ----->  /2 76068708431273679852525466447063358038674175069547815179909221842944
                 --> 38034354215636839926262733223531679019337087534773907589954610921472
                 --> 19017177107818419963131366611765839509668543767386953794977305460736
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 925831744384340388411435595678328572953534770582770203716552111423488 30427483372509471941010186578825352
i insert 5786448402402127427571472472989553290190968238191966575520656260071424 76068708431273679852525466447063376
i insert 0 0
i insert 57864484024021274275714724729895535809595923161423137732284506963968 7606870843127367985252546644706338
i insert 36165302515013296422321702956184706900619055176898402306172923880144896 190171771078184199631313666117658432
section_temp 0
section h inf
40418997458984132060389389470898345579183076562417566121474157182976 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 30880424485594963523882764481431674147502261917015303464899642916864
            ----->  | *2 61760848971189927047765528962863348295004523834030606929799285833728
            ----->  /2 15440212242797481761941382240715837073751130958507651732449821458432
                 --> 7720106121398740880970691120357918536875565479253825866224910729216
                 --> 3860053060699370440485345560178959268437782739626912933112455364608
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3814402465642131870266145546874131147259818981855201233491134014029824 61760848971189927047765528962863344
i insert 23840015410263324189163409667963323159597357571999174081813120823590912 154402122427974817619413822407158368
i insert 0 0
i insert 238400154102633241891634096679633196703738686365950077093195875876864 15440212242797481761941382240715836
i insert 1490000963141457761822713104247707697474834848249948380113320051474432 38600530606993704404853455601789592
section_temp 0
section h inf
3214499092032149796802732621450268661898698925612634655052835999186944 - 9538572973389168536506624989466672729755029279109169789198596571136 ::== 3204960519058760628266225996460801850275002930526886422072860595978240
            ----->  | *2 6409921038117521256532451992921603700550005861053772844145721191956480
            ----->  /2 1602480259529380314133112998230400925137501465263443211036430297989120
                 --> 801240129764690157066556499115200462568750732631721605518215148994560
                 --> 400620064882345078533278249557600231284375366315860802759107574497280
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4108708771490160139333292916404336638739794589116343634153072767270912 64099210381175212565324519929216016
i insert 25679429821813500870833080727527106982886706698037861747022590426218496 160248025952938031413311299823040048
i insert 0 0
i insert 256794298218135008708330807275271039921237161819771477134567047954432 16024802595293803141331129982304004
i insert 1604964363863343804427067545470444186430419168627366359188911901638656 40062006488234507853327824955760012
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 42035757357343497342804965049734264 ^2 ::== 1767004896605457967358965511635504034672644367577886643469536959922176 as intpart 1767004896605457967358965511635504034672644367577886643469536959922176  diafora 52879479667941088578287489053019064214526234206523807170283970236514304 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 105089393393358743357012412624335664 ^2 ::== 11043780603784112295993534447721900299780777033919033578172547267035136 as intpart 11043780603784112295993534447721900299780777033919033578172547267035136  diafora 43602703960762434249652920116932665623269108916579882653918604438798336 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10508939339335874335701241262433566 ^2 ::== 110437806037841122959935344477219002167040272973617915216846059995136 as intpart 110437806037841122959935344477219002167040272973617915216846059995136  diafora 54536046758508705422686519220177347398574156662729440141679967934087168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 26272348348339685839253103156083916 ^2 ::== 690236287736507018499595902982618768736298564619939598635784204189696 as intpart 690236287736507018499595902982618768736298564619939598635784204189696  diafora 53956248276810039527146858661671944828164594762276199051793012011040768 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 32335197967187305648311511576718684 ^2 ::== 1045565027577194063526015095642311379421246983521518708290357439758336 as intpart 1045565027577194063526015095642311379421246983521518708290357439758336  diafora 53600919536969352482120439469012252217479646343374619942138438775472128 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 80837994917968264120778778941796712 ^2 ::== 6534781422357462897037594347764446038306043910452249870326792730968064 as intpart 6534781422357462897037594347764446038306043910452249870326792730968064  diafora 48111703142189083648608860216890119884743842040046666361764358974865408 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 8083799491796826412077877894179671 ^2 ::== 65347814223574628970375943477644461213827936470094919268147339984896 as intpart 65347814223574628970375943477644461213827936470094919268147339984896  diafora 54581136750322971916676078621176919654916751243908806584210281797255168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202094987294920660301946947354491776 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248  diafora 13804100674812403439161489891126780842093103080004100350162817697972224 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 80837994917968264120778778941796712 ^2 ::== 6534781422357462897037594347764446038306043910452249870326792730968064 as intpart 6534781422357462897037594347764446038306043910452249870326792730968064  diafora 48111703142189083648608860216890119884743842040046666361764358974865408 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202094987294920660301946947354491776 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248  diafora 13804100674812403439161489891126780842093103080004100350162817697972224 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 20209498729492066030194694735449178 ^2 ::== 408423838897341431064849646735277877394127744403265616895424545685504 as intpart 408423838897341431064849646735277877394127744403265616895424545685504  diafora 54238060725649205114581604917919288710269756098553587067099257300320256 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 50523746823730165075486736838622944 ^2 ::== 2552648993108383944155310292095486567559798929405925992620520875491328 as intpart 2552648993108383944155310292095486567559798929405925992620520875491328  diafora 52093835571438162601491144272559082013946078590924736047084751391031296 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 64289981840642995936054652429005344 ^2 ::== 4133201765070206179704708255590313744898774281690805001651951499214848 as intpart 4133201765070206179704708255590313744898774281690805001651951499214848  diafora 50513282799476340365941746309064254171993105346181920586149790627135488 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 160724954601607489840136631072513360 ^2 ::== 25832511031688788623154426597439460407156840841224078921397049264963584 as intpart 25832511031688788623154426597439460407156840841224078921397049264963584  diafora 28813973532857757922492027967215108174349036679106583118308223001559040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 16072495460160748984013663107251336 ^2 ::== 258325110316887886231544265974394609056173392605675312603246968700928 as intpart 258325110316887886231544265974394609056173392605675312603246968700928  diafora 54388159454229658659414910298680173100143831893873945133978641988845568 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 40181238650401872460034157768128340 ^2 ::== 1614531939480549288947151662339966275447302552576504932587315579060224 as intpart 1614531939480549288947151662339966275447302552576504932587315579060224  diafora 53031952625065997256699302902314598816835086032349990734624423451557888 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 190771459467783370730132499789333440 ^2 ::== 36393749747468113479071826427901247736355657798396420895491313799004160 as intpart 36393749747468113479071826427901247736355657798396420895491313799004160  diafora 18252734817078433066574628136753318186694228152102495336599837906829312 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 47692864866945842682533124947333360 ^2 ::== 2274609359216757092441989151743827983522228612399776305968207112437760 as intpart 2274609359216757092441989151743827983522228612399776305968207112437760  diafora 52371875205329789453204465412910738271834656284328108152074709663481856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 4769286486694584268253312494733336 ^2 ::== 22746093592167570924419891517438281912141029537928814471880602812416 as intpart 22746093592167570924419891517438281912141029537928814471880602812416  diafora 54623738470954378974722034673137129188442208764339620719707177210609664 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 119232162167364606706332812368333408 ^2 ::== 14216308495104731827762432198398926807779172768315169211523943605731328 as intpart 14216308495104731827762432198398926807779172768315169211523943605731328  diafora 40430176069441814717884022366255639115270713182183747020567208100102144 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 41844985897875713972074832549944928 ^2 ::== 1751002844793417372232321314723051288266860800278762229790057506537472 as intpart 1751002844793417372232321314723051288266860800278762229790057506537472  diafora 52895481719753129173414133249931515964011020935136026906108154479640576 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 104612464744689284930187081374862320 ^2 ::== 10943767779958858576452008217019070219360881055513295710236094345773056 as intpart 10943767779958858576452008217019070219360881055513295710236094345773056  diafora 43702716784587687969194446347635498362144996464817366329469177920749568 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10461246474468928493018708137486232 ^2 ::== 109437677799588585764520082170190705516678800017422639361878594158592 as intpart 109437677799588585764520082170190705516678800017422639361878594158592  diafora 54537046886746957959881934482484375300609956887038735649217214379196416 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 26153116186172321232546770343715580 ^2 ::== 683985486247428661028250513563691888710055065969580981889755896610816 as intpart 683985486247428661028250513563691888710055065969580981889755896610816  diafora 53962499078299117884618204051090874532800329303872787589129043414351872 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 30427483372509471941010186578825352 ^2 ::== 925831744384340388411435595678328572953534770582770203716552111423488 as intpart 925831744384340388411435595678328572953534770582770203716552111423488  diafora 53720652820162206157235018968976239842398843276633407723012837620056064 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 76068708431273679852525466447063376 ^2 ::== 5786448402402127427571472472989553290190968238191966575520656260071424 as intpart 5786448402402127427571472472989553290190968238191966575520656260071424  diafora 48860036162144419118074982091665011968244919819849013204666965305589760 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7606870843127367985252546644706338 ^2 ::== 57864484024021274275714724729895535809595923161423137732284506963968 as intpart 57864484024021274275714724729895535809595923161423137732284506963968  diafora 54588620080522525271370739839924671872237191568298194854080817355816960 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 190171771078184199631313666117658432 ^2 ::== 36165302515013296422321702956184706900619055176898402306172923880144896 as intpart 36165302515013296422321702956184706900619055176898402306172923880144896  diafora 18481182049533250123324751608469859022430830773600513925918227825688576 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 61760848971189927047765528962863344 ^2 ::== 3814402465642131870266145546874131147259818981855201233491134014029824 as intpart 3814402465642131870266145546874131147259818981855201233491134014029824  diafora 50832082098904414675380309017780436769632060646017524354310608112320512 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 154402122427974817619413822407158368 ^2 ::== 23840015410263324189163409667963323159597357571999174081813120823590912 as intpart 23840015410263324189163409667963323159597357571999174081813120823590912  diafora 30806469154283222356483044896691242763452528378499742150278030882242560 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15440212242797481761941382240715836 ^2 ::== 238400154102633241891634096679633196703738686365950077093195875876864 as intpart 238400154102633241891634096679633196703738686365950077093195875876864  diafora 54408084410443913303754820467974930192505280299137083432115747170549760 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 38600530606993704404853455601789592 ^2 ::== 1490000963141457761822713104247707697474834848249948380113320051474432 as intpart 1490000963141457761822713104247707697474834848249948380113320051474432  diafora 53156483601405088783823741460406858557882050048477936077929596724445184 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 64099210381175212565324519929216016 ^2 ::== 4108708771490160139333292916404336638739794589116343634153072767270912 as intpart 4108708771490160139333292916404336638739794589116343634153072767270912  diafora 50537775793056386406313161648250227955082095576466699694131018658217984 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 160248025952938031413311299823040048 ^2 ::== 25679429821813500870833080727527106982886706698037861747022590426218496 as intpart 25679429821813500870833080727527106982886706698037861747022590426218496  diafora 28967054742733045674813373837127461598619170822292800292682681840304128 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 16024802595293803141331129982304004 ^2 ::== 256794298218135008708330807275271039921237161819771477134567047954432 as intpart 256794298218135008708330807275271039921237161819771477134567047954432  diafora 54389690266328411536938123757379295464665896944579839150372173530529792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 40062006488234507853327824955760012 ^2 ::== 1604964363863343804427067545470444186430419168627366359188911901638656 as intpart 1604964363863343804427067545470444186430419168627366359188911901638656  diafora 53041520200683202741219387019184124228921958878588811567540477829840896 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 202094987294920660301946947354491776 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248  diafora 13804100674812403439161489891126780842093103080004100350162817697972224 from 54646484564546546545646454564654565923049885950498916232091151705833472
 of 202094987294920660301946947354491776 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248  diafora 13804100674812403439161489891126780842093103080004100350162817697972224 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

10 25 |35 15| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 35 ::== 1561328130415615615589898701847273378548539387831476966107243062755328
            ----->  | *2 3122656260831231231179797403694546757097078775662953932214486125510656
            ----->  /2 780664065207807807794949350923636689274269693915738483053621531377664
                 --> 390332032603903903897474675461818344637134846957869241526810765688832
                 --> 195166016301951951948737337730909172318567423478934620763405382844416
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 975098212330848641579314845604572435002165705875030238904523801231360 31226562608312312311797974036945460
i insert 6094363827067804009870717785028577303379786978932728710713567420088320 78066406520780780779494935092363648
i insert 0 0
i insert 60943638270678040098707177850285777187635356617189389931532737576960 7806640652078078077949493509236365
i insert 38089773919173775061691986156428605653821176521612292747321558349905920 195166016301951951948737337730909120
CDIS Start 
section_temp 0
section h inf
1561328130415615615589898701847273378548539387831476966107243062755328 / 13 ::== 120102163878124278122299900142097955391301096623853691873170284347392
            ----->  | *2 240204327756248556244599800284195910782602193247707383746340568694784
            ----->  /2 60051081939062139061149950071048977695650548311926845936585142173696
                 --> 30025540969531069530574975035524488847825274155963422968292571086848
                 --> 15012770484765534765287487517762244423912637077981711484146285543424
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 576981190728312805668233636452409724853352488683449845505635385344000 24020432775624855624459980028419584
i insert 3606132442051955035426460227827560448026454108042593308458456088313856 60051081939062139061149950071048960
i insert 0 0
i insert 36061324420519550354264602278275607803334530542715615344102211584000 6005108193906213906114995007104896
i insert 22538327762824718971415376423922254461700332906411049307624175902392320 150127704847655347652874875177622400
section_temp 0
section h inf
120102163878124278122299900142097955391301096623853691873170284347392 / 4 ::== 30025540969531069530574975035524488847825274155963422968292571086848
            ----->  | *2 60051081939062139061149950071048977695650548311926845936585142173696
            ----->  /2 15012770484765534765287487517762244423912637077981711484146285543424
                 --> 7506385242382767382643743758881122211956318538990855742073142771712
                 --> 3753192621191383691321871879440561105978159269495427871036571385856
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3606132442051955035426460227827560448026454108042593308458456088313856 60051081939062139061149950071048960
i insert 22538327762824718971415376423922254461700332906411049307624175902392320 150127704847655347652874875177622400
i insert 0 0
i insert 225383277628247189714153764239222528001653381752662081778653505519616 15012770484765534765287487517762240
i insert 1408645485176544935713461026495140903856270806650690581726510993899520 37531926211913836913218718794405600
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 15 ::== 3643098970969769769709763637643637772510925589530456845599645456400384
            ----->  | *2 7286197941939539539419527275287275545021851179060913691199290912800768
            ----->  /2 1821549485484884884854881818821818886255462794765228422799822728200192
                 --> 910774742742442442427440909410909443127731397382614211399911364100096
                 --> 455387371371221221213720454705454721563865698691307105699955682050048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 5308868044912398159709603048291562770392785562293109814006069394931712 72861979419395395394195272752872752
i insert 33180425280702488498185019051822269641103902387934713919200289208926208 182154948548488488485488181882181888
i insert 0 0
i insert 331804252807024884981850190518222673149549097643319363375379337183232 18215494854848848848548818188218188
i insert 2073776580043905531136563690738891852568993899245919619950018075557888 45538737137122122121372045470545472
section_temp 0
section h inf
3643098970969769769709763637643637772510925589530456845599645456400384 / 337 ::== 10810382703174391008040841654728895933465595134151313378774953754624
            ----->  | *2 21620765406348782016081683309457791866931190268302626757549907509248
            ----->  /2 5405191351587195504020420827364447966732797567075656689387476877312
                 --> 2702595675793597752010210413682223983366398783537828344693738438656
                 --> 1351297837896798876005105206841111991683199391768914172346869219328
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 46745749675636821313118923722948712341298071623807805075036867647242240 216207654063487820160816833094577888
i insert 2921609354727301332069932732684294521331129476487987817189804227952640 54051913515871955040204208273644472
i insert 0 0
i insert 29216093547273013320699327326842943136392551350948826759699510591488 5405191351587195504020420827364447
i insert 18260058467045633325437079579276842336777804222637522930707160507613184 135129783789679887600510520684111184
removals 
reporing rt 4
section_temp 0
section h inf
1561328130415615615589898701847273378548539387831476966107243062755328 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 1550517747712441224581857860192544535836116592679308845166055483506688
            ----->  | *2 3101035495424882449163715720385089071672233185358617690332110967013376
            ----->  /2 775258873856220612290928930096272267918058296339654422583027741753344
                 --> 387629436928110306145464465048136133959029148169827211291513870876672
                 --> 193814718464055153072732232524068066979514574084913605645756935438336
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 961642114388504613729895612561466784469975494619103656187830047080448 31010354954248824491637157203850888
i insert 6010263214928153835811847578509166987553598158583187568734231456645120 77525887385622061229092893009627216
i insert 0 0
i insert 60102632149281538358118475785091674029373468413693978511739377942528 7752588738562206122909289300962722
i insert 37564145093300961473824047365682292841442491125572501739709533928816640 193814718464055153072732232524068032
section_temp 0
section h inf
120102163878124278122299900142097955391301096623853691873170284347392 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 109291781174949887114259058487369050371315999053754028566026754457600
            ----->  | *2 218583562349899774228518116974738100742631998107508057132053508915200
            ----->  /2 54645890587474943557129529243684525185657999526877014283013377228800
                 --> 27322945293737471778564764621842262592828999763438507141506688614400
                 --> 13661472646868735889282382310921131296414499881719253570753344307200
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 47778773729572522110160435984909777713273738405989056773315156137476096 218583562349899774228518116974738080
i insert 2986173358098282631885027249056861107079608650374316048332197258592256 54645890587474943557129529243684520
i insert 0 0
i insert 29861733580982826318850272490568609201569217431205214212343294066688 5464589058747494355712952924368452
i insert 18663583488114266449281420306605381005403306962709812680708878923464704 136614726468687358892823823109211296
section_temp 0
section h inf
30025540969531069530574975035524488847825274155963422968292571086848 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 19215158266356678522534133380795594212433893655519016722141699637248
            ----->  | *2 38430316532713357045068266761591188424867787311038033444283399274496
            ----->  /2 9607579133178339261267066690397797106216946827759508361070849818624
                 --> 4803789566589169630633533345198898553108473413879754180535424909312
                 --> 2401894783294584815316766672599449276554236706939877090267712454656
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1476889228804541581109120240666875701881416455470503353211723702075392 38430316532713357045068266761591180
i insert 9230557680028384881932001504167973635219351266034098296500920743100416 96075791331783392612670666903977952
i insert 0 0
i insert 92305576800283848819320015041679731367588528466906459575732731379712 9607579133178339261267066690397795
i insert 576909855001774055120750094010498352201209454127131143531307546443776 24018947832945848153167666725994488
section_temp 0
section h inf
3643098970969769769709763637643637772510925589530456845599645456400384 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 3632288588266595378701722795988909095952002267492772837634340412194816
            ----->  | *2 7264577176533190757403445591977818191904004534985545675268680824389632
            ----->  /2 1816144294133297689350861397994454547976001133746386418817170206097408
                 --> 908072147066648844675430698997227273988000566873193209408585103048704
                 --> 454036073533324422337715349498613636994000283436596604704292551524352
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 5277408155380694578965874012626018201943084789771369612804993866268672 72645771765331907574034455919778176
i insert 32983800971129341118536712578912617085214269398360742339548862365040640 181614429413329768935086139799445440
i insert 0 0
i insert 329838009711293411185367125789126137621442799360710600800312116641792 18161442941332976893508613979944544
i insert 2061487560695583819908544536182038567825891837397546396221803897815040 45403607353332442233771534949861360
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 31226562608312312311797974036945460 ^2 ::== 975098212330848641579314845604572435002165705875030238904523801231360 as intpart 975098212330848641579314845604572435002165705875030238904523801231360  diafora 53671386352215697904067139719049995149582714975768727122945453255032832 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 78066406520780780779494935092363648 ^2 ::== 6094363827067804009870717785028577303379786978932728710713567420088320 as intpart 6094363827067804009870717785028577303379786978932728710713567420088320  diafora 48552120737478742535775736779625987955056101079108251069474054145572864 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7806640652078078077949493509236365 ^2 ::== 60943638270678040098707177850285777187635356617189389931532737576960 as intpart 60943638270678040098707177850285777187635356617189389931532737576960  diafora 54585540926275868505547747386804278920480191979662406508962485272313856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 195166016301951951948737337730909120 ^2 ::== 38089773919173775061691986156428605653821176521612292747321558349905920 as intpart 38089773919173775061691986156428605653821176521612292747321558349905920  diafora 16556710645372771483954468408225960269228709428886623484769593355927552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 24020432775624855624459980028419584 ^2 ::== 576981190728312805668233636452409724853352488683449845505635385344000 as intpart 576981190728312805668233636452409724853352488683449845505635385344000  diafora 54069503373818233739978220928202157527424529246731339290392576600834048 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 60051081939062139061149950071048960 ^2 ::== 3606132442051955035426460227827560448026454108042593308458456088313856 as intpart 3606132442051955035426460227827560448026454108042593308458456088313856  diafora 51040352122494591510219994336827004145795436057540450019825635337175040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 6005108193906213906114995007104896 ^2 ::== 36061324420519550354264602278275607803334530542715615344102211584000 as intpart 36061324420519550354264602278275607803334530542715615344102211584000  diafora 54610423240126026995292189962376289401402304317826537995379695551512576 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 150127704847655347652874875177622400 ^2 ::== 22538327762824718971415376423922254461700332906411049307624175902392320 as intpart 22538327762824718971415376423922254461700332906411049307624175902392320  diafora 32108156801721827574231078140732308802893561474256121116852855242752000 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 60051081939062139061149950071048960 ^2 ::== 3606132442051955035426460227827560448026454108042593308458456088313856 as intpart 3606132442051955035426460227827560448026454108042593308458456088313856  diafora 51040352122494591510219994336827004145795436057540450019825635337175040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 150127704847655347652874875177622400 ^2 ::== 22538327762824718971415376423922254461700332906411049307624175902392320 as intpart 22538327762824718971415376423922254461700332906411049307624175902392320  diafora 32108156801721827574231078140732308802893561474256121116852855242752000 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15012770484765534765287487517762240 ^2 ::== 225383277628247189714153764239222528001653381752662081778653505519616 as intpart 225383277628247189714153764239222528001653381752662081778653505519616  diafora 54421101286918299355932300800415345638120475455791789675486912423395328 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 37531926211913836913218718794405600 ^2 ::== 1408645485176544935713461026495140903856270806650690581726510993899520 as intpart 1408645485176544935713461026495140903856270806650690581726510993899520  diafora 53237839079370001609932993538159424520733116724504773311436993106804736 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 72861979419395395394195272752872752 ^2 ::== 5308868044912398159709603048291562770392785562293109814006069394931712 as intpart 5308868044912398159709603048291562770392785562293109814006069394931712  diafora 49337616519634148385936851516363004481885096173121679321892142591246336 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 182154948548488488485488181882181888 ^2 ::== 33180425280702488498185019051822269641103902387934713919200289208926208 as intpart 33180425280702488498185019051822269641103902387934713919200289208926208  diafora 21466059283844058047461435512832296281945983562564202312890862496907264 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 18215494854848848848548818188218188 ^2 ::== 331804252807024884981850190518222673149549097643319363375379337183232 as intpart 331804252807024884981850190518222673149549097643319363375379337183232  diafora 54314680311739521660664604374136342003749090804496966021396653355827200 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 45538737137122122121372045470545472 ^2 ::== 2073776580043905531136563690738891852568993899245919619950018075557888 as intpart 2073776580043905531136563690738891852568993899245919619950018075557888  diafora 52572707984502641014509890873915671744331899427650219030478778139672576 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 216207654063487820160816833094577888 ^2 ::== 46745749675636821313118923722948712341298071623807805075036867647242240 as intpart 46745749675636821313118923722948712341298071623807805075036867647242240  diafora 7900734888909725232527530841705853581751814326691111157054284058591232 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 54051913515871955040204208273644472 ^2 ::== 2921609354727301332069932732684294521331129476487987817189804227952640 as intpart 2921609354727301332069932732684294521331129476487987817189804227952640  diafora 51724875209819245213576521831970273063253751205155769544660172828311552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5405191351587195504020420827364447 ^2 ::== 29216093547273013320699327326842943136392551350948826759699510591488 as intpart 29216093547273013320699327326842943136392551350948826759699510591488  diafora 54617268470999273532325755237327723260297523760028659345978253973127168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 135129783789679887600510520684111184 ^2 ::== 18260058467045633325437079579276842336777804222637522930707160507613184 as intpart 18260058467045633325437079579276842336777804222637522930707160507613184  diafora 36386426097500913220209374985377720927816090158029647493769870637531136 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 31010354954248824491637157203850888 ^2 ::== 961642114388504613729895612561466784469975494619103656187830047080448 as intpart 961642114388504613729895612561466784469975494619103656187830047080448  diafora 53684842450158041931916558952093100800114905187024653705662147009183744 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 77525887385622061229092893009627216 ^2 ::== 6010263214928153835811847578509166987553598158583187568734231456645120 as intpart 6010263214928153835811847578509166987553598158583187568734231456645120  diafora 48636221349618392709834606986145396941654294114541919307646329828671488 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7752588738562206122909289300962722 ^2 ::== 60102632149281538358118475785091674029373468413693978511739377942528 as intpart 60102632149281538358118475785091674029373468413693978511739377942528  diafora 54586381932397265007288336088869476679015442276384552405851694402895872 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 193814718464055153072732232524068032 ^2 ::== 37564145093300961473824047365682292841442491125572501739709533928816640 as intpart 37564145093300961473824047365682292841442491125572501739709533928816640  diafora 17082339471245585071822407198972273081607394824926414492381617777016832 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 218583562349899774228518116974738080 ^2 ::== 47778773729572522110160435984909777713273738405989056773315156137476096 as intpart 47778773729572522110160435984909777713273738405989056773315156137476096  diafora 6867710834974024435486018579744788209776147544509859458775995568357376 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 54645890587474943557129529243684520 ^2 ::== 2986173358098282631885027249056861107079608650374316048332197258592256 as intpart 2986173358098282631885027249056861107079608650374316048332197258592256  diafora 51660311206448263913761427315597705812891274138811504861614249657499648 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5464589058747494355712952924368452 ^2 ::== 29861733580982826318850272490568609201569217431205214212343294066688 as intpart 29861733580982826318850272490568609201569217431205214212343294066688  diafora 54616622830965563719327604292163994982507027250930105807685956591943680 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 136614726468687358892823823109211296 ^2 ::== 18663583488114266449281420306605381005403306962709812680708878923464704 as intpart 18663583488114266449281420306605381005403306962709812680708878923464704  diafora 35982901076432280096365034258049184917646578987789103551382272782368768 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 38430316532713357045068266761591180 ^2 ::== 1476889228804541581109120240666875701881416455470503353211723702075392 as intpart 1476889228804541581109120240666875701881416455470503353211723702075392  diafora 53169595335742004964537334323987688227326475817654603523168837583241216 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 96075791331783392612670666903977952 ^2 ::== 9230557680028384881932001504167973635219351266034098296500920743100416 as intpart 9230557680028384881932001504167973635219351266034098296500920743100416  diafora 45415926884518161663714453060486592287830534684464817935590230962733056 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 9607579133178339261267066690397795 ^2 ::== 92305576800283848819320015041679731367588528466906459575732731379712 as intpart 92305576800283848819320015041679731367588528466906459575732731379712  diafora 54554178987746262696827134549612883740918180193593369106121151582568448 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 24018947832945848153167666725994488 ^2 ::== 576909855001774055120750094010498352201209454127131143531307546443776 as intpart 576909855001774055120750094010498352201209454127131143531307546443776  diafora 54069574709544772490525704470644068235462674388829721540463374299561984 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 72645771765331907574034455919778176 ^2 ::== 5277408155380694578965874012626018201943084789771369612804993866268672 as intpart 5277408155380694578965874012626018201943084789771369612804993866268672  diafora 49369076409165851966680580552028550379562792730559292426900278400253952 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 181614429413329768935086139799445440 ^2 ::== 32983800971129341118536712578912617085214269398360742339548862365040640 as intpart 32983800971129341118536712578912617085214269398360742339548862365040640  diafora 21662683593417205427109741985741948837835616552138173892542289340792832 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 18161442941332976893508613979944544 ^2 ::== 329838009711293411185367125789126137621442799360710600800312116641792 as intpart 329838009711293411185367125789126137621442799360710600800312116641792  diafora 54316646554835253134461087438865440283888941570481657970218487194320896 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 45403607353332442233771534949861360 ^2 ::== 2061487560695583819908544536182038567825891837397546396221803897815040 as intpart 2061487560695583819908544536182038567825891837397546396221803897815040  diafora 52584997003850962725737910028472529349065987790475179191579938228535296 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 218583562349899774228518116974738080 ^2 ::== 47778773729572522110160435984909777713273738405989056773315156137476096 as intpart 47778773729572522110160435984909777713273738405989056773315156137476096  diafora 6867710834974024435486018579744788209776147544509859458775995568357376 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

10 |25| 35 |15| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 25 ::== 2185859382581861861825858182586182796429354932209861397740493301874688
            ----->  | *2 4371718765163723723651716365172365592858709864419722795480986603749376
            ----->  /2 1092929691290930930912929091293091398214677466104930698870246650937344
                 --> 546464845645465465456464545646545699107338733052465349435123325468672
                 --> 273232422822732732728232272823272849553669366526232674717561662734336
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1911192496168463337495457097384964498137436774855217785486281183068160 43717187651637237236517163651723672
i insert 11944953101052895859346606858656027864128730633173384989825433591611392 109292969129093093091292909129309184
i insert 0 0
i insert 119449531010528958593466068586560281133589798428451111592892573941760 10929296912909309309129290912930918
i insert 746559568815805991209162928666001741508045664573336561864089599475712 27323242282273273272823227282327296
CDIS Start 
section_temp 0
section h inf
2185859382581861861825858182586182796429354932209861397740493301874688 / 13 ::== 168143029429373989371219860198937133393984048445533065798041334710272
            ----->  | *2 336286058858747978742439720397874266787968096891066131596082669420544
            ----->  /2 84071514714686994685609930099468566696992024222766532899020667355136
                 --> 42035757357343497342804965049734283348496012111383266449510333677568
                 --> 21017878678671748671402482524867141674248006055691633224755166838784
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1130883133827493099109737927446722562252072458476109358263397750145024 33628605885874797874243972039787412
i insert 7068019586421831869435862046542016138690577470311546573878147839688704 84071514714686994685609930099468528
i insert 0 0
i insert 70680195864218318694358620465420160140754528654756834891462359384064 8407151471468699468560993009946853
i insert 44175122415136449183974137790887601199123108135676134312690189068140544 210178786786717486714024825248671328
section_temp 0
section h inf
168143029429373989371219860198937133393984048445533065798041334710272 / 4 ::== 42035757357343497342804965049734283348496012111383266449510333677568
            ----->  | *2 84071514714686994685609930099468566696992024222766532899020667355136
            ----->  /2 21017878678671748671402482524867141674248006055691633224755166838784
                 --> 10508939339335874335701241262433570837124003027845816612377583419392
                 --> 5254469669667937167850620631216785418562001513922908306188791709696
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 7068019586421831869435862046542016138690577470311546573878147839688704 84071514714686994685609930099468528
i insert 44175122415136449183974137790887601199123108135676134312690189068140544 210178786786717486714024825248671328
i insert 0 0
i insert 441751224151364491839741377908876008668161091894471660867384239980544 21017878678671748671402482524867132
i insert 2760945150946028073998383611930475074945194258479758394543136816758784 52544696696679371678506206312167832
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 15 ::== 3643098970969769769709763637643637772510925589530456845599645456400384
            ----->  | *2 7286197941939539539419527275287275545021851179060913691199290912800768
            ----->  /2 1821549485484884884854881818821818886255462794765228422799822728200192
                 --> 910774742742442442427440909410909443127731397382614211399911364100096
                 --> 455387371371221221213720454705454721563865698691307105699955682050048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 5308868044912398159709603048291562770392785562293109814006069394931712 72861979419395395394195272752872752
i insert 33180425280702488498185019051822269641103902387934713919200289208926208 182154948548488488485488181882181888
i insert 0 0
i insert 331804252807024884981850190518222673149549097643319363375379337183232 18215494854848848848548818188218188
i insert 2073776580043905531136563690738891852568993899245919619950018075557888 45538737137122122121372045470545472
section_temp 0
section h inf
3643098970969769769709763637643637772510925589530456845599645456400384 / 337 ::== 10810382703174391008040841654728895933465595134151313378774953754624
            ----->  | *2 21620765406348782016081683309457791866931190268302626757549907509248
            ----->  /2 5405191351587195504020420827364447966732797567075656689387476877312
                 --> 2702595675793597752010210413682223983366398783537828344693738438656
                 --> 1351297837896798876005105206841111991683199391768914172346869219328
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 46745749675636821313118923722948712341298071623807805075036867647242240 216207654063487820160816833094577888
i insert 2921609354727301332069932732684294521331129476487987817189804227952640 54051913515871955040204208273644472
i insert 0 0
i insert 29216093547273013320699327326842943136392551350948826759699510591488 5405191351587195504020420827364447
i insert 18260058467045633325437079579276842336777804222637522930707160507613184 135129783789679887600510520684111184
removals 
reporing rt 4
section_temp 0
section h inf
2185859382581861861825858182586182796429354932209861397740493301874688 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 2175048999878687470817817340931453787563432663943209163823423187582976
            ----->  | *2 4350097999757374941635634681862907575126865327886418327646846375165952
            ----->  /2 1087524499939343735408908670465726893781716331971604581911711593791488
                 --> 543762249969671867704454335232863446890858165985802290955855796895744
                 --> 271881124984835933852227167616431723445429082992901145477927898447872
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1892335260749311443777744923555125045465200139354150471132976448012288 43500979997573749416356346818629072
i insert 11827095379683196523610905772219528792624759564574452580479040971866112 108752449993934373540890867046572672
i insert 0 0
i insert 118270953796831965236109057722195315341575008709634404445811028000768 10875244999393437354089086704657268
i insert 739193461230199782725681610763720549539047472785903286279940060741632 27188112498483593385222716761643168
section_temp 0
section h inf
168143029429373989371219860198937133393984048445533065798041334710272 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 157332646726199598363179018544208228373998950875433402490897804820480
            ----->  | *2 314665293452399196726358037088416456747997901750866804981795609640960
            ----->  /2 78666323363099799181589509272104114186999475437716701245448902410240
                 --> 39333161681549899590794754636052057093499737718858350622724451205120
                 --> 19666580840774949795397377318026028546749868859429175311362225602560
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 990142469034845007863932183253168519130394184444163210229556791214080 31466529345239919672635803708841644
i insert 6188390431467781299149576145332303784563836940398093431106348183977984 78666323363099799181589509272104112
i insert 0 0
i insert 61883904314677812991495761453323032445649636527760200639347299450880 7866632336309979918158950927210411
i insert 38677440196673633119684850908326901478133471920434313865004679245594624 196665808407749497953973773180260288
section_temp 0
section h inf
42035757357343497342804965049734283348496012111383266449510333677568 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 31225374654169106334764123395005388713104631610938860203359462227968
            ----->  | *2 62450749308338212669528246790010777426209263221877720406718924455936
            ----->  /2 15612687327084553167382061697502694356552315805469430101679731113984
                 --> 7806343663542276583691030848751347178276157902734715050839865556992
                 --> 3903171831771138291845515424375673589138078951367357525419932778496
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3900096089172905748139110369625266712159999572057960501882179486220288 62450749308338212669528246790010776
i insert 24375600557330660925869439810157919609455988895193998944377742349565952 156126873270845531673820616975026944
i insert 0 0
i insert 243756005573306609258694398101579169509999973253622531367636217888768 15612687327084553167382061697502694
i insert 1523475034833166307866839988134869975590999305949624934023608896847872 39031718317711382918455154243756736
section_temp 0
section h inf
3643098970969769769709763637643637772510925589530456845599645456400384 - 10810382703174391008040841654728895933465595134151313378774953754624 ::== 3632288588266595378701722795988909095952002267492772837634340412194816
            ----->  | *2 7264577176533190757403445591977818191904004534985545675268680824389632
            ----->  /2 1816144294133297689350861397994454547976001133746386418817170206097408
                 --> 908072147066648844675430698997227273988000566873193209408585103048704
                 --> 454036073533324422337715349498613636994000283436596604704292551524352
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 5277408155380694578965874012626018201943084789771369612804993866268672 72645771765331907574034455919778176
i insert 32983800971129341118536712578912617085214269398360742339548862365040640 181614429413329768935086139799445440
i insert 0 0
i insert 329838009711293411185367125789126137621442799360710600800312116641792 18161442941332976893508613979944544
i insert 2061487560695583819908544536182038567825891837397546396221803897815040 45403607353332442233771534949861360
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 43717187651637237236517163651723672 ^2 ::== 1911192496168463337495457097384964498137436774855217785486281183068160 as intpart 1911192496168463337495457097384964498137436774855217785486281183068160  diafora 52735292068378083208150997467269599763377454444498857316846045172334592 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 109292969129093093091292909129309184 ^2 ::== 11944953101052895859346606858656027864128730633173384989825433591611392 as intpart 11944953101052895859346606858656027864128730633173384989825433591611392  diafora 42701531463493650686299847705998536729693159532409658338458657833877504 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10929296912909309309129290912930918 ^2 ::== 119449531010528958593466068586560281133589798428451111592892573941760 as intpart 119449531010528958593466068586560281133589798428451111592892573941760  diafora 54527035033536017587052988496068007864219351604976690131550688038092800 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 27323242282273273272823227282327296 ^2 ::== 746559568815805991209162928666001741508045664573336561864089599475712 as intpart 746559568815805991209162928666001741508045664573336561864089599475712  diafora 53899924995730740554437291635988562104623096871994528258028530418319360 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 33628605885874797874243972039787412 ^2 ::== 1130883133827493099109737927446722562252072458476109358263397750145024 as intpart 1130883133827493099109737927446722562252072458476109358263397750145024  diafora 53515601430719053446536716637207844191565310857595227438707166630903808 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 84071514714686994685609930099468528 ^2 ::== 7068019586421831869435862046542016138690577470311546573878147839688704 as intpart 7068019586421831869435862046542016138690577470311546573878147839688704  diafora 47578464978124714676210592518112548455131312695271496754405943585800192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 8407151471468699468560993009946853 ^2 ::== 70680195864218318694358620465420160140754528654756834891462359384064 as intpart 70680195864218318694358620465420160140754528654756834891462359384064  diafora 54575804368682328226952095944189144153297105276047594552745827288219648 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 210178786786717486714024825248671328 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544  diafora 10471362149410097361672316773766964723926777814822781919400962637692928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 84071514714686994685609930099468528 ^2 ::== 7068019586421831869435862046542016138690577470311546573878147839688704 as intpart 7068019586421831869435862046542016138690577470311546573878147839688704  diafora 47578464978124714676210592518112548455131312695271496754405943585800192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 210178786786717486714024825248671328 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544  diafora 10471362149410097361672316773766964723926777814822781919400962637692928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 21017878678671748671402482524867132 ^2 ::== 441751224151364491839741377908876008668161091894471660867384239980544 as intpart 441751224151364491839741377908876008668161091894471660867384239980544  diafora 54204733340395182053806713186745691825146968799421011870446416618848256 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 52544696696679371678506206312167832 ^2 ::== 2760945150946028073998383611930475074945194258479758394543136816758784 as intpart 2760945150946028073998383611930475074945194258479758394543136816758784  diafora 51885539413600518471648070952724092177332687476935030741355075169419264 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 72861979419395395394195272752872752 ^2 ::== 5308868044912398159709603048291562770392785562293109814006069394931712 as intpart 5308868044912398159709603048291562770392785562293109814006069394931712  diafora 49337616519634148385936851516363004481885096173121679321892142591246336 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 182154948548488488485488181882181888 ^2 ::== 33180425280702488498185019051822269641103902387934713919200289208926208 as intpart 33180425280702488498185019051822269641103902387934713919200289208926208  diafora 21466059283844058047461435512832296281945983562564202312890862496907264 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 18215494854848848848548818188218188 ^2 ::== 331804252807024884981850190518222673149549097643319363375379337183232 as intpart 331804252807024884981850190518222673149549097643319363375379337183232  diafora 54314680311739521660664604374136342003749090804496966021396653355827200 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 45538737137122122121372045470545472 ^2 ::== 2073776580043905531136563690738891852568993899245919619950018075557888 as intpart 2073776580043905531136563690738891852568993899245919619950018075557888  diafora 52572707984502641014509890873915671744331899427650219030478778139672576 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 216207654063487820160816833094577888 ^2 ::== 46745749675636821313118923722948712341298071623807805075036867647242240 as intpart 46745749675636821313118923722948712341298071623807805075036867647242240  diafora 7900734888909725232527530841705853581751814326691111157054284058591232 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 54051913515871955040204208273644472 ^2 ::== 2921609354727301332069932732684294521331129476487987817189804227952640 as intpart 2921609354727301332069932732684294521331129476487987817189804227952640  diafora 51724875209819245213576521831970273063253751205155769544660172828311552 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5405191351587195504020420827364447 ^2 ::== 29216093547273013320699327326842943136392551350948826759699510591488 as intpart 29216093547273013320699327326842943136392551350948826759699510591488  diafora 54617268470999273532325755237327723260297523760028659345978253973127168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 135129783789679887600510520684111184 ^2 ::== 18260058467045633325437079579276842336777804222637522930707160507613184 as intpart 18260058467045633325437079579276842336777804222637522930707160507613184  diafora 36386426097500913220209374985377720927816090158029647493769870637531136 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 43500979997573749416356346818629072 ^2 ::== 1892335260749311443777744923555125045465200139354150471132976448012288 as intpart 1892335260749311443777744923555125045465200139354150471132976448012288  diafora 52754149303797235101868709641099438551435693187541988179295819767218176 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 108752449993934373540890867046572672 ^2 ::== 11827095379683196523610905772219528792624759564574452580479040971866112 as intpart 11827095379683196523610905772219528792624759564574452580479040971866112  diafora 42819389184863350022035548792435035801197130601008590747805050453622784 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10875244999393437354089086704657268 ^2 ::== 118270953796831965236109057722195315341575008709634404445811028000768 as intpart 118270953796831965236109057722195315341575008709634404445811028000768  diafora 54528213610749714580410345506932373120779990472645854036405564020359168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 27188112498483593385222716761643168 ^2 ::== 739193461230199782725681610763720549539047472785903286279940060741632 as intpart 739193461230199782725681610763720549539047472785903286279940060741632  diafora 53907291103316346762920772953890847616583081364758548470985625868173312 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 31466529345239919672635803708841644 ^2 ::== 990142469034845007863932183253168519130394184444163210229556791214080 as intpart 990142469034845007863932183253168519130394184444163210229556791214080  diafora 53656342095511701537782522381401396573151994400482332456982182239404032 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 78666323363099799181589509272104112 ^2 ::== 6188390431467781299149576145332303784563836940398093431106348183977984 as intpart 6188390431467781299149576145332303784563836940398093431106348183977984  diafora 48458094133078765246496878419322261473872051117642886349081273381683200 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7866632336309979918158950927210411 ^2 ::== 61883904314677812991495761453323032445649636527760200639347299450880 as intpart 61883904314677812991495761453323032445649636527760200639347299450880  diafora 54584600660231868732654958803201242506374268782393911520195076044095488 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 196665808407749497953973773180260288 ^2 ::== 38677440196673633119684850908326901478133471920434313865004679245594624 as intpart 38677440196673633119684850908326901478133471920434313865004679245594624  diafora 15969044367872913425961603656327664444916414030064602367086472460238848 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 62450749308338212669528246790010776 ^2 ::== 3900096089172905748139110369625266712159999572057960501882179486220288 as intpart 3900096089172905748139110369625266712159999572057960501882179486220288  diafora 50746388475373640797507344195029299210889886378440955730208972219613184 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 156126873270845531673820616975026944 ^2 ::== 24375600557330660925869439810157919609455988895193998944377742349565952 as intpart 24375600557330660925869439810157919609455988895193998944377742349565952  diafora 30270884007215885619777014754496648972049888625136663095327529916956672 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15612687327084553167382061697502694 ^2 ::== 243756005573306609258694398101579169509999973253622531367636217888768 as intpart 243756005573306609258694398101579169509999973253622531367636217888768  diafora 54402728558973239936387760166552985424311890192329420796916455207600128 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 39031718317711382918455154243756736 ^2 ::== 1523475034833166307866839988134869975590999305949624934023608896847872 as intpart 1523475034833166307866839988134869975590999305949624934023608896847872  diafora 53123009529713380237779614576519698439761378741266552992705780834631680 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 72645771765331907574034455919778176 ^2 ::== 5277408155380694578965874012626018201943084789771369612804993866268672 as intpart 5277408155380694578965874012626018201943084789771369612804993866268672  diafora 49369076409165851966680580552028550379562792730559292426900278400253952 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 181614429413329768935086139799445440 ^2 ::== 32983800971129341118536712578912617085214269398360742339548862365040640 as intpart 32983800971129341118536712578912617085214269398360742339548862365040640  diafora 21662683593417205427109741985741948837835616552138173892542289340792832 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 18161442941332976893508613979944544 ^2 ::== 329838009711293411185367125789126137621442799360710600800312116641792 as intpart 329838009711293411185367125789126137621442799360710600800312116641792  diafora 54316646554835253134461087438865440283888941570481657970218487194320896 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 45403607353332442233771534949861360 ^2 ::== 2061487560695583819908544536182038567825891837397546396221803897815040 as intpart 2061487560695583819908544536182038567825891837397546396221803897815040  diafora 52584997003850962725737910028472529349065987790475179191579938228535296 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 216207654063487820160816833094577888 ^2 ::== 46745749675636821313118923722948712341298071623807805075036867647242240 as intpart 46745749675636821313118923722948712341298071623807805075036867647242240  diafora 7900734888909725232527530841705853581751814326691111157054284058591232 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

10 26 |36 16| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 36 ::== 1517957904570737404045734849018182405212885662304357018999852273500160
            ----->  | *2 3035915809141474808091469698036364810425771324608714037999704547000320
            ----->  /2 758978952285368702022867424509091202606442831152178509499926136750080
                 --> 379489476142684351011433712254545601303221415576089254749963068375040
                 --> 189744738071342175505716856127272800651610707788044627374981534187520
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 921678480019513569394028306995063525585217988662251713019224245927936 30359158091414748080914696980363656
i insert 5760490500121959808712676918719146287216864800123894697978680129355776 75897895228536870202286742450909136
i insert 0 0
i insert 57604905001219598087126769187191470349076124291390732063701515370496 7589789522853687020228674245090914
i insert 36003065625762248804454230741994663132030908688972953071535573063172096 189744738071342175505716856127272832
CDIS Start 
section_temp 0
section h inf
1517957904570737404045734849018182405212885662304357018999852273500160 / 13 ::== 116765992659287492618902680693706342057789271583306003634140223635456
            ----->  | *2 233531985318574985237805361387412684115578543166612007268280447270912
            ----->  /2 58382996329643746309451340346853171028894635791653001817070111817728
                 --> 29191498164821873154725670173426585514447317895826500908535055908864
                 --> 14595749082410936577362835086713292757223658947913250454267527954432
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 54537188166835122449350787396157603302397093673380837868280834062024704 233531985318574985237805361387412736
i insert 3408574260427195153084424212259850206399818354586302366767552128876544 58382996329643746309451340346853184
i insert 0 0
i insert 34085742604271951530844242122598498740928194083573341408157870587904 5838299632964374630945134034685318
i insert 21303589127669969706777651326624065036150110764523020639616319818301440 145957490824109365773628350867132960
section_temp 0
section h inf
116765992659287492618902680693706342057789271583306003634140223635456 / 4 ::== 29191498164821873154725670173426585514447317895826500908535055908864
            ----->  | *2 58382996329643746309451340346853171028894635791653001817070111817728
            ----->  /2 14595749082410936577362835086713292757223658947913250454267527954432
                 --> 7297874541205468288681417543356646378611829473956625227133763977216
                 --> 3648937270602734144340708771678323189305914736978312613566881988608
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3408574260427195153084424212259850206399818354586302366767552128876544 58382996329643746309451340346853184
i insert 21303589127669969706777651326624065036150110764523020639616319818301440 145957490824109365773628350867132960
i insert 0 0
i insert 213035891276699697067776513266240637899988647161643897922972008054784 14595749082410936577362835086713296
i insert 1331474320479373106673603207914004064759381922782688789976019988643840 36489372706027341443407087716783240
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 16 ::== 3415405285284159159102903410290910370190617871906182264505696981614592
            ----->  | *2 6830810570568318318205806820581820740381235743812364529011393963229184
            ----->  /2 1707702642642079579551451705145455185095308935953091132252848490807296
                 --> 853851321321039789775725852572727592547654467976545566126424245403648
                 --> 426925660660519894887862926286363796273827233988272783063212122701824
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4665997305098787445057268304162511237501471783951632251724310383689728 68308105705683183182058068205818240
i insert 29162483156867421531607926901015692077467708660522503426735171732242432 170770264264207957955145170514545600
i insert 0 0
i insert 291624831568674215316079269010156952343841986496977015732769398980608 17077026426420795795514517051454560
i insert 1822655197304213845725495431313480754841731791282656464170948233265152 42692566066051989488786292628636400
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 / 337 ::== 10134733784225991570038289051308339369716526536020084422078483136512
            ----->  | *2 20269467568451983140076578102616678739433053072040168844156966273024
            ----->  /2 5067366892112995785019144525654169684858263268010042211039241568256
                 --> 2533683446056497892509572262827084842429131634005021105519620784128
                 --> 1266841723028248946254786131413542421214565817002510552759810392064
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 41085131550852674982233429053372881300856103759317761104116978198511616 202694675684519831400765781026166752
i insert 2567820721928292186389589315835805081303506484957360069007311137406976 50673668921129957850191445256541688
i insert 0 0
i insert 25678207219282921863895893158358053097645682604897757243491496230912 5067366892112995785019144525654169
i insert 16048879512051826164934933223973782173530664213769710713735400946401280 126684172302824894625478613141354224
removals 
reporing rt 4
section_temp 0
section h inf
1517957904570737404045734849018182405212885662304357018999852273500160 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 1507823170786511412475696559966874104785395574779544148556496259514368
            ----->  | *2 3015646341573022824951393119933748209570791149559088297112992519028736
            ----->  /2 753911585393255706237848279983437052392697787389772074278248129757184
                 --> 376955792696627853118924139991718526196348893694886037139124064878592
                 --> 188477896348313926559462069995859263098174446847443018569562032439296
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 909412285744275665207665948787683834058055303603868935731241101033472 30156463415730228249513931199337480
i insert 5683826785901722907547912179923024004401220515802801876564227515219968 75391158539325570623784827998343704
i insert 0 0
i insert 56838267859017229075479121799230239628628456475241808483202568814592 7539115853932557062378482799834370
i insert 35523917411885768172174451124518901356735624008683384632333482250469376 188477896348313926559462069995859264
section_temp 0
section h inf
116765992659287492618902680693706342057789271583306003634140223635456 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 106631258875061501048864391642398000091924315779872104946813575888896
            ----->  | *2 213262517750123002097728783284796000183848631559744209893627151777792
            ----->  /2 53315629437530750524432195821199000045962157889936052473406787944448
                 --> 26657814718765375262216097910599500022981078944968026236703393972224
                 --> 13328907359382687631108048955299750011490539472484013118351696986112
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 45480901477121528536600358889435494372406866626399694198974273736933376 213262517750123002097728783284796064
i insert 2842556342320095533537522430589718398275429164149980887435892108558336 53315629437530750524432195821199016
i insert 0 0
i insert 28425563423200955335375224305897188344283652810755016839975837630464 5331562943753075052443219582119902
i insert 17765977139500597084609515191185739407684184120036686151058736805838848 133289073593826876311080489552997536
section_temp 0
section h inf
29191498164821873154725670173426585514447317895826500908535055908864 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 19056764380595881584687381122118246144730791359806416486456572772352
            ----->  | *2 38113528761191763169374762244236492289461582719612832972913145544704
            ----->  /2 9528382190297940792343690561059123072365395679903208243228286386176
                 --> 4764191095148970396171845280529561536182697839951604121614143193088
                 --> 2382095547574485198085922640264780768091348919975802060807071596544
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1452641074630191737263567803479618427230326038159090231409646940192768 38113528761191763169374762244236504
i insert 9079006716438698357897298771747615585573286421280524228749999713812480 95283821902979407923436905610591264
i insert 0 0
i insert 90790067164386983578972987717476151701895377384943139463102933762048 9528382190297940792343690561059126
i insert 567437919777418647368581173234225974098330401330032764296874982113280 23820955475744851980859226402647816
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 3405270551499933167532865121239601903609628311266885281086458432585728
            ----->  | *2 6810541102999866335065730242479203807219256622533770562172916865171456
            ----->  /2 1702635275749966583766432560619800951804814155633442640543229216292864
                 --> 851317637874983291883216280309900475902407077816721320271614608146432
                 --> 425658818937491645941608140154950237951203538908360660135807304073216
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4638347011565063594794225206409586279147758214801027052571411164954624 68105411029998663350657302424792040
i insert 28989668822281647467463907540059912583138494111361577948812494430535680 170263527574996658376643256061980096
i insert 0 0
i insert 289896688222816474674639075400599142446734888425064190785713197809664 17026352757499665837664325606198010
i insert 1811854301392602966716494221253744536446155881960098621800780901908480 42565881893749164594160814015495024
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 30359158091414748080914696980363656 ^2 ::== 921678480019513569394028306995063525585217988662251713019224245927936 as intpart 921678480019513569394028306995063525585217988662251713019224245927936  diafora 53724806084527032976252426257659500071315675338233886937409571969302528 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 75897895228536870202286742450909136 ^2 ::== 5760490500121959808712676918719146287216864800123894697978680129355776 as intpart 5760490500121959808712676918719146287216864800123894697978680129355776  diafora 48885994064424586736933777645935418971219023257917085082208941436305408 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7589789522853687020228674245090914 ^2 ::== 57604905001219598087126769187191470349076124291390732063701515370496 as intpart 57604905001219598087126769187191470349076124291390732063701515370496  diafora 54588879659545326947559327795467375304237494625919256579028848182558720 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 189744738071342175505716856127272832 ^2 ::== 36003065625762248804454230741994663132030908688972953071535573063172096 as intpart 36003065625762248804454230741994663132030908688972953071535573063172096  diafora 18643418938784297741192223822659902791018977261525963160555578642661376 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 233531985318574985237805361387412736 ^2 ::== 54537188166835122449350787396157603302397093673380837868280834062024704 as intpart 54537188166835122449350787396157603302397093673380837868280834062024704  diafora 109296397711424096295667168496962620652792277118078363810317643808768 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 58382996329643746309451340346853184 ^2 ::== 3408574260427195153084424212259850206399818354586302366767552128876544 as intpart 3408574260427195153084424212259850206399818354586302366767552128876544  diafora 51237910304119351392562030352394713390501074972309836283661244086353920 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5838299632964374630945134034685318 ^2 ::== 34085742604271951530844242122598498740928194083573341408157870587904 as intpart 34085742604271951530844242122598498740928194083573341408157870587904  diafora 54612398821942274594115610322531966759694959863957406438779463695073280 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 145957490824109365773628350867132960 ^2 ::== 21303589127669969706777651326624065036150110764523020639616319818301440 as intpart 21303589127669969706777651326624065036150110764523020639616319818301440  diafora 33342895436876576838868803238030503545355766755807641400088952448221184 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 58382996329643746309451340346853184 ^2 ::== 3408574260427195153084424212259850206399818354586302366767552128876544 as intpart 3408574260427195153084424212259850206399818354586302366767552128876544  diafora 51237910304119351392562030352394713390501074972309836283661244086353920 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 145957490824109365773628350867132960 ^2 ::== 21303589127669969706777651326624065036150110764523020639616319818301440 as intpart 21303589127669969706777651326624065036150110764523020639616319818301440  diafora 33342895436876576838868803238030503545355766755807641400088952448221184 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 14595749082410936577362835086713296 ^2 ::== 213035891276699697067776513266240637899988647161643897922972008054784 as intpart 213035891276699697067776513266240637899988647161643897922972008054784  diafora 54433448673269846848578678051388327798221576834193844542928403040305152 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 36489372706027341443407087716783240 ^2 ::== 1331474320479373106673603207914004064759381922782688789976019988643840 as intpart 1331474320479373106673603207914004064759381922782688789976019988643840  diafora 53315010244067173438972851356740561692137004554601743329139249182146560 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68308105705683183182058068205818240 ^2 ::== 4665997305098787445057268304162511237501471783951632251724310383689728 as intpart 4665997305098787445057268304162511237501471783951632251724310383689728  diafora 49980487259447759100589186260492056679390407843921093336077431742660608 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170770264264207957955145170514545600 ^2 ::== 29162483156867421531607926901015692077467708660522503426735171732242432 as intpart 29162483156867421531607926901015692077467708660522503426735171732242432  diafora 25484001407679125014038527663638873845582177289976412805355979973591040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17077026426420795795514517051454560 ^2 ::== 291624831568674215316079269010156952343841986496977015732769398980608 as intpart 291624831568674215316079269010156952343841986496977015732769398980608  diafora 54354859732977872330330375295644408098400171730150897623234998997876736 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42692566066051989488786292628636400 ^2 ::== 1822655197304213845725495431313480754841731791282656464170948233265152 as intpart 1822655197304213845725495431313480754841731791282656464170948233265152  diafora 52823829367242332699920959133341083506673159428071418638161378122137600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202694675684519831400765781026166752 ^2 ::== 41085131550852674982233429053372881300856103759317761104116978198511616 as intpart 41085131550852674982233429053372881300856103759317761104116978198511616  diafora 13561353013693871563413025511281684622193782191181155127974173507321856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 50673668921129957850191445256541688 ^2 ::== 2567820721928292186389589315835805081303506484957360069007311137406976 as intpart 2567820721928292186389589315835805081303506484957360069007311137406976  diafora 52078663842618254359256865248818761838667376304228460840939135778684928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5067366892112995785019144525654169 ^2 ::== 25678207219282921863895893158358053097645682604897757243491496230912 as intpart 25678207219282921863895893158358053097645682604897757243491496230912  diafora 54620806357327263623782558671496208467066378999399195755854738069913600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 126684172302824894625478613141354224 ^2 ::== 16048879512051826164934933223973782173530664213769710713735400946401280 as intpart 16048879512051826164934933223973782173530664213769710713735400946401280  diafora 38597605052494720380711521340680783749519221736729205518355750759432192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 30156463415730228249513931199337480 ^2 ::== 909412285744275665207665948787683834058055303603868935731241101033472 as intpart 909412285744275665207665948787683834058055303603868935731241101033472  diafora 53737072278802270880438788615866880593610335388864690279576967789412352 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 75391158539325570623784827998343704 ^2 ::== 5683826785901722907547912179923024004401220515802801876564227515219968 as intpart 5683826785901722907547912179923024004401220515802801876564227515219968  diafora 48962657778644823638098542384731541918648665434696114355526924190613504 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7539115853932557062378482799834370 ^2 ::== 56838267859017229075479121799230239628628456475241808483202568814592 as intpart 56838267859017229075479121799230239628628456475241808483202568814592  diafora 54589646296687529316570975442855333928424919309251935980300189860626432 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 188477896348313926559462069995859264 ^2 ::== 35523917411885768172174451124518901356735624008683384632333482250469376 as intpart 35523917411885768172174451124518901356735624008683384632333482250469376  diafora 19122567152660778373472003440135664566314261941815531599757669455364096 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 213262517750123002097728783284796064 ^2 ::== 45480901477121528536600358889435494372406866626399694198974273736933376 as intpart 45480901477121528536600358889435494372406866626399694198974273736933376  diafora 9165583087425018009046095675219071550643019324099222033116877968900096 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 53315629437530750524432195821199016 ^2 ::== 2842556342320095533537522430589718398275429164149980887435892108558336 as intpart 2842556342320095533537522430589718398275429164149980887435892108558336  diafora 51803928222226451012108932134064847192467457840119967118703494527188992 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5331562943753075052443219582119902 ^2 ::== 28425563423200955335375224305897188344283652810755016839975837630464 as intpart 28425563423200955335375224305897188344283652810755016839975837630464  diafora 54618059001123345590311079340348667140670466727496079256388802797633536 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 133289073593826876311080489552997536 ^2 ::== 17765977139500597084609515191185739407684184120036686151058736805838848 as intpart 17765977139500597084609515191185739407684184120036686151058736805838848  diafora 36880507425045949461036939373468826515365701830462230081032414899994624 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 38113528761191763169374762244236504 ^2 ::== 1452641074630191737263567803479618427230326038159090231409646940192768 as intpart 1452641074630191737263567803479618427230326038159090231409646940192768  diafora 53193843489916354808382886761174948492740556751026730678536799975899136 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 95283821902979407923436905610591264 ^2 ::== 9079006716438698357897298771747615585573286421280524228749999713812480 as intpart 9079006716438698357897298771747615585573286421280524228749999713812480  diafora 45567477848107848187749155792906949008248603744302519099534091711676416 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 9528382190297940792343690561059126 ^2 ::== 90790067164386983578972987717476151701895377384943139463102933762048 as intpart 90790067164386983578972987717476151701895377384943139463102933762048  diafora 54555694497382159562067481576937090498269550767989841086897534862884864 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 23820955475744851980859226402647816 ^2 ::== 567437919777418647368581173234225974098330401330032764296874982113280 as intpart 567437919777418647368581173234225974098330401330032764296874982113280  diafora 54079046644769127898277873391420337872032812135237832055595745035681792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68105411029998663350657302424792040 ^2 ::== 4638347011565063594794225206409586279147758214801027052571411164954624 as intpart 4638347011565063594794225206409586279147758214801027052571411164954624  diafora 50008137552981482950852229358244980973130123520613762083326800821223424 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170263527574996658376643256061980096 ^2 ::== 28989668822281647467463907540059912583138494111361577948812494430535680 as intpart 28989668822281647467463907540059912583138494111361577948812494430535680  diafora 25656815742264899078182547024594653339911391839137338283278657275297792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17026352757499665837664325606198010 ^2 ::== 289896688222816474674639075400599142446734888425064190785713197809664 as intpart 289896688222816474674639075400599142446734888425064190785713197809664  diafora 54356587876323730070971815489253969189828893422233871679455735266148352 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42565881893749164594160814015495024 ^2 ::== 1811854301392602966716494221253744536446155881960098621800780901908480 as intpart 1811854301392602966716494221253744536446155881960098621800780901908480  diafora 52834630263153943578929960343400821718910729014767785836242135874011136 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 233531985318574985237805361387412736 ^2 ::== 54537188166835122449350787396157603302397093673380837868280834062024704 as intpart 54537188166835122449350787396157603302397093673380837868280834062024704  diafora 109296397711424096295667168496962620652792277118078363810317643808768 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------

10 |26| 36 |16| 233765875534789180113750536509909856  and main 54646484564546546545646454564654565923049885950498916232091151705833472
-------------------------------------------------------------------------
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 26 ::== 2101787867867174867140248252486714073963457151942266008926582757916672
            ----->  | *2 4203575735734349734280496504973428147926914303884532017853165515833344
            ----->  /2 1050893933933587433570124126243357036981728575971133004463291378958336
                 --> 525446966966793716785062063121678518490864287985566502231645689479168
                 --> 262723483483396858392531031560839259245432143992783251115822844739584
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1767004896605457967358965511635504034672644367577886643469536959922176 42035757357343497342804965049734264
i insert 11043780603784112295993534447721900299780777033919033578172547267035136 105089393393358743357012412624335664
i insert 0 0
i insert 110437806037841122959935344477219002167040272973617915216846059995136 10508939339335874335701241262433566
i insert 690236287736507018499595902982618768736298564619939598635784204189696 26272348348339685839253103156083916
CDIS Start 
section_temp 0
section h inf
2101787867867174867140248252486714073963457151942266008926582757916672 / 13 ::== 161675989835936528241557557883593382316732306249670264485896628731904
            ----->  | *2 323351979671873056483115115767186764633464612499340528971793257463808
            ----->  /2 80837994917968264120778778941796691158366153124835132242948314365952
                 --> 40418997458984132060389389470898345579183076562417566121474157182976
                 --> 20209498729492066030194694735449172789591538281208783060737078591488
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1045565027577194063526015095642311379421246983521518708290357439758336 32335197967187305648311511576718684
i insert 6534781422357462897037594347764446038306043910452249870326792730968064 80837994917968264120778778941796712
i insert 0 0
i insert 65347814223574628970375943477644461213827936470094919268147339984896 8083799491796826412077877894179671
i insert 40842383889734143106484964673527785080956782870494815881928334007861248 202094987294920660301946947354491776
section_temp 0
section h inf
161675989835936528241557557883593382316732306249670264485896628731904 / 4 ::== 40418997458984132060389389470898345579183076562417566121474157182976
            ----->  | *2 80837994917968264120778778941796691158366153124835132242948314365952
            ----->  /2 20209498729492066030194694735449172789591538281208783060737078591488
                 --> 10104749364746033015097347367724586394795769140604391530368539295744
                 --> 5052374682373016507548673683862293197397884570302195765184269647872
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 6534781422357462897037594347764446038306043910452249870326792730968064 80837994917968264120778778941796712
i insert 40842383889734143106484964673527785080956782870494815881928334007861248 202094987294920660301946947354491776
i insert 0 0
i insert 408423838897341431064849646735277877394127744403265616895424545685504 20209498729492066030194694735449178
i insert 2552648993108383944155310292095486567559798929405925992620520875491328 50523746823730165075486736838622944
CDIS End 
section_temp 0
section h inf
54646484564546546545646454564654565923049885950498916232091151705833472 / 16 ::== 3415405285284159159102903410290910370190617871906182264505696981614592
            ----->  | *2 6830810570568318318205806820581820740381235743812364529011393963229184
            ----->  /2 1707702642642079579551451705145455185095308935953091132252848490807296
                 --> 853851321321039789775725852572727592547654467976545566126424245403648
                 --> 426925660660519894887862926286363796273827233988272783063212122701824
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4665997305098787445057268304162511237501471783951632251724310383689728 68308105705683183182058068205818240
i insert 29162483156867421531607926901015692077467708660522503426735171732242432 170770264264207957955145170514545600
i insert 0 0
i insert 291624831568674215316079269010156952343841986496977015732769398980608 17077026426420795795514517051454560
i insert 1822655197304213845725495431313480754841731791282656464170948233265152 42692566066051989488786292628636400
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 / 337 ::== 10134733784225991570038289051308339369716526536020084422078483136512
            ----->  | *2 20269467568451983140076578102616678739433053072040168844156966273024
            ----->  /2 5067366892112995785019144525654169684858263268010042211039241568256
                 --> 2533683446056497892509572262827084842429131634005021105519620784128
                 --> 1266841723028248946254786131413542421214565817002510552759810392064
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 41085131550852674982233429053372881300856103759317761104116978198511616 202694675684519831400765781026166752
i insert 2567820721928292186389589315835805081303506484957360069007311137406976 50673668921129957850191445256541688
i insert 0 0
i insert 25678207219282921863895893158358053097645682604897757243491496230912 5067366892112995785019144525654169
i insert 16048879512051826164934933223973782173530664213769710713735400946401280 126684172302824894625478613141354224
removals 
reporing rt 4
section_temp 0
section h inf
2101787867867174867140248252486714073963457151942266008926582757916672 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 2091653134082948875570209963435405607382467591302969025507344208887808
            ----->  | *2 4183306268165897751140419926870811214764935182605938051014688417775616
            ----->  /2 1045826567041474437785104981717702803691233795651484512753672104443904
                 --> 522913283520737218892552490858851401845616897825742256376836052221952
                 --> 261456641760368609446276245429425700922808448912871128188418026110976
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1750005133327609002841316772029498110506033181305794753852940480413696 41833062681658977511404199268708112
i insert 10937532083297556267758229825184361030667214232672923742894405047025664 104582656704147443778510498171770272
i insert 0 0
i insert 109375320832975562677582298251843631906627073831612172115808780025856 10458265670414744377851049817177028
i insert 683595755206097266734889364074022564416700889542057733930900315439104 26145664176036860944627624542942568
section_temp 0
section h inf
161675989835936528241557557883593382316732306249670264485896628731904 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 151541256051710536671519268832285040350867350446236365798569980985344
            ----->  | *2 303082512103421073343038537664570080701734700892472731597139961970688
            ----->  /2 75770628025855268335759634416142520175433675223118182899284990492672
                 --> 37885314012927634167879817208071260087716837611559091449642495246336
                 --> 18942657006463817083939908604035630043858418805779545724821247623168
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 918590091429203814157846338277951583333163207852979002967675451211776 30308251210342107334303853766457004
i insert 5741188071432523838486539614237197811216018731867329050987677907681280 75770628025855268335759634416142512
i insert 0 0
i insert 57411880714325238384865396142371973958322700490811187685479715700736 7577062802585526833575963441614251
i insert 35882425446453273990540872588982486818560615493514258907600634528137216 189426570064638170839399086040356288
section_temp 0
section h inf
40418997458984132060389389470898345579183076562417566121474157182976 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 30284263674758140490351100419590008805614979293811295964643838656512
            ----->  | *2 60568527349516280980702200839180017611229958587622591929287677313024
            ----->  /2 15142131837379070245175550209795004402807489646905647982321919328256
                 --> 7571065918689535122587775104897502201403744823452823991160959664128
                 --> 3785532959344767561293887552448751100701872411726411995580479832064
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3668546505289101725200126131555763869395959167963178768720261554372608 60568527349516280980702200839180000
i insert 22928415658056885782500788322223526177566738477143676660212225135345664 151421318373790702451755502097950000
i insert 0 0
i insert 229284156580568857825007883222235241837247447997698673045016347148288 15142131837379070245175550209795000
i insert 1433025978628555361406299270138970386097921154821479791263264070959104 37855329593447675612938875524487500
section_temp 0
section h inf
3415405285284159159102903410290910370190617871906182264505696981614592 - 10134733784225991570038289051308339369716526536020084422078483136512 ::== 3405270551499933167532865121239601903609628311266885281086458432585728
            ----->  | *2 6810541102999866335065730242479203807219256622533770562172916865171456
            ----->  /2 1702635275749966583766432560619800951804814155633442640543229216292864
                 --> 851317637874983291883216280309900475902407077816721320271614608146432
                 --> 425658818937491645941608140154950237951203538908360660135807304073216
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 4638347011565063594794225206409586279147758214801027052571411164954624 68105411029998663350657302424792040
i insert 28989668822281647467463907540059912583138494111361577948812494430535680 170263527574996658376643256061980096
i insert 0 0
i insert 289896688222816474674639075400599142446734888425064190785713197809664 17026352757499665837664325606198010
i insert 1811854301392602966716494221253744536446155881960098621800780901908480 42565881893749164594160814015495024
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 42035757357343497342804965049734264 ^2 ::== 1767004896605457967358965511635504034672644367577886643469536959922176 as intpart 1767004896605457967358965511635504034672644367577886643469536959922176  diafora 52879479667941088578287489053019064214526234206523807170283970236514304 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 105089393393358743357012412624335664 ^2 ::== 11043780603784112295993534447721900299780777033919033578172547267035136 as intpart 11043780603784112295993534447721900299780777033919033578172547267035136  diafora 43602703960762434249652920116932665623269108916579882653918604438798336 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10508939339335874335701241262433566 ^2 ::== 110437806037841122959935344477219002167040272973617915216846059995136 as intpart 110437806037841122959935344477219002167040272973617915216846059995136  diafora 54536046758508705422686519220177347398574156662729440141679967934087168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 26272348348339685839253103156083916 ^2 ::== 690236287736507018499595902982618768736298564619939598635784204189696 as intpart 690236287736507018499595902982618768736298564619939598635784204189696  diafora 53956248276810039527146858661671944828164594762276199051793012011040768 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 32335197967187305648311511576718684 ^2 ::== 1045565027577194063526015095642311379421246983521518708290357439758336 as intpart 1045565027577194063526015095642311379421246983521518708290357439758336  diafora 53600919536969352482120439469012252217479646343374619942138438775472128 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 80837994917968264120778778941796712 ^2 ::== 6534781422357462897037594347764446038306043910452249870326792730968064 as intpart 6534781422357462897037594347764446038306043910452249870326792730968064  diafora 48111703142189083648608860216890119884743842040046666361764358974865408 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 8083799491796826412077877894179671 ^2 ::== 65347814223574628970375943477644461213827936470094919268147339984896 as intpart 65347814223574628970375943477644461213827936470094919268147339984896  diafora 54581136750322971916676078621176919654916751243908806584210281797255168 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202094987294920660301946947354491776 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248  diafora 13804100674812403439161489891126780842093103080004100350162817697972224 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 80837994917968264120778778941796712 ^2 ::== 6534781422357462897037594347764446038306043910452249870326792730968064 as intpart 6534781422357462897037594347764446038306043910452249870326792730968064  diafora 48111703142189083648608860216890119884743842040046666361764358974865408 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202094987294920660301946947354491776 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248  diafora 13804100674812403439161489891126780842093103080004100350162817697972224 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 20209498729492066030194694735449178 ^2 ::== 408423838897341431064849646735277877394127744403265616895424545685504 as intpart 408423838897341431064849646735277877394127744403265616895424545685504  diafora 54238060725649205114581604917919288710269756098553587067099257300320256 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 50523746823730165075486736838622944 ^2 ::== 2552648993108383944155310292095486567559798929405925992620520875491328 as intpart 2552648993108383944155310292095486567559798929405925992620520875491328  diafora 52093835571438162601491144272559082013946078590924736047084751391031296 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68308105705683183182058068205818240 ^2 ::== 4665997305098787445057268304162511237501471783951632251724310383689728 as intpart 4665997305098787445057268304162511237501471783951632251724310383689728  diafora 49980487259447759100589186260492056679390407843921093336077431742660608 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170770264264207957955145170514545600 ^2 ::== 29162483156867421531607926901015692077467708660522503426735171732242432 as intpart 29162483156867421531607926901015692077467708660522503426735171732242432  diafora 25484001407679125014038527663638873845582177289976412805355979973591040 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17077026426420795795514517051454560 ^2 ::== 291624831568674215316079269010156952343841986496977015732769398980608 as intpart 291624831568674215316079269010156952343841986496977015732769398980608  diafora 54354859732977872330330375295644408098400171730150897623234998997876736 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42692566066051989488786292628636400 ^2 ::== 1822655197304213845725495431313480754841731791282656464170948233265152 as intpart 1822655197304213845725495431313480754841731791282656464170948233265152  diafora 52823829367242332699920959133341083506673159428071418638161378122137600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 202694675684519831400765781026166752 ^2 ::== 41085131550852674982233429053372881300856103759317761104116978198511616 as intpart 41085131550852674982233429053372881300856103759317761104116978198511616  diafora 13561353013693871563413025511281684622193782191181155127974173507321856 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 50673668921129957850191445256541688 ^2 ::== 2567820721928292186389589315835805081303506484957360069007311137406976 as intpart 2567820721928292186389589315835805081303506484957360069007311137406976  diafora 52078663842618254359256865248818761838667376304228460840939135778684928 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 5067366892112995785019144525654169 ^2 ::== 25678207219282921863895893158358053097645682604897757243491496230912 as intpart 25678207219282921863895893158358053097645682604897757243491496230912  diafora 54620806357327263623782558671496208467066378999399195755854738069913600 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 126684172302824894625478613141354224 ^2 ::== 16048879512051826164934933223973782173530664213769710713735400946401280 as intpart 16048879512051826164934933223973782173530664213769710713735400946401280  diafora 38597605052494720380711521340680783749519221736729205518355750759432192 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 41833062681658977511404199268708112 ^2 ::== 1750005133327609002841316772029498110506033181305794753852940480413696 as intpart 1750005133327609002841316772029498110506033181305794753852940480413696  diafora 52896479431218937542805137792625065818701859091819312122527620804902912 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 104582656704147443778510498171770272 ^2 ::== 10937532083297556267758229825184361030667214232672923742894405047025664 as intpart 10937532083297556267758229825184361030667214232672923742894405047025664  diafora 43708952481248990277888224739470206221610667502741865393003806939152384 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 10458265670414744377851049817177028 ^2 ::== 109375320832975562677582298251843631906627073831612172115808780025856 as intpart 109375320832975562677582298251843631906627073831612172115808780025856  diafora 54537109243713570982968872266402722166528134271831440975243431024525312 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 26145664176036860944627624542942568 ^2 ::== 683595755206097266734889364074022564416700889542057733930900315439104 as intpart 683595755206097266734889364074022564416700889542057733930900315439104  diafora 53962888809340449278911565200580545103244929528658941684407018008346624 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 30308251210342107334303853766457004 ^2 ::== 918590091429203814157846338277951583333163207852979002967675451211776 as intpart 918590091429203814157846338277951583333163207852979002967675451211776  diafora 53727894473117342731488608226376612678181728011501096099364650904190976 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 75770628025855268335759634416142512 ^2 ::== 5741188071432523838486539614237197811216018731867329050987677907681280 as intpart 5741188071432523838486539614237197811216018731867329050987677907681280  diafora 48905296493114022707159914950417366117991873541257777825392883377635328 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 7577062802585526833575963441614251 ^2 ::== 57411880714325238384865396142371973958322700490811187685479715700736 as intpart 57411880714325238384865396142371973958322700490811187685479715700736  diafora 54589072683832221307261589168512191851403632401937743118085154985213952 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 189426570064638170839399086040356288 ^2 ::== 35882425446453273990540872588982486818560615493514258907600634528137216 as intpart 35882425446453273990540872588982486818560615493514258907600634528137216  diafora 18764059118093272555105581975672079104489270456984657324490517177696256 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 60568527349516280980702200839180000 ^2 ::== 3668546505289101725200126131555763869395959167963178768720261554372608 as intpart 3668546505289101725200126131555763869395959167963178768720261554372608  diafora 50977938059257444820446328433098799395197935212703991655756769590771712 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 151421318373790702451755502097950000 ^2 ::== 22928415658056885782500788322223526177566738477143676660212225135345664 as intpart 22928415658056885782500788322223526177566738477143676660212225135345664  diafora 31718068906489660763145666242431042403939139043186985379493047131176960 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 15142131837379070245175550209795000 ^2 ::== 229284156580568857825007883222235241837247447997698673045016347148288 as intpart 229284156580568857825007883222235241837247447997698673045016347148288  diafora 54417200407965977687821446681432330847366137975615701672022017893728256 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 37855329593447675612938875524487500 ^2 ::== 1433025978628555361406299270138970386097921154821479791263264070959104 as intpart 1433025978628555361406299270138970386097921154821479791263264070959104  diafora 53213458585917991184240155294515595370798465322562952327852005099831296 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 68105411029998663350657302424792040 ^2 ::== 4638347011565063594794225206409586279147758214801027052571411164954624 as intpart 4638347011565063594794225206409586279147758214801027052571411164954624  diafora 50008137552981482950852229358244980973130123520613762083326800821223424 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 170263527574996658376643256061980096 ^2 ::== 28989668822281647467463907540059912583138494111361577948812494430535680 as intpart 28989668822281647467463907540059912583138494111361577948812494430535680  diafora 25656815742264899078182547024594653339911391839137338283278657275297792 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 54646484564546546545646454564654565923049885950498916232091151705833472 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 17026352757499665837664325606198010 ^2 ::== 289896688222816474674639075400599142446734888425064190785713197809664 as intpart 289896688222816474674639075400599142446734888425064190785713197809664  diafora 54356587876323730070971815489253969189828893422233871679455735266148352 from 54646484564546546545646454564654565923049885950498916232091151705833472
entering amfidromi loop of xl vector  with first 
 of 42565881893749164594160814015495024 ^2 ::== 1811854301392602966716494221253744536446155881960098621800780901908480 as intpart 1811854301392602966716494221253744536446155881960098621800780901908480  diafora 52834630263153943578929960343400821718910729014767785836242135874011136 from 54646484564546546545646454564654565923049885950498916232091151705833472
the size of xpl vector is 44 64
 of 202694675684519831400765781026166752 ^2 ::== 41085131550852674982233429053372881300856103759317761104116978198511616 as intpart 41085131550852674982233429053372881300856103759317761104116978198511616  diafora 13561353013693871563413025511281684622193782191181155127974173507321856 from 54646484564546546545646454564654565923049885950498916232091151705833472

-------------------------------------------------------------------------


 226999693357098001229364392778173248.000000 ^2 ::== 51528860784216522427477661973560619624231063999133300150374635004755968.000000 as intpart 51528860784216522427477661973560619624231063999133300150374635004755968.000000 diafora 3117623780330024118168792591093946298818821951365616081716516701077504.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 210178786786717486714024825248671328.000000 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544.000000 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544.000000 diafora 10471362149410097361672316773766964723926777814822781919400962637692928.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 210178786786717486714024825248671328.000000 ^2 ::== 44175122415136449183974137790887601199123108135676134312690189068140544.000000 as intpart 44175122415136449183974137790887601199123108135676134312690189068140544.000000 diafora 10471362149410097361672316773766964723926777814822781919400962637692928.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 221127181809470219171586550305262592.000000 ^2 ::== 48897230534998496992972214058731179490988178063105626302665664308969472.000000 as intpart 48897230534998496992972214058731179490988178063105626302665664308969472.000000 diafora 5749254029548049552674240505923386432061707887393289929425487396864000.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 202094987294920660301946947354491776.000000 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248.000000 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248.000000 diafora 13804100674812403439161489891126780842093103080004100350162817697972224.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 202094987294920660301946947354491776.000000 ^2 ::== 40842383889734143106484964673527785080956782870494815881928334007861248.000000 as intpart 40842383889734143106484964673527785080956782870494815881928334007861248.000000 diafora 13804100674812403439161489891126780842093103080004100350162817697972224.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 218583562349899774228518116974738080.000000 ^2 ::== 47778773729572522110160435984909777713273738405989056773315156137476096.000000 as intpart 47778773729572522110160435984909777713273738405989056773315156137476096.000000 diafora 6867710834974024435486018579744788209776147544509859458775995568357376.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 216207654063487820160816833094577888.000000 ^2 ::== 46745749675636821313118923722948712341298071623807805075036867647242240.000000 as intpart 46745749675636821313118923722948712341298071623807805075036867647242240.000000 diafora 7900734888909725232527530841705853581751814326691111157054284058591232.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 233531985318574985237805361387412736.000000 ^2 ::== 54537188166835122449350787396157603302397093673380837868280834062024704.000000 as intpart 54537188166835122449350787396157603302397093673380837868280834062024704.000000 diafora 109296397711424096295667168496962620652792277118078363810317643808768.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 
 202694675684519831400765781026166752.000000 ^2 ::== 41085131550852674982233429053372881300856103759317761104116978198511616.000000 as intpart 41085131550852674982233429053372881300856103759317761104116978198511616.000000 diafora 13561353013693871563413025511281684622193782191181155127974173507321856.000000 from 54646484564546546545646454564654565923049885950498916232091151705833472.000000 

---------order of near approximation numbers--------
|----------bigger value is the nearest-------------|

the size of fnl_weirdo vector is 9 16
 233531985318574985237805361387412736  226999693357098001229364392778173248  221127181809470219171586550305262592  218583562349899774228518116974738080  216207654063487820160816833094577888  210178786786717486714024825248671328  210178786786717486714024825248671328  202694675684519831400765781026166752  202094987294920660301946947354491776 
----------------------------------------------------

auto value is 233531985318574985237805361387412736
lenght of 233531985318574985237805361387412736 36
lenght of 54646484564546546545646454564654565923049885950498916232091151705833472 is 71
moving with ps_ask 37
-------------------------------------------------------
times 1 5 2
main 2.2360679774997896964091736687312763193940458807410572713375159684243056318342369 second 1.4142135623730950488016887242096979843472463891586274162555123740496747404560285
main 5 second 1.9999999999999999999999999999999998074070055612764146944022057415072681461898352
times of 1.1180339887498948482045868343656383522900173790941139412665522427048846697272833
new times of 1.1180339887498948482045868343656383522900173790941139412665522427048846697272833
using 233531985318574985237805361387412736 * 1.1180339887498948482045868343656383522900173790941139412665522427048846697272833
261096697046408273903853246290706560  with length of 35 and dot length 32766 will move -32731

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 261096697046408273903853246290706560 ^2 ::== 68171485208543903061688484245197040017152253284454615738141670146834432
 temp fract 0 temp int 68171485208543903061688484245197040017152253284454615738141670146834432
before loop xstp is 0entering tens with lap of value -32731
using t_rst as 2610966970464082739038532462907065600
using for fract 6817148520854390306168848424519703703968154272624306043361385511886258176
getting the part of 6817148520854390306168848424519703703968154272624306043361385511886258176 :: ad 73 and mad 71
have to exit bigger lenght with ad 73 and mad 71
    -----------------> 2610966970464082739038532462907065600 ^2 ::== 6817148520854390306168848424519703703968154272624306043361385511886258176
t_ten increased 
breaking with xbrk of value 1

increasing the digits 2
-------------------------------------------------------
-------------------------------------------------------
times 2 54 23
main 7.3484692283495342945918522241176741076511882876286228377852682673576634186929368 second 4.7958315233127195415974380641626942776174979640083696022411113878743810223781452
main 54 second 23.000000000000000000000000000000003081487911019577364889564708135883709660962637
times of 0.31949866210215366498225444452685535830359623101619517228674756974523348158900848
new times of 0.31949866210215366498225444452685535830359623101619517228674756974523348158900848
using 233531985318574985237805361387412736 * 0.31949866210215366498225444452685535830359623101619517228674756974523348158900848
74613156867344499721023037298843176  with length of 34 and dot length 32766 will move -32732

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 74613156867344499721023037298843176 ^2 ::== 5567123177710957679139777919456540936928053683855042838329905236672512
 temp fract 0 temp int 5567123177710957679139777919456540936928053683855042838329905236672512
before loop xstp is 0entering tens with lap of value -32732
using t_rst as 746131568673444997210230372988431744
using for fract 556712317771095767913977791945654040523685536988869367680708112453468160
getting the part of 556712317771095767913977791945654040523685536988869367680708112453468160 :: ad 72 and mad 71
have to exit bigger lenght with ad 72 and mad 71
i push_back a near value of 746131568673444997210230372988431744
stopping with ad 72 and mad of 71
    -----------------> 746131568673444997210230372988431744 ^2 ::== 556712317771095767913977791945654040523685536988869367680708112453468160
t_ten increased 
breaking with xbrk of value 1

increasing the digits 3
-------------------------------------------------------
-------------------------------------------------------
times 3 546 233
main 23.366642891095845221324369785216086152051556936756014307637613962808330325682249 second 15.26433752247374802525594870060047920818484554624352975893851681643597142934432
main 546 second 233
times of 0.10028602099182766189409600766187161092518623486953219244826974465824041067747718
new times of 0.10028602099182766189409600766187161092518623486953219244826974465824041067747718
using 233531985318574985237805361387412736 * 0.10028602099182766189409600766187161092518623486953219244826974465824041067747718
23419993581921800317066836424416032  with length of 34 and dot length 32766 will move -32732

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 23419993581921800317066836424416032 ^2 ::== 548496099377258318579187863440145445259101610312749056172425622847488
 temp fract 0 temp int 548496099377258318579187863440145445259101610312749056172425622847488
before loop xstp is 0entering tens with lap of value -32732
using t_rst as 234199935819218003170668364244160320
using for fract 54849609937725831857918786344014545855138156816190778521049622565093376
getting the part of 54849609937725831857918786344014545855138156816190778521049622565093376 :: ad 71 and mad 71
i push_back a near value of 234199935819218003170668364244160320
stopping with ad 71 and mad of 71
    -----------------> 234199935819218003170668364244160320 ^2 ::== 54849609937725831857918786344014545855138156816190778521049622565093376
t_ten increased 
breaking with xbrk of value 1

increasing the digits 4
-------------------------------------------------------
-------------------------------------------------------
times 4 5464 2335
main 73.918874450305315779195463536140019162891702004863035829432209148671939491492822 second 48.321837713398276756975306217953453807129910266110351595313808823568477168741708
main 5464 second 2335
times of 0.031656905546169300119569791664299794968446246445298464234264792564968950976979356
new times of 0.031656905546169300119569791664299794968446246445298464234264792564968950976979356
using 233531985318574985237805361387412736 * 0.031656905546169300119569791664299794968446246445298464234264792564968950976979356
7392900001239524020029354250266810  with length of 33 and dot length 32766 will move -32733

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 7392900001239524020029354250266810 ^2 ::== 54654970428327354256886445869824726562553457167395255784159217451008
 temp fract 0 temp int 54654970428327354256886445869824726562553457167395255784159217451008
before loop xstp is 0entering tens with lap of value -32733
using t_rst as 73929000012395240200293542502668096
using for fract 5465497042832735425688644586982472116256472429117452211244303506210816
getting the part of 5465497042832735425688644586982472116256472429117452211244303506210816 :: ad 70 and mad 71
i push_back a near value of 73929000012395240200293542502668096
stopping with ad 70 and mad of 71
    -----------------> 73929000012395240200293542502668096 ^2 ::== 5465497042832735425688644586982472116256472429117452211244303506210816
t_ten increased 
breaking with xbrk of value 1

increasing the digits 5
-------------------------------------------------------
-------------------------------------------------------
times 5 54646 23353
main 233.764839101178772633473026215854417834096152837280831684043668513943436959579 second 152.81688388394784959275801745131409865872646066342988961845290678785713733844887
main 54646.000000000000000000000000000006310887241768094443293828522262289837385651481 second 23353
times of 0.010010056057088115986531624468627346757652424178572691227496155407331277382163362
new times of 0.010010056057088115986531624468627346757652424178572691227496155407331277382163362
using 233531985318574985237805361387412736 * 0.010010056057088115986531624468627346757652424178572691227496155407331277382163362
2337668264162014506861414219684786.25  with length of 36 and dot length 34 will move 2

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 2337668264162014506861414219684786.25 ^2 ::== 5464692913270246038021325235464445146411348545875309315066771275776
 temp fract 0 temp int 5464692913270246038021325235464445146411348545875309315066771275776
before loop xstp is 0entering tens with lap of value 2
using t_rst as 23376682641620145068614142196847864
using for fract 546469291327024603802132523546444545794916005796496702689655102898176
getting the part of 546469291327024603802132523546444545794916005796496702689655102898176 :: ad 69 and mad 71
    -----------------> 23376682641620145068614142196847864 ^2 ::== 546469291327024603802132523546444545794916005796496702689655102898176
t_ten increased 
using t_rst as 233766826416201450686141421968478624
using for fract 54646929132702460380213252354644449262579617439986178653737269168439296
getting the part of 54646929132702460380213252354644449262579617439986178653737269168439296 :: ad 71 and mad 71
i push_back a near value of 233766826416201450686141421968478624
stopping with ad 71 and mad of 71
    -----------------> 233766826416201450686141421968478624 ^2 ::== 54646929132702460380213252354644449262579617439986178653737269168439296
t_ten increased 
breaking with xbrk of value 1

increasing the digits 6
-------------------------------------------------------
-------------------------------------------------------
times 6 546464 233531
main 739.23203393792398612162048736443909173856121137970977411450204056647672601343402 second 483.25045266404045035331935943493002653305721940629494581467281251116463458572525
main 546464 second 233531
times of 0.0031654556951236623237241329303794316320980043104346265156739256321130438368645528
new times of 0.0031654556951236623237241329303794316320980043104346265156739256321130438368645528
using 233531985318574985237805361387412736 * 0.0031654556951236623237241329303794316320980043104346265156739256321130438368645528
739235152920218684273956989095582.625  with length of 36 and dot length 33 will move 3

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 739235152920218684273956989095582.625 ^2 ::== 546468611312979102731799635837963288996312115512661924989550723072
 temp fract 0 temp int 546468611312979102731799635837963288996312115512661924989550723072
before loop xstp is 0entering tens with lap of value 3
using t_rst as 7392351529202186842739569890955826
using for fract 54646861131297910273179963583796318515037494481610935437962413867008
getting the part of 54646861131297910273179963583796318515037494481610935437962413867008 :: ad 68 and mad 71
    -----------------> 7392351529202186842739569890955826 ^2 ::== 54646861131297910273179963583796318515037494481610935437962413867008
t_ten increased 
using t_rst as 73923515292021868427395698909558264
using for fract 5464686113129791027317996358379633097654995496519724391115360399523840
getting the part of 5464686113129791027317996358379633097654995496519724391115360399523840 :: ad 70 and mad 71
i push_back a near value of 73923515292021868427395698909558264
stopping with ad 70 and mad of 71
    -----------------> 73923515292021868427395698909558264 ^2 ::== 5464686113129791027317996358379633097654995496519724391115360399523840
t_ten increased 
breaking with xbrk of value 1

increasing the digits 7
-------------------------------------------------------
-------------------------------------------------------
times 7 5464648 2335319
main 2337.6586577171612374726785783820823251566540706799321984572738366420230349262965 second 1528.1750554174086504853234953831978220416066204755638724977211302669122261477241
main 5464647.9999999999999999999999999991922064330536839112583899491504269008146366104 second 2335319
times of 0.0010010018578691652992472028782286626938579196493449463552549363157405864746985358
new times of 0.0010010018578691652992472028782286626938579196493449463552549363157405864746985358
using 233531985318574985237805361387412736 * 0.0010010018578691652992472028782286626938579196493449463552549363157405864746985358
233765951175768194720003369580699.46875  with length of 38 and dot length 33 will move 5

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 233765951175768194720003369580699.46875 ^2 ::== 54646519929111639419443991101602383340001612334388726803613089792
 temp fract 0 temp int 54646519929111639419443991101602383340001612334388726803613089792
before loop xstp is 0entering tens with lap of value 5
using t_rst as 2337659511757681947200033695806994.75
using for fract 5464651992911163941944399110160238699083534099168940311411832127488
getting the part of 5464651992911163941944399110160238699083534099168940311411832127488 :: ad 67 and mad 71
    -----------------> 2337659511757681947200033695806994.75 ^2 ::== 5464651992911163941944399110160238699083534099168940311411832127488
t_ten increased 
using t_rst as 23376595117576819472000336958069948
using for fract 546465199291116394194439911016023890677540844056204545263168529629184
getting the part of 546465199291116394194439911016023890677540844056204545263168529629184 :: ad 69 and mad 71
    -----------------> 23376595117576819472000336958069948 ^2 ::== 546465199291116394194439911016023890677540844056204545263168529629184
t_ten increased 
using t_rst as 233765951175768194720003369580699456
using for fract 54646519929111639419443991101602381424693108642354185329426256350937088
getting the part of 54646519929111639419443991101602381424693108642354185329426256350937088 :: ad 71 and mad 71
i push_back a near value of 233765951175768194720003369580699456
stopping with ad 71 and mad of 71
    -----------------> 233765951175768194720003369580699456 ^2 ::== 54646519929111639419443991101602381424693108642354185329426256350937088
t_ten increased 
breaking with xbrk of value 1

increasing the digits 8
-------------------------------------------------------
-------------------------------------------------------
times 8 54646484 23353198
main 7392.3260209490219696167673420053459937437528321769599137173577946269276139901194 second 4832.5146662995240205144041006346411659077042441278048510430514692060022241548722
main 54646484.000000000000000000000000006462348535570528709932880406796584793482907116 second 23353198
times of 0.00031654448444059019110002695742164931941061764062146949128810897343394611225226394
new times of 0.00031654448444059019110002695742164931941061764062146949128810897343394611225226394
using 233531985318574985237805361387412736 * 0.00031654448444059019110002695742164931941061764062146949128810897343394611225226394
73923261893055796356888357958613.265625  with length of 38 and dot length 32 will move 6

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 73923261893055796356888357958613.265625 ^2 ::== 5464648648909315240854869873108040382785377395374984012509478912
 temp fract 0 temp int 5464648648909315240854869873108040382785377395374984012509478912
before loop xstp is 0entering tens with lap of value 6
using t_rst as 739232618930557963568883579586132.625
using for fract 546464864890931524085486987310804033207935338624580795264135069696
getting the part of 546464864890931524085486987310804033207935338624580795264135069696 :: ad 66 and mad 71
    -----------------> 739232618930557963568883579586132.625 ^2 ::== 546464864890931524085486987310804033207935338624580795264135069696
t_ten increased 
using t_rst as 7392326189305579635688835795861327
using for fract 54646486489093152408548698731080416301535680199527150852654330019840
getting the part of 54646486489093152408548698731080416301535680199527150852654330019840 :: ad 68 and mad 71
    -----------------> 7392326189305579635688835795861327 ^2 ::== 54646486489093152408548698731080416301535680199527150852654330019840
t_ten increased 
using t_rst as 73923261893055796356888357958613264
using for fract 5464648648909315240854869873108040134772072761922358068482490186596352
getting the part of 5464648648909315240854869873108040134772072761922358068482490186596352 :: ad 70 and mad 71
i push_back a near value of 73923261893055796356888357958613264
stopping with ad 70 and mad of 71
    -----------------> 73923261893055796356888357958613264 ^2 ::== 5464648648909315240854869873108040134772072761922358068482490186596352
t_ten increased 
breaking with xbrk of value 1

increasing the digits 9
-------------------------------------------------------
-------------------------------------------------------
times 9 546464845 233531985
main 23376.587539673107728534896788508259075782628630046746648617770128475434887604933 second 15281.753335268829681870000246347573053853484144621971858383200661146705812143409
main 546464845 second 233531985.00000000000000000000000002584939414228211483973152162718633917393162847
times of 0.00010010015347436501140747335654475020413676266583484739431937259609875412507068795
new times of 0.00010010015347436501140747335654475020413676266583484739431937259609875412507068795
using 233531985318574985237805361387412736 * 0.00010010015347436501140747335654475020413676266583484739431937259609875412507068795
23376587571562512643932781354075.76171875  with length of 40 and dot length 32 will move 8

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 23376587571562512643932781354075.76171875 ^2 ::== 546464846490930932202695230796880236267563572401552901823004672
 temp fract 0 temp int 546464846490930932202695230796880236267563572401552901823004672
before loop xstp is 0entering tens with lap of value 8
using t_rst as 233765875715625126439327813540757.625
using for fract 54646484649093093220269523079688028063533458038958195420761686016
getting the part of 54646484649093093220269523079688028063533458038958195420761686016 :: ad 65 and mad 71
    -----------------> 233765875715625126439327813540757.625 ^2 ::== 54646484649093093220269523079688028063533458038958195420761686016
t_ten increased 
using t_rst as 2337658757156251264393278135407576.25
using for fract 5464648464909309322026952307968802684658888181985796998392660885504
getting the part of 5464648464909309322026952307968802684658888181985796998392660885504 :: ad 67 and mad 71
    -----------------> 2337658757156251264393278135407576.25 ^2 ::== 5464648464909309322026952307968802684658888181985796998392660885504
t_ten increased 
using t_rst as 23376587571562512643932781354075760
using for fract 546464846490930932202695230796880164619951647502027129229339504148480
getting the part of 546464846490930932202695230796880164619951647502027129229339504148480 :: ad 69 and mad 71
    -----------------> 23376587571562512643932781354075760 ^2 ::== 546464846490930932202695230796880164619951647502027129229339504148480
t_ten increased 
using t_rst as 233765875715625126439327813540757632
using for fract 54646484649093093220269523079688030751196119438048346638859848428552192
getting the part of 54646484649093093220269523079688030751196119438048346638859848428552192 :: ad 71 and mad 71
i push_back a near value of 233765875715625126439327813540757632
stopping with ad 71 and mad of 71
    -----------------> 233765875715625126439327813540757632 ^2 ::== 54646484649093093220269523079688030751196119438048346638859848428552192
t_ten increased 
breaking with xbrk of value 1

increasing the digits 10
-------------------------------------------------------
-------------------------------------------------------
times 10 5464648456 2335319853
main 73923.260588261391975601013205642584311366645287911997499389997468011159753586981 second 48325.147211363981524207958583491496171696832054597820724781490064891897873167181
main 5464648456.0000000000000000000000008271806125530276748714086920699628535658121109 second 2335319853
times of 3.1654447887854868493511245461776400193573968232548608360973966731789050271096795e-05
new times of 3.1654447887854868493511245461776400193573968232548608360973966731789050271096795e-05
using 233531985318574985237805361387412736 * 3.1654447887854868493511245461776400193573968232548608360973966731789050271096795e-05
7392326059414120099787884604498.552734375  with length of 40 and dot length 31 will move 9

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 7392326059414120099787884604498.552734375 ^2 ::== 54646484568693093091606814925687443279849713834988267615813632
 temp fract 0 temp int 54646484568693093091606814925687443279849713834988267615813632
before loop xstp is 0entering tens with lap of value 9
using t_rst as 73923260594141200997878846044985.53125
using for fract 5464648456869309309160681492568745437179246583199553071196667904
getting the part of 5464648456869309309160681492568745437179246583199553071196667904 :: ad 64 and mad 71
    -----------------> 73923260594141200997878846044985.53125 ^2 ::== 5464648456869309309160681492568745437179246583199553071196667904
t_ten increased 
using t_rst as 739232605941412009978788460449855.25
using for fract 546464845686930930916068149256874477800093446452026429291100110848
getting the part of 546464845686930930916068149256874477800093446452026429291100110848 :: ad 66 and mad 71
    -----------------> 739232605941412009978788460449855.25 ^2 ::== 546464845686930930916068149256874477800093446452026429291100110848
t_ten increased 
using t_rst as 7392326059414120099787884604498553
using for fract 54646484568693093091606814925687447130972237328349189362797969932288
getting the part of 54646484568693093091606814925687447130972237328349189362797969932288 :: ad 68 and mad 71
    -----------------> 7392326059414120099787884604498553 ^2 ::== 54646484568693093091606814925687447130972237328349189362797969932288
t_ten increased 
using t_rst as 73923260594141200997878846044985528
using for fract 5464648456869309309160681492568744920789098074228024077499650162032640
getting the part of 5464648456869309309160681492568744920789098074228024077499650162032640 :: ad 70 and mad 71
i push_back a near value of 73923260594141200997878846044985528
stopping with ad 70 and mad of 71
    -----------------> 73923260594141200997878846044985528 ^2 ::== 5464648456869309309160681492568744920789098074228024077499650162032640
t_ten increased 
breaking with xbrk of value 1

increasing the digits 11
-------------------------------------------------------
-------------------------------------------------------
times 11 54646484564 23353198531
main 233765.87553362017598858154077860010340515702347399782409613500089307080997969024 second 152817.5334541164487774392057152481248665625796127071727695170139105229623055493
main 54646484564.000000000000000000000006617444900424221398971269536559702828526496887 second 23353198531.000000000000000000000003308722450212110699485634768279851414263248444
times of 1.001001534001047866947462044759679576851391007262207373996423397885484860725001e-05
new times of 1.001001534001047866947462044759679576851391007262207373996423397885484860725001e-05
using 233531985318574985237805361387412736 * 1.001001534001047866947462044759679576851391007262207373996423397885484860725001e-05
2337658755422037493656610477644.302490234375  with length of 43 and dot length 31 will move 12
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 2337658755422037493656610477644.302490234375 ^2 ::== 5464648456801309309147380539431824430069909823626442331652096
 temp fract 0 temp int 5464648456801309309147380539431824430069909823626442331652096
before loop xstp is 0entering tens with lap of value 10
using t_rst as 23376587554220374936566104776443.0234375
using for fract 546464845680130930914738053943182418248190196655038735182725120
getting the part of 546464845680130930914738053943182418248190196655038735182725120 :: ad 63 and mad 71
    -----------------> 23376587554220374936566104776443.0234375 ^2 ::== 546464845680130930914738053943182418248190196655038735182725120
t_ten increased 
using t_rst as 233765875542203749365661047764430.25
using for fract 54646484568013093091473805394318243092469619893733275014975717376
getting the part of 54646484568013093091473805394318243092469619893733275014975717376 :: ad 65 and mad 71
    -----------------> 233765875542203749365661047764430.25 ^2 ::== 54646484568013093091473805394318243092469619893733275014975717376
t_ten increased 
using t_rst as 2337658755422037493656610477644302.5
using for fract 5464648456801309309147380539431824877154430891620099372020607746048
getting the part of 5464648456801309309147380539431824877154430891620099372020607746048 :: ad 67 and mad 71
    -----------------> 2337658755422037493656610477644302.5 ^2 ::== 5464648456801309309147380539431824877154430891620099372020607746048
t_ten increased 
using t_rst as 23376587554220374936566104776443024
using for fract 546464845680130930914738053943182370888763772128388295265893367152640
getting the part of 546464845680130930914738053943182370888763772128388295265893367152640 :: ad 69 and mad 71
    -----------------> 23376587554220374936566104776443024 ^2 ::== 546464845680130930914738053943182370888763772128388295265893367152640
t_ten increased 
using t_rst as 233765875542203749365661047764430240
using for fract 54646484568013093091473805394318243070402358244960257593721107976814592
getting the part of 54646484568013093091473805394318243070402358244960257593721107976814592 :: ad 71 and mad 71
i push_back a near value of 233765875542203749365661047764430240
stopping with ad 71 and mad of 71
    -----------------> 233765875542203749365661047764430240 ^2 ::== 54646484568013093091473805394318243070402358244960257593721107976814592
t_ten increased 
breaking with xbrk of value 1

increasing the digits 12
-------------------------------------------------------
-------------------------------------------------------
times 12 546464845645 233531985318
main 739232.60591305088887843229961312699791481988863281524357231461186401588747685309 second 483251.47213226365918085224628150882918351369164954455019895043776934073775919387
main 546464845645.0000000000000000000000529395592033937711917701562924776226282119751 second 233531985317.99999999999999999999997353022039830311440411492185376118868589401245
times of 3.1654447886718363057668025832918940692276571375052122685463876439629682545097673e-06
new times of 3.1654447886718363057668025832918940692276571375052122685463876439629682545097673e-06
using 233531985318574985237805361387412736 * 3.1654447886718363057668025832918940692276571375052122685463876439629682545097673e-06
739232605914870972903006517333.40673828125  with length of 41 and dot length 30 will move 11
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 739232605914870972903006517333.40673828125 ^2 ::== 546464845647690930912936737341197533697792347629872706748416
 temp fract 0 temp int 546464845647690930912936737341197533697792347629872706748416
before loop xstp is 0entering tens with lap of value 10
using t_rst as 7392326059148709729030065173334.0673828125
using for fract 54646484564769093091293673734119755536174303512402751748308992
getting the part of 54646484564769093091293673734119755536174303512402751748308992 :: ad 62 and mad 71
    -----------------> 7392326059148709729030065173334.0673828125 ^2 ::== 54646484564769093091293673734119755536174303512402751748308992
t_ten increased 
using t_rst as 73923260591487097290300651733340.671875
using for fract 5464648456476909309129367373411974800949886465729068036163371008
getting the part of 5464648456476909309129367373411974800949886465729068036163371008 :: ad 64 and mad 71
    -----------------> 73923260591487097290300651733340.671875 ^2 ::== 5464648456476909309129367373411974800949886465729068036163371008
t_ten increased 
using t_rst as 739232605914870972903006517333406.75
using for fract 546464845647690930912936737341197510518603052050412439537214029824
getting the part of 546464845647690930912936737341197510518603052050412439537214029824 :: ad 66 and mad 71
    -----------------> 739232605914870972903006517333406.75 ^2 ::== 546464845647690930912936737341197510518603052050412439537214029824
t_ten increased 
using t_rst as 7392326059148709729030065173334067
using for fract 54646484564769093091293673734119742289859356427519620808508847423488
getting the part of 54646484564769093091293673734119742289859356427519620808508847423488 :: ad 68 and mad 71
    -----------------> 7392326059148709729030065173334067 ^2 ::== 54646484564769093091293673734119742289859356427519620808508847423488
t_ten increased 
using t_rst as 73923260591487097290300651733340672
using for fract 5464648456476909309129367373411974852061558666931277504510444248760320
getting the part of 5464648456476909309129367373411974852061558666931277504510444248760320 :: ad 70 and mad 71
i push_back a near value of 73923260591487097290300651733340672
stopping with ad 70 and mad of 71
    -----------------> 73923260591487097290300651733340672 ^2 ::== 5464648456476909309129367373411974852061558666931277504510444248760320
t_ten increased 
breaking with xbrk of value 1

increasing the digits 13
-------------------------------------------------------
-------------------------------------------------------
times 13 5464648456454 2335319853185
main 2337658.7553477517775854903812053893261473764410382936845822499094538216013461351 second 1528175.3345689754326568220073865497432223912944034040759834491840507553206407465
main 5464648456454 second 2335319853185
times of 1.0010015339695596266577543843942582635977315362150567720489057425239615507047358e-06
new times of 1.0010015339695596266577543843942582635977315362150567720489057425239615507047358e-06
using 233531985318574985237805361387412736 * 1.0010015339695596266577543843942582635977315362150567720489057425239615507047358e-06
233765875534850238096617277084.129486083984375  with length of 45 and dot length 30 will move 15
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 233765875534850238096617277084.129486083984375 ^2 ::== 54646484564575093091292921827386150565624266619315105562624
 temp fract 0 temp int 54646484564575093091292921827386150565624266619315105562624
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2337658755348502380966172770841.294921875
using for fract 5464648456457509309129292182738614940505547978927109784469504
getting the part of 5464648456457509309129292182738614940505547978927109784469504 :: ad 61 and mad 71
    -----------------> 2337658755348502380966172770841.294921875 ^2 ::== 5464648456457509309129292182738614940505547978927109784469504
t_ten increased 
using t_rst as 23376587553485023809661727708412.94921875
using for fract 546464845645750930912929218273861461864113776472823831069720576
getting the part of 546464845645750930912929218273861461864113776472823831069720576 :: ad 63 and mad 71
    -----------------> 23376587553485023809661727708412.94921875 ^2 ::== 546464845645750930912929218273861461864113776472823831069720576
t_ten increased 
using t_rst as 233765875534850238096617277084129.5
using for fract 54646484564575093091292921827386154109227629073716142461367091200
getting the part of 54646484564575093091292921827386154109227629073716142461367091200 :: ad 65 and mad 71
    -----------------> 233765875534850238096617277084129.5 ^2 ::== 54646484564575093091292921827386154109227629073716142461367091200
t_ten increased 
using t_rst as 2337658755348502380966172770841294.75
using for fract 5464648456457509309129292182738613910024452237148002874040113954816
getting the part of 5464648456457509309129292182738613910024452237148002874040113954816 :: ad 67 and mad 71
    -----------------> 2337658755348502380966172770841294.75 ^2 ::== 5464648456457509309129292182738613910024452237148002874040113954816
t_ten increased 
using t_rst as 23376587553485023809661727708412948
using for fract 546464845645750930912929218273861435136968521260835129913230193852416
getting the part of 546464845645750930912929218273861435136968521260835129913230193852416 :: ad 69 and mad 71
    -----------------> 23376587553485023809661727708412948 ^2 ::== 546464845645750930912929218273861435136968521260835129913230193852416
t_ten increased 
using t_rst as 233765875534850238096617277084129472
using for fract 54646484564575093091292921827386140855240860556251767183708898824552448
getting the part of 54646484564575093091292921827386140855240860556251767183708898824552448 :: ad 71 and mad 71
i push_back a near value of 233765875534850238096617277084129472
stopping with ad 71 and mad of 71
    -----------------> 233765875534850238096617277084129472 ^2 ::== 54646484564575093091292921827386140855240860556251767183708898824552448
t_ten increased 
breaking with xbrk of value 1

increasing the digits 14
-------------------------------------------------------
-------------------------------------------------------
times 14 54646484564546 23353198531857
main 7392326.0591336202234056614436395911162403043878607508112774104880315917398547754 second 4832514.7213285341423890165649103994513277887395985723097482922305800911999540403
main 54646484564546 second 23353198531857
times of 3.1654447886654424489879454559077605593960515718721079800818858892754138858954182e-07
new times of 3.1654447886654424489879454559077605593960515718721079800818858892754138858954182e-07
using 233531985318574985237805361387412736 * 3.1654447886654424489879454559077605593960515718721079800818858892754138858954182e-07
73923260591337780283559738351.50551605224609375  with length of 46 and dot length 29 will move 17
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 73923260591337780283559738351.50551605224609375 ^2 ::== 5464648456454833309129290918068199508981529794311303987200
 temp fract 0 temp int 5464648456454833309129290918068199508981529794311303987200
before loop xstp is 0entering tens with lap of value 10
using t_rst as 739232605913377802835597383515.05517578125
using for fract 546464845645483330912929091806820021015850517079622531678208
getting the part of 546464845645483330912929091806820021015850517079622531678208 :: ad 60 and mad 71
    -----------------> 739232605913377802835597383515.05517578125 ^2 ::== 546464845645483330912929091806820021015850517079622531678208
t_ten increased 
using t_rst as 7392326059133778028355973835150.5517578125
using for fract 54646484564548333091292909180682004267980120457377734241288192
getting the part of 54646484564548333091292909180682004267980120457377734241288192 :: ad 62 and mad 71
    -----------------> 7392326059133778028355973835150.5517578125 ^2 ::== 54646484564548333091292909180682004267980120457377734241288192
t_ten increased 
using t_rst as 73923260591337780283559738351505.515625
using for fract 5464648456454833309129290918068199991043118217283916659637092352
getting the part of 5464648456454833309129290918068199991043118217283916659637092352 :: ad 64 and mad 71
    -----------------> 73923260591337780283559738351505.515625 ^2 ::== 5464648456454833309129290918068199991043118217283916659637092352
t_ten increased 
using t_rst as 739232605913377802835597383515055.125
using for fract 546464845645483330912929091806819930651179409404003985141736144896
getting the part of 546464845645483330912929091806819930651179409404003985141736144896 :: ad 66 and mad 71
    -----------------> 739232605913377802835597383515055.125 ^2 ::== 546464845645483330912929091806819930651179409404003985141736144896
t_ten increased 
using t_rst as 7392326059133778028355973835150552
using for fract 54646484564548333091292909180682005072304426302189289490946375811072
getting the part of 54646484564548333091292909180682005072304426302189289490946375811072 :: ad 68 and mad 71
    -----------------> 7392326059133778028355973835150552 ^2 ::== 54646484564548333091292909180682005072304426302189289490946375811072
t_ten increased 
using t_rst as 73923260591337780283559738351505520
using for fract 5464648456454833309129290918068200424153692893661686892606696313585664
getting the part of 5464648456454833309129290918068200424153692893661686892606696313585664 :: ad 70 and mad 71
i push_back a near value of 73923260591337780283559738351505520
stopping with ad 70 and mad of 71
    -----------------> 73923260591337780283559738351505520 ^2 ::== 5464648456454833309129290918068200424153692893661686892606696313585664
t_ten increased 
breaking with xbrk of value 1

increasing the digits 15
-------------------------------------------------------
-------------------------------------------------------
times 15 546464845645465 233531985318574
main 23376587.553478908055763194545893974882067806556637610398974302938768232706934214 second 15281753.345692175514710903516969265965395845412333898204887416838460012513678521
main 546464845645465.0000000000000000000542101086242752217003726400434970855712890625 second 233531985318574
times of 1.001001533969301968956824222602691547227501125260611538283517528338070121144587e-07
new times of 1.001001533969301968956824222602691547227501125260611538283517528338070121144587e-07
using 233531985318574985237805361387412736 * 1.001001533969301968956824222602691547227501125260611538283517528338070121144587e-07
23376587553479006678218643675.630352020263671875  with length of 47 and dot length 29 will move 18
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 23376587553479006678218643675.630352020263671875 ^2 ::== 546464845645469610912929091318343407032296809163091083264
 temp fract 0 temp int 546464845645469610912929091318343407032296809163091083264
before loop xstp is 0entering tens with lap of value 10
using t_rst as 233765875534790066782186436756.30352783203125
using for fract 54646484564546961091292909131834337378683676976078877884416
getting the part of 54646484564546961091292909131834337378683676976078877884416 :: ad 59 and mad 71
    -----------------> 233765875534790066782186436756.30352783203125 ^2 ::== 54646484564546961091292909131834337378683676976078877884416
t_ten increased 
using t_rst as 2337658755347900667821864367563.03515625
using for fract 5464648456454696109129290913183433312326479193258418291867648
getting the part of 5464648456454696109129290913183433312326479193258418291867648 :: ad 61 and mad 71
    -----------------> 2337658755347900667821864367563.03515625 ^2 ::== 5464648456454696109129290913183433312326479193258418291867648
t_ten increased 
using t_rst as 23376587553479006678218643675630.3515625
using for fract 546464845645469610912929091318343341136168233608884028379758592
getting the part of 546464845645469610912929091318343341136168233608884028379758592 :: ad 63 and mad 71
    -----------------> 23376587553479006678218643675630.3515625 ^2 ::== 546464845645469610912929091318343341136168233608884028379758592
t_ten increased 
using t_rst as 233765875534790066782186436756303.53125
using for fract 54646484564546961091292909131834343937908975129666264437425700864
getting the part of 54646484564546961091292909131834343937908975129666264437425700864 :: ad 65 and mad 71
    -----------------> 233765875534790066782186436756303.53125 ^2 ::== 54646484564546961091292909131834343937908975129666264437425700864
t_ten increased 
using t_rst as 2337658755347900667821864367563035.25
using for fract 5464648456454696109129290913183434190966801476449922204270057226240
getting the part of 5464648456454696109129290913183434190966801476449922204270057226240 :: ad 67 and mad 71
    -----------------> 2337658755347900667821864367563035.25 ^2 ::== 5464648456454696109129290913183434190966801476449922204270057226240
t_ten increased 
using t_rst as 23376587553479006678218643675630352
using for fract 546464845645469610912929091318343387942898996436026449244027747303424
getting the part of 546464845645469610912929091318343387942898996436026449244027747303424 :: ad 69 and mad 71
    -----------------> 23376587553479006678218643675630352 ^2 ::== 546464845645469610912929091318343387942898996436026449244027747303424
t_ten increased 
using t_rst as 233765875534790066782186436756303520
using for fract 54646484564546961091292909131834339126596898589831613150354539800428544
getting the part of 54646484564546961091292909131834339126596898589831613150354539800428544 :: ad 71 and mad 71
i push_back a near value of 233765875534790066782186436756303520
stopping with ad 71 and mad of 71
    -----------------> 233765875534790066782186436756303520 ^2 ::== 54646484564546961091292909131834339126596898589831613150354539800428544
t_ten increased 
breaking with xbrk of value 1

increasing the digits 16
-------------------------------------------------------
-------------------------------------------------------
times 16 5464648456454654 2335319853185749
main 73923260.591336567477686075828555326691282479473731059638197393724112771451473236 second 48325147.21328584840630848851428423931990130454855274493713990224819099239539355
main 5464648456454653.999999999999999999132638262011596452794037759304046630859375 second 2335319853185749
times of 3.1654447886653916711762736619557233300959929360120645418364339193723298250070022e-08
new times of 3.1654447886653916711762736619557233300959929360120645418364339193723298250070022e-08
using 233531985318574985237805361387412736 * 3.1654447886653916711762736619557233300959929360120645418364339193723298250070022e-08
7392326059133659445924275367.64321136474609375  with length of 45 and dot length 28 will move 17
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 7392326059133659445924275367.64321136474609375 ^2 ::== 54646484564546579891292909129326220136787387603704872960
 temp fract 0 temp int 54646484564546579891292909129326220136787387603704872960
before loop xstp is 0entering tens with lap of value 10
using t_rst as 73923260591336594459242753676.4321136474609375
using for fract 5464648456454657989129290912932621522552624541927385071616
getting the part of 5464648456454657989129290912932621522552624541927385071616 :: ad 58 and mad 71
    -----------------> 73923260591336594459242753676.4321136474609375 ^2 ::== 5464648456454657989129290912932621522552624541927385071616
t_ten increased 
using t_rst as 739232605913365944592427536764.3211669921875
using for fract 546464845645465798912929091293262227208663270299747338944512
getting the part of 546464845645465798912929091293262227208663270299747338944512 :: ad 60 and mad 71
    -----------------> 739232605913365944592427536764.3211669921875 ^2 ::== 546464845645465798912929091293262227208663270299747338944512
t_ten increased 
using t_rst as 7392326059133659445924275367643.2109375
using for fract 54646484564546579891292909129326207556100845784066366380179456
getting the part of 54646484564546579891292909129326207556100845784066366380179456 :: ad 62 and mad 71
    -----------------> 7392326059133659445924275367643.2109375 ^2 ::== 54646484564546579891292909129326207556100845784066366380179456
t_ten increased 
using t_rst as 73923260591336594459242753676432.1171875
using for fract 5464648456454657989129290912932622617471903663618570086300778496
getting the part of 5464648456454657989129290912932622617471903663618570086300778496 :: ad 64 and mad 71
    -----------------> 73923260591336594459242753676432.1171875 ^2 ::== 5464648456454657989129290912932622617471903663618570086300778496
t_ten increased 
using t_rst as 739232605913365944592427536764321.125
using for fract 546464845645465798912929091293262178082250751298716509847666294784
getting the part of 546464845645465798912929091293262178082250751298716509847666294784 :: ad 66 and mad 71
    -----------------> 739232605913365944592427536764321.125 ^2 ::== 546464845645465798912929091293262178082250751298716509847666294784
t_ten increased 
using t_rst as 7392326059133659445924275367643211
using for fract 54646484564546579891292909129326210668816894644483661755334176800768
getting the part of 54646484564546579891292909129326210668816894644483661755334176800768 :: ad 68 and mad 71
    -----------------> 7392326059133659445924275367643211 ^2 ::== 54646484564546579891292909129326210668816894644483661755334176800768
t_ten increased 
using t_rst as 73923260591336594459242753676432112
using for fract 5464648456454657989129290912932621233035188937562850288509300215119872
getting the part of 5464648456454657989129290912932621233035188937562850288509300215119872 :: ad 70 and mad 71
i push_back a near value of 73923260591336594459242753676432112
stopping with ad 70 and mad of 71
    -----------------> 73923260591336594459242753676432112 ^2 ::== 5464648456454657989129290912932621233035188937562850288509300215119872
t_ten increased 
breaking with xbrk of value 1

increasing the digits 17
-------------------------------------------------------
-------------------------------------------------------
times 17 54646484564546546 23353198531857498
main 233765875.53478917894667160910792658454496903771982832531683982324466342106461525 second 152817533.45692207579094414727560969833676112977316301211327953524232725612819195
main 54646484564546546 second 23353198531857497.9999999999999999965305530480463858111761510372161865234375
times of 1.0010015339692981896352789436137899078143311578648774569326179017189998677718617e-08
new times of 1.0010015339692981896352789436137899078143311578648774569326179017189998677718617e-08
using 233531985318574985237805361387412736 * 1.0010015339692981896352789436137899078143311578648774569326179017189998677718617e-08
2337658755347891841897228104.8934104442596435546875  with length of 50 and dot length 28 will move 22
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 2337658755347891841897228104.8934104442596435546875 ^2 ::== 5464648456454654845129290912930924359297384277920972800
 temp fract 0 temp int 5464648456454654845129290912930924359297384277920972800
before loop xstp is 0entering tens with lap of value 10
using t_rst as 23376587553478918418972281048.93410491943359375
using for fract 546464845645465484512929091293092454819204359270678134784
getting the part of 546464845645465484512929091293092454819204359270678134784 :: ad 57 and mad 71
    -----------------> 23376587553478918418972281048.93410491943359375 ^2 ::== 546464845645465484512929091293092454819204359270678134784
t_ten increased 
using t_rst as 233765875534789184189722810489.341033935546875
using for fract 54646484564546548451292909129309238228365518239292765241344
getting the part of 54646484564546548451292909129309238228365518239292765241344 :: ad 59 and mad 71
    -----------------> 233765875534789184189722810489.341033935546875 ^2 ::== 54646484564546548451292909129309238228365518239292765241344
t_ten increased 
using t_rst as 2337658755347891841897228104893.410400390625
using for fract 5464648456454654845129290912930924287064066555946879611305984
getting the part of 5464648456454654845129290912930924287064066555946879611305984 :: ad 61 and mad 71
    -----------------> 2337658755347891841897228104893.410400390625 ^2 ::== 5464648456454654845129290912930924287064066555946879611305984
t_ten increased 
using t_rst as 23376587553478918418972281048934.10546875
using for fract 546464845645465484512929091293092502982809012717504455078051840
getting the part of 546464845645465484512929091293092502982809012717504455078051840 :: ad 63 and mad 71
    -----------------> 23376587553478918418972281048934.10546875 ^2 ::== 546464845645465484512929091293092502982809012717504455078051840
t_ten increased 
using t_rst as 233765875534789184189722810489341.03125
using for fract 54646484564546548451292909129309236037211648704169678669894123520
getting the part of 54646484564546548451292909129309236037211648704169678669894123520 :: ad 65 and mad 71
    -----------------> 233765875534789184189722810489341.03125 ^2 ::== 54646484564546548451292909129309236037211648704169678669894123520
t_ten increased 
using t_rst as 2337658755347891841897228104893410.5
using for fract 5464648456454654845129290912930924617841645053000489064351976652800
getting the part of 5464648456454654845129290912930924617841645053000489064351976652800 :: ad 67 and mad 71
    -----------------> 2337658755347891841897228104893410.5 ^2 ::== 5464648456454654845129290912930924617841645053000489064351976652800
t_ten increased 
using t_rst as 23376587553478918418972281048934104
using for fract 546464845645465484512929091293092402072750632149531178334489879248896
getting the part of 546464845645465484512929091293092402072750632149531178334489879248896 :: ad 69 and mad 71
    -----------------> 23376587553478918418972281048934104 ^2 ::== 546464845645465484512929091293092402072750632149531178334489879248896
t_ten increased 
using t_rst as 233765875534789184189722810489341056
using for fract 54646484564546548451292909129309247850336038978219387030339584536870912
getting the part of 54646484564546548451292909129309247850336038978219387030339584536870912 :: ad 71 and mad 71
i push_back a near value of 233765875534789184189722810489341056
stopping with ad 71 and mad of 71
    -----------------> 233765875534789184189722810489341056 ^2 ::== 54646484564546548451292909129309247850336038978219387030339584536870912
t_ten increased 
breaking with xbrk of value 1

increasing the digits 18
-------------------------------------------------------
-------------------------------------------------------
times 18 546464845645465465 233531985318574985
main 739232605.91336571874137171197153665906283502218449867060545699359863647259771824 second 483251472.13285857200901459421082270057731223920720591696875700904456607531756163
main 546464845645465465 second 233531985318574985
times of 3.1654447886653907072899101910066585484624205794319494504619559747576438691259536e-09
new times of 3.1654447886653907072899101910066585484624205794319494504619559747576438691259536e-09
using 233531985318574985237805361387412736 * 3.1654447886653907072899101910066585484624205794319494504619559747576438691259536e-09
739232605913365719494131453.89201223850250244140625  with length of 50 and dot length 27 will move 23
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 739232605913365719494131453.89201223850250244140625 ^2 ::== 546464845645465466112929091293091611117824968958672896
 temp fract 0 temp int 546464845645465466112929091293091611117824968958672896
before loop xstp is 0entering tens with lap of value 10
using t_rst as 7392326059133657194941314538.9201221466064453125
using for fract 54646484564546546611292909129309158455451350281691856896
getting the part of 54646484564546546611292909129309158455451350281691856896 :: ad 56 and mad 71
    -----------------> 7392326059133657194941314538.9201221466064453125 ^2 ::== 54646484564546546611292909129309158455451350281691856896
t_ten increased 
using t_rst as 73923260591336571949413145389.20122528076171875
using for fract 5464648456454654661129290912930916298892317383655126204416
getting the part of 5464648456454654661129290912930916298892317383655126204416 :: ad 58 and mad 71
    -----------------> 73923260591336571949413145389.20122528076171875 ^2 ::== 5464648456454654661129290912930916298892317383655126204416
t_ten increased 
using t_rst as 739232605913365719494131453892.01220703125
using for fract 546464845645465466112929091293091571860792396863312234545152
getting the part of 546464845645465466112929091293091571860792396863312234545152 :: ad 60 and mad 71
    -----------------> 739232605913365719494131453892.01220703125 ^2 ::== 546464845645465466112929091293091571860792396863312234545152
t_ten increased 
using t_rst as 7392326059133657194941314538920.1220703125
using for fract 54646484564546546611292909129309155329169180758260811105828864
getting the part of 54646484564546546611292909129309155329169180758260811105828864 :: ad 62 and mad 71
    -----------------> 7392326059133657194941314538920.1220703125 ^2 ::== 54646484564546546611292909129309155329169180758260811105828864
t_ten increased 
using t_rst as 73923260591336571949413145389201.2265625
using for fract 5464648456454654661129290912930916245970380704205119452478439424
getting the part of 5464648456454654661129290912930916245970380704205119452478439424 :: ad 64 and mad 71
    -----------------> 73923260591336571949413145389201.2265625 ^2 ::== 5464648456454654661129290912930916245970380704205119452478439424
t_ten increased 
using t_rst as 739232605913365719494131453892012.25
using for fract 546464845645465466112929091293091655020652475898017581168720871424
getting the part of 546464845645465466112929091293091655020652475898017581168720871424 :: ad 66 and mad 71
    -----------------> 739232605913365719494131453892012.25 ^2 ::== 546464845645465466112929091293091655020652475898017581168720871424
t_ten increased 
using t_rst as 7392326059133657194941314538920122
using for fract 54646484564546546611292909129309153819397315886439593923255346397184
getting the part of 54646484564546546611292909129309153819397315886439593923255346397184 :: ad 68 and mad 71
    -----------------> 7392326059133657194941314538920122 ^2 ::== 54646484564546546611292909129309153819397315886439593923255346397184
t_ten increased 
using t_rst as 73923260591336571949413145389201224
using for fract 5464648456454654661129290912930916461937478163888106126668771117498368
getting the part of 5464648456454654661129290912930916461937478163888106126668771117498368 :: ad 70 and mad 71
i push_back a near value of 73923260591336571949413145389201224
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571949413145389201224 ^2 ::== 5464648456454654661129290912930916461937478163888106126668771117498368
t_ten increased 
breaking with xbrk of value 1

increasing the digits 19
-------------------------------------------------------
-------------------------------------------------------
times 19 5464648456454654654 2335319853185749852
main 2337658755.3478918010167337907250140461711842670674069144531870279024587944149971 second 1528175334.5692207749231959889086379798335730857000713811544301279354840517044067
main 5464648456454654654.00000000000000088817841970012523233890533447265625 second 2335319853185749852
times of 1.0010015339692981722920178003890335183212464257503777346604567275406261124621818e-09
new times of 1.0010015339692981722920178003890335183212464257503777346604567275406261124621818e-09
using 233531985318574985237805361387412736 * 1.0010015339692981722920178003890335183212464257503777346604567275406261124621818e-09
233765875534789180139516603.8135652244091033935546875  with length of 52 and dot length 27 will move 25
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 233765875534789180139516603.8135652244091033935546875 ^2 ::== 54646484564546546557692909129309166334793125204066304
 temp fract 0 temp int 54646484564546546557692909129309166334793125204066304
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2337658755347891801395166038.1356523036956787109375
using for fract 5464648456454654655769290912930916338331407341053804544
getting the part of 5464648456454654655769290912930916338331407341053804544 :: ad 55 and mad 71
    -----------------> 2337658755347891801395166038.1356523036956787109375 ^2 ::== 5464648456454654655769290912930916338331407341053804544
t_ten increased 
using t_rst as 23376587553478918013951660381.3565216064453125
using for fract 546464845645465465576929091293091610221308319757154385920
getting the part of 546464845645465465576929091293091610221308319757154385920 :: ad 57 and mad 71
    -----------------> 23376587553478918013951660381.3565216064453125 ^2 ::== 546464845645465465576929091293091610221308319757154385920
t_ten increased 
using t_rst as 233765875534789180139516603813.565216064453125
using for fract 54646484564546546557692909129309157395353373131827914473472
getting the part of 54646484564546546557692909129309157395353373131827914473472 :: ad 59 and mad 71
    -----------------> 233765875534789180139516603813.565216064453125 ^2 ::== 54646484564546546557692909129309157395353373131827914473472
t_ten increased 
using t_rst as 2337658755347891801395166038135.65234375
using for fract 5464648456454654655769290912930916938789750370894932755873792
getting the part of 5464648456454654655769290912930916938789750370894932755873792 :: ad 61 and mad 71
    -----------------> 2337658755347891801395166038135.65234375 ^2 ::== 5464648456454654655769290912930916938789750370894932755873792
t_ten increased 
using t_rst as 23376587553478918013951660381356.5234375
using for fract 546464845645465465576929091293091691403094958518732725789130752
getting the part of 546464845645465465576929091293091691403094958518732725789130752 :: ad 63 and mad 71
    -----------------> 23376587553478918013951660381356.5234375 ^2 ::== 546464845645465465576929091293091691403094958518732725789130752
t_ten increased 
using t_rst as 233765875534789180139516603813565.21875
using for fract 54646484564546546557692909129309158365279393911923359856935829504
getting the part of 54646484564546546557692909129309158365279393911923359856935829504 :: ad 65 and mad 71
    -----------------> 233765875534789180139516603813565.21875 ^2 ::== 54646484564546546557692909129309158365279393911923359856935829504
t_ten increased 
using t_rst as 2337658755347891801395166038135652.25
using for fract 5464648456454654655769290912930916120481673842315721920955100954624
getting the part of 5464648456454654655769290912930916120481673842315721920955100954624 :: ad 67 and mad 71
    -----------------> 2337658755347891801395166038135652.25 ^2 ::== 5464648456454654655769290912930916120481673842315721920955100954624
t_ten increased 
using t_rst as 23376587553478918013951660381356524
using for fract 546464845645465465576929091293091671759581257382089920196217881493504
getting the part of 546464845645465465576929091293091671759581257382089920196217881493504 :: ad 69 and mad 71
    -----------------> 23376587553478918013951660381356524 ^2 ::== 546464845645465465576929091293091671759581257382089920196217881493504
t_ten increased 
using t_rst as 233765875534789180139516603813565216
using for fract 54646484564546546557692909129309157539055156297568913467020601116852224
getting the part of 54646484564546546557692909129309157539055156297568913467020601116852224 :: ad 71 and mad 71
i push_back a near value of 233765875534789180139516603813565216
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180139516603813565216 ^2 ::== 54646484564546546557692909129309157539055156297568913467020601116852224
t_ten increased 
breaking with xbrk of value 1

increasing the digits 20
-------------------------------------------------------
-------------------------------------------------------
times 20 54646484564546546545 23353198531857498523
main 7392326059.1336571904574140318936272394003319922452244217225825195782817900180817 second 4832514721.3285857224698593342359484890375177551426894018149482690205331891775131
main 54646484564546546545.00000000000000710542735760100185871124267578125 second 23353198531857498523
times of 3.1654447886653907054756721559159066311449642835820521764954648681043917044386016e-10
new times of 3.1654447886653907054756721559159066311449642835820521764954648681043917044386016e-10
using 233531985318574985237805361387412736 * 3.1654447886653907054756721559159066311449642835820521764954648681043917044386016e-10
73923260591336571907044884.371679842472076416015625  with length of 50 and dot length 26 will move 24
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 73923260591336571907044884.371679842472076416015625 ^2 ::== 5464648456454654654865290912930916525881979081588736
 temp fract 0 temp int 5464648456454654654865290912930916525881979081588736
before loop xstp is 0entering tens with lap of value 10
using t_rst as 739232605913365719070448843.71679842472076416015625
using for fract 546464845645465465486529091293091664117412954227343360
getting the part of 546464845645465465486529091293091664117412954227343360 :: ad 54 and mad 71
    -----------------> 739232605913365719070448843.71679842472076416015625 ^2 ::== 546464845645465465486529091293091664117412954227343360
t_ten increased 
using t_rst as 7392326059133657190704488437.1679840087890625
using for fract 54646484564546546548652909129309164640853864346617380864
getting the part of 54646484564546546548652909129309164640853864346617380864 :: ad 56 and mad 71
    -----------------> 7392326059133657190704488437.1679840087890625 ^2 ::== 54646484564546546548652909129309164640853864346617380864
t_ten increased 
using t_rst as 73923260591336571907044884371.679840087890625
using for fract 5464648456454654654865290912930916124074999668047282700288
getting the part of 5464648456454654654865290912930916124074999668047282700288 :: ad 58 and mad 71
    -----------------> 73923260591336571907044884371.679840087890625 ^2 ::== 5464648456454654654865290912930916124074999668047282700288
t_ten increased 
using t_rst as 739232605913365719070448843716.7984619140625
using for fract 546464845645465465486529091293091677689494225994703704162304
getting the part of 546464845645465465486529091293091677689494225994703704162304 :: ad 60 and mad 71
    -----------------> 739232605913365719070448843716.7984619140625 ^2 ::== 546464845645465465486529091293091677689494225994703704162304
t_ten increased 
using t_rst as 7392326059133657190704488437167.984375
using for fract 54646484564546546548652909129309164983584334207364751893200896
getting the part of 54646484564546546548652909129309164983584334207364751893200896 :: ad 62 and mad 71
    -----------------> 7392326059133657190704488437167.984375 ^2 ::== 54646484564546546548652909129309164983584334207364751893200896
t_ten increased 
using t_rst as 73923260591336571907044884371679.84375
using for fract 5464648456454654654865290912930916815271083477793825563495890944
getting the part of 5464648456454654654865290912930916815271083477793825563495890944 :: ad 64 and mad 71
    -----------------> 73923260591336571907044884371679.84375 ^2 ::== 5464648456454654654865290912930916815271083477793825563495890944
t_ten increased 
using t_rst as 739232605913365719070448843716798.375
using for fract 546464845645465465486529091293091577579759129064571633619926253568
getting the part of 546464845645465465486529091293091577579759129064571633619926253568 :: ad 66 and mad 71
    -----------------> 739232605913365719070448843716798.375 ^2 ::== 546464845645465465486529091293091577579759129064571633619926253568
t_ten increased 
using t_rst as 7392326059133657190704488437167984
using for fract 54646484564546546548652909129309161003161449490724431193552831119360
getting the part of 54646484564546546548652909129309161003161449490724431193552831119360 :: ad 68 and mad 71
    -----------------> 7392326059133657190704488437167984 ^2 ::== 54646484564546546548652909129309161003161449490724431193552831119360
t_ten increased 
using t_rst as 73923260591336571907044884371679840
using for fract 5464648456454654654865290912930916100316144949072443119355283111936000
getting the part of 5464648456454654654865290912930916100316144949072443119355283111936000 :: ad 70 and mad 71
i push_back a near value of 73923260591336571907044884371679840
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571907044884371679840 ^2 ::== 5464648456454654654865290912930916100316144949072443119355283111936000
t_ten increased 
breaking with xbrk of value 1

increasing the digits 21
-------------------------------------------------------
-------------------------------------------------------
times 21 546464845645465465456 233531985318574985237
main 23376587553.478918011365117520546734886418749799381899823202957122703082859516144 second 15281753345.692207750442553960428002426900924014697286112962615334254223853349686
main 546464845645465465455.99999999999994315658113919198513031005859375 second 233531985318574985237
times of 1.0010015339692981721847123253393814249990701265391207578065888333762859819905979e-10
new times of 1.0010015339692981721847123253393814249990701265391207578065888333762859819905979e-10
using 233531985318574985237805361387412736 * 1.0010015339692981721847123253393814249990701265391207578065888333762859819905979e-10
23376587553478918011445734.3189667165279388427734375  with length of 51 and dot length 26 will move 25
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 23376587553478918011445734.3189667165279388427734375 ^2 ::== 546464845645465465459769091293091671522894736785408
 temp fract 0 temp int 546464845645465465459769091293091671522894736785408
before loop xstp is 0entering tens with lap of value 10
using t_rst as 233765875534789180114457343.189667165279388427734375
using for fract 54646484564546546545976909129309166287598345223405568
getting the part of 54646484564546546545976909129309166287598345223405568 :: ad 53 and mad 71
    -----------------> 233765875534789180114457343.189667165279388427734375 ^2 ::== 54646484564546546545976909129309166287598345223405568
t_ten increased 
using t_rst as 2337658755347891801144573431.896671772003173828125
using for fract 5464648456454654654597690912930917255949133028465311744
getting the part of 5464648456454654654597690912930917255949133028465311744 :: ad 55 and mad 71
    -----------------> 2337658755347891801144573431.896671772003173828125 ^2 ::== 5464648456454654654597690912930917255949133028465311744
t_ten increased 
using t_rst as 23376587553478918011445734318.966716766357421875
using for fract 546464845645465465459769091293091727956096544281353781248
getting the part of 546464845645465465459769091293091727956096544281353781248 :: ad 57 and mad 71
    -----------------> 23376587553478918011445734318.966716766357421875 ^2 ::== 546464845645465465459769091293091727956096544281353781248
t_ten increased 
using t_rst as 233765875534789180114457343189.66717529296875
using for fract 54646484564546546545976909129309177026850023079337489596416
getting the part of 54646484564546546545976909129309177026850023079337489596416 :: ad 59 and mad 71
    -----------------> 233765875534789180114457343189.66717529296875 ^2 ::== 54646484564546546545976909129309177026850023079337489596416
t_ten increased 
using t_rst as 2337658755347891801144573431896.671630859375
using for fract 5464648456454654654597690912930916851601225299234809966493696
getting the part of 5464648456454654654597690912930916851601225299234809966493696 :: ad 61 and mad 71
    -----------------> 2337658755347891801144573431896.671630859375 ^2 ::== 5464648456454654654597690912930916851601225299234809966493696
t_ten increased 
using t_rst as 23376587553478918011445734318966.71484375
using for fract 546464845645465465459769091293091603456079937088382853307170816
getting the part of 546464845645465465459769091293091603456079937088382853307170816 :: ad 63 and mad 71
    -----------------> 23376587553478918011445734318966.71484375 ^2 ::== 546464845645465465459769091293091603456079937088382853307170816
t_ten increased 
using t_rst as 233765875534789180114457343189667.15625
using for fract 54646484564546546545976909129309166366948344792927942440057307136
getting the part of 54646484564546546545976909129309166366948344792927942440057307136 :: ad 65 and mad 71
    -----------------> 233765875534789180114457343189667.15625 ^2 ::== 54646484564546546545976909129309166366948344792927942440057307136
t_ten increased 
using t_rst as 2337658755347891801144573431896671.75
using for fract 5464648456454654654597690912930917691380133869179656289262797586432
getting the part of 5464648456454654654597690912930917691380133869179656289262797586432 :: ad 67 and mad 71
    -----------------> 2337658755347891801144573431896671.75 ^2 ::== 5464648456454654654597690912930917691380133869179656289262797586432
t_ten increased 
using t_rst as 23376587553478918011445734318966716
using for fract 546464845645465465459769091293091626349849777210205844337630705090560
getting the part of 546464845645465465459769091293091626349849777210205844337630705090560 :: ad 69 and mad 71
    -----------------> 23376587553478918011445734318966716 ^2 ::== 546464845645465465459769091293091626349849777210205844337630705090560
t_ten increased 
using t_rst as 233765875534789180114457343189667168
using for fract 54646484564546546545976909129309169613431955591828917178750136980865024
getting the part of 54646484564546546545976909129309169613431955591828917178750136980865024 :: ad 71 and mad 71
i push_back a near value of 233765875534789180114457343189667168
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180114457343189667168 ^2 ::== 54646484564546546545976909129309169613431955591828917178750136980865024
t_ten increased 
breaking with xbrk of value 1

increasing the digits 22
-------------------------------------------------------
-------------------------------------------------------
times 22 5464648456454654654564 2335319853185749852378
main 73923260591.336571905007021657557177884067742268392464666248997673392295837402344 second 48325147213.285857225505626579689756374451440603876029022956117842113599181175232
main 5464648456454654654564 second 2335319853185749852378
times of 3.1654447886653907053884821466432819664806426256990382878363172663666174370148523e-11
new times of 3.1654447886653907053884821466432819664806426256990382878363172663666174370148523e-11
using 233531985318574985237805361387412736 * 3.1654447886653907053884821466432819664806426256990382878363172663666174370148523e-11
7392326059133657190500871.87751417420804500579833984375  with length of 54 and dot length 25 will move 29
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 7392326059133657190500871.87751417420804500579833984375 ^2 ::== 54646484564546546545642509129309156656306163023872
 temp fract 0 temp int 54646484564546546545642509129309156656306163023872
before loop xstp is 0entering tens with lap of value 10
using t_rst as 73923260591336571905008718.7751417458057403564453125
using for fract 5464648456454654654564250912930916530321744757522432
getting the part of 5464648456454654654564250912930916530321744757522432 :: ad 52 and mad 71
    -----------------> 73923260591336571905008718.7751417458057403564453125 ^2 ::== 5464648456454654654564250912930916530321744757522432
t_ten increased 
using t_rst as 739232605913365719050087187.7514173984527587890625
using for fract 546464845645465465456425091293091540045867024281239552
getting the part of 546464845645465465456425091293091540045867024281239552 :: ad 54 and mad 71
    -----------------> 739232605913365719050087187.7514173984527587890625 ^2 ::== 546464845645465465456425091293091540045867024281239552
t_ten increased 
using t_rst as 7392326059133657190500871877.51417446136474609375
using for fract 54646484564546546545642509129309166695946625140295467008
getting the part of 54646484564546546545642509129309166695946625140295467008 :: ad 56 and mad 71
    -----------------> 7392326059133657190500871877.51417446136474609375 ^2 ::== 54646484564546546545642509129309166695946625140295467008
t_ten increased 
using t_rst as 73923260591336571905008718775.1417388916015625
using for fract 5464648456454654654564250912930915460668842899400371994624
getting the part of 5464648456454654654564250912930915460668842899400371994624 :: ad 58 and mad 71
    -----------------> 73923260591336571905008718775.1417388916015625 ^2 ::== 5464648456454654654564250912930915460668842899400371994624
t_ten increased 
using t_rst as 739232605913365719050087187751.41748046875
using for fract 546464845645465465456425091293091708062944118300346610089984
getting the part of 546464845645465465456425091293091708062944118300346610089984 :: ad 60 and mad 71
    -----------------> 739232605913365719050087187751.41748046875 ^2 ::== 546464845645465465456425091293091708062944118300346610089984
t_ten increased 
using t_rst as 7392326059133657190500871877514.173828125
using for fract 54646484564546546545642509129309152546678832370675606246916096
getting the part of 54646484564546546545642509129309152546678832370675606246916096 :: ad 62 and mad 71
    -----------------> 7392326059133657190500871877514.173828125 ^2 ::== 54646484564546546545642509129309152546678832370675606246916096
t_ten increased 
using t_rst as 73923260591336571905008718775141.7421875
using for fract 5464648456454654654564250912930916046949508379710936560131112960
getting the part of 5464648456454654654564250912930916046949508379710936560131112960 :: ad 64 and mad 71
    -----------------> 73923260591336571905008718775141.7421875 ^2 ::== 5464648456454654654564250912930916046949508379710936560131112960
t_ten increased 
using t_rst as 739232605913365719050087187751417.375
using for fract 546464845645465465456425091293091531171216024733788369204325384192
getting the part of 546464845645465465456425091293091531171216024733788369204325384192 :: ad 66 and mad 71
    -----------------> 739232605913365719050087187751417.375 ^2 ::== 546464845645465465456425091293091531171216024733788369204325384192
t_ten increased 
using t_rst as 7392326059133657190500871877514174
using for fract 54646484564546546545642509129309158309418461008206465450928867639296
getting the part of 54646484564546546545642509129309158309418461008206465450928867639296 :: ad 68 and mad 71
    -----------------> 7392326059133657190500871877514174 ^2 ::== 54646484564546546545642509129309158309418461008206465450928867639296
t_ten increased 
using t_rst as 73923260591336571905008718775141744
using for fract 5464648456454654654564250912930916121710470178770993742800681200254976
getting the part of 5464648456454654654564250912930916121710470178770993742800681200254976 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905008718775141744
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905008718775141744 ^2 ::== 5464648456454654654564250912930916121710470178770993742800681200254976
t_ten increased 
breaking with xbrk of value 1

increasing the digits 23
-------------------------------------------------------
-------------------------------------------------------
times 23 54646484564546546545646 23353198531857498523780
main 233765875534.7891801137495642451309969326976459860767398879488609964028000831604 second 152817533456.92207750468728967375928714081715579370390756253073050174862146377563
main 54646484564546546545646 second 23353198531857498523779.99999999999636202119290828704833984375
times of 1.0010015339692981721817045481111206208150636537301549599060078260180531686192462e-11
new times of 1.0010015339692981721817045481111206208150636537301549599060078260180531686192462e-11
using 233531985318574985237805361387412736 * 1.0010015339692981721817045481111206208150636537301549599060078260180531686192462e-11
2337658755347891801137549.310021554119884967803955078125  with length of 55 and dot length 25 will move 30
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 2337658755347891801137549.310021554119884967803955078125 ^2 ::== 5464648456454654654564850912930918620960917553152
 temp fract 0 temp int 5464648456454654654564850912930918620960917553152
before loop xstp is 0entering tens with lap of value 10
using t_rst as 23376587553478918011375493.10021553933620452880859375
using for fract 546464845645465465456485091293091792290297531072512
getting the part of 546464845645465465456485091293091792290297531072512 :: ad 51 and mad 71
    -----------------> 23376587553478918011375493.10021553933620452880859375 ^2 ::== 546464845645465465456485091293091792290297531072512
t_ten increased 
using t_rst as 233765875534789180113754931.00215542316436767578125
using for fract 54646484564546546545648509129309193640548560692838400
getting the part of 54646484564546546545648509129309193640548560692838400 :: ad 53 and mad 71
    -----------------> 233765875534789180113754931.00215542316436767578125 ^2 ::== 54646484564546546545648509129309193640548560692838400
t_ten increased 
using t_rst as 2337658755347891801137549310.0215542316436767578125
using for fract 5464648456454654654564850912930919290267879774445633536
getting the part of 5464648456454654654564850912930919290267879774445633536 :: ad 55 and mad 71
    -----------------> 2337658755347891801137549310.0215542316436767578125 ^2 ::== 5464648456454654654564850912930919290267879774445633536
t_ten increased 
using t_rst as 23376587553478918011375493100.215541839599609375
using for fract 546464845645465465456485091293091900692589080226692071424
getting the part of 546464845645465465456485091293091900692589080226692071424 :: ad 57 and mad 71
    -----------------> 23376587553478918011375493100.215541839599609375 ^2 ::== 546464845645465465456485091293091900692589080226692071424
t_ten increased 
using t_rst as 233765875534789180113754931002.155426025390625
using for fract 54646484564546546545648509129309194300499276673871318614016
getting the part of 54646484564546546545648509129309194300499276673871318614016 :: ad 59 and mad 71
    -----------------> 233765875534789180113754931002.155426025390625 ^2 ::== 54646484564546546545648509129309194300499276673871318614016
t_ten increased 
using t_rst as 2337658755347891801137549310021.55419921875
using for fract 5464648456454654654564850912930918733708655569360727230644224
getting the part of 5464648456454654654564850912930918733708655569360727230644224 :: ad 61 and mad 71
    -----------------> 2337658755347891801137549310021.55419921875 ^2 ::== 5464648456454654654564850912930918733708655569360727230644224
t_ten increased 
using t_rst as 23376587553478918011375493100215.54296875
using for fract 546464845645465465456485091293091908033186656926720420239900672
getting the part of 546464845645465465456485091293091908033186656926720420239900672 :: ad 63 and mad 71
    -----------------> 23376587553478918011375493100215.54296875 ^2 ::== 546464845645465465456485091293091908033186656926720420239900672
t_ten increased 
using t_rst as 233765875534789180113754931002155.40625
using for fract 54646484564546546545648509129309181929764464095066231547067629568
getting the part of 54646484564546546545648509129309181929764464095066231547067629568 :: ad 65 and mad 71
    -----------------> 233765875534789180113754931002155.40625 ^2 ::== 54646484564546546545648509129309181929764464095066231547067629568
t_ten increased 
using t_rst as 2337658755347891801137549310021554
using for fract 5464648456454654654564850912930917990152350372989918915234250096640
getting the part of 5464648456454654654564850912930917990152350372989918915234250096640 :: ad 67 and mad 71
    -----------------> 2337658755347891801137549310021554 ^2 ::== 5464648456454654654564850912930917990152350372989918915234250096640
t_ten increased 
using t_rst as 23376587553478918011375493100215540
using for fract 546464845645465465456485091293091793822938178764164262992928680443904
getting the part of 546464845645465465456485091293091793822938178764164262992928680443904 :: ad 69 and mad 71
    -----------------> 23376587553478918011375493100215540 ^2 ::== 546464845645465465456485091293091793822938178764164262992928680443904
t_ten increased 
using t_rst as 233765875534789180113754931002155424
using for fract 54646484564546546545648509129309192342266776779346187111411705777750016
getting the part of 54646484564546546545648509129309192342266776779346187111411705777750016 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113754931002155424
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113754931002155424 ^2 ::== 54646484564546546545648509129309192342266776779346187111411705777750016
t_ten increased 
breaking with xbrk of value 1

increasing the digits 24
-------------------------------------------------------
-------------------------------------------------------
times 24 546464845645465465456464 233531985318574985237805
main 739232605913.36571905011350470943390942522551248505813248357299016788601875305176 second 483251472132.85857225506143908688044262374140964955149257775701698847115039825439
main 546464845645465465456464.0000000000582076609134674072265625 second 233531985318574985237805
times of 3.1654447886653907053885997361455565208885123933544447169997169136786083166696043e-12
new times of 3.1654447886653907053885997361455565208885123933544447169997169136786083166696043e-12
using 233531985318574985237805361387412736 * 3.1654447886653907053885997361455565208885123933544447169997169136786083166696043e-12
739232605913365719050114.64866133616305887699127197265625  with length of 56 and dot length 24 will move 32
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 739232605913365719050114.64866133616305887699127197265625 ^2 ::== 546464845645465465456465691293091588985996705792
 temp fract 0 temp int 546464845645465465456465691293091588985996705792
before loop xstp is 0entering tens with lap of value 10
using t_rst as 7392326059133657190501146.48661336116492748260498046875
using for fract 54646484564546546545646569129309149328450462416896
getting the part of 54646484564546546545646569129309149328450462416896 :: ad 50 and mad 71
    -----------------> 7392326059133657190501146.48661336116492748260498046875 ^2 ::== 54646484564546546545646569129309149328450462416896
t_ten increased 
using t_rst as 73923260591336571905011464.86613361537456512451171875
using for fract 5464648456454654654564656912930915617392189602004992
getting the part of 5464648456454654654564656912930915617392189602004992 :: ad 52 and mad 71
    -----------------> 73923260591336571905011464.86613361537456512451171875 ^2 ::== 5464648456454654654564656912930915617392189602004992
t_ten increased 
using t_rst as 739232605913365719050114648.6613361835479736328125
using for fract 546464845645465465456465691293091584797649052337438720
getting the part of 546464845645465465456465691293091584797649052337438720 :: ad 54 and mad 71
    -----------------> 739232605913365719050114648.6613361835479736328125 ^2 ::== 546464845645465465456465691293091584797649052337438720
t_ten increased 
using t_rst as 7392326059133657190501146486.613361358642578125
using for fract 54646484564546546545646569129309151986510991287981703168
getting the part of 54646484564546546545646569129309151986510991287981703168 :: ad 56 and mad 71
    -----------------> 7392326059133657190501146486.613361358642578125 ^2 ::== 54646484564546546545646569129309151986510991287981703168
t_ten increased 
using t_rst as 73923260591336571905011464866.13361358642578125
using for fract 5464648456454654654564656912930915425324690306541140574208
getting the part of 5464648456454654654564656912930915425324690306541140574208 :: ad 58 and mad 71
    -----------------> 73923260591336571905011464866.13361358642578125 ^2 ::== 5464648456454654654564656912930915425324690306541140574208
t_ten increased 
using t_rst as 739232605913365719050114648661.336181640625
using for fract 546464845645465465456465691293091605396611650614831142141952
getting the part of 546464845645465465456465691293091605396611650614831142141952 :: ad 60 and mad 71
    -----------------> 739232605913365719050114648661.336181640625 ^2 ::== 546464845645465465456465691293091605396611650614831142141952
t_ten increased 
using t_rst as 7392326059133657190501146486613.361328125
using for fract 54646484564546546545646569129309150017170831135750777571639296
getting the part of 54646484564546546545646569129309150017170831135750777571639296 :: ad 62 and mad 71
    -----------------> 7392326059133657190501146486613.361328125 ^2 ::== 54646484564546546545646569129309150017170831135750777571639296
t_ten increased 
using t_rst as 73923260591336571905011464866133.6171875
using for fract 5464648456454654654564656912930915754384626999086284895831457792
getting the part of 5464648456454654654564656912930915754384626999086284895831457792 :: ad 64 and mad 71
    -----------------> 73923260591336571905011464866133.6171875 ^2 ::== 5464648456454654654564656912930915754384626999086284895831457792
t_ten increased 
using t_rst as 739232605913365719050114648661336.125
using for fract 546464845645465465456465691293091484167619483476111581820514992128
getting the part of 546464845645465465456465691293091484167619483476111581820514992128 :: ad 66 and mad 71
    -----------------> 739232605913365719050114648661336.125 ^2 ::== 546464845645465465456465691293091484167619483476111581820514992128
t_ten increased 
using t_rst as 7392326059133657190501146486613362
using for fract 54646484564546546545646569129309162371059755659960409857760383991808
getting the part of 54646484564546546545646569129309162371059755659960409857760383991808 :: ad 68 and mad 71
    -----------------> 7392326059133657190501146486613362 ^2 ::== 54646484564546546545646569129309162371059755659960409857760383991808
t_ten increased 
using t_rst as 73923260591336571905011464866133616
using for fract 5464648456454654654564656912930915240184978727309136307920743188922368
getting the part of 5464648456454654654564656912930915240184978727309136307920743188922368 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011464866133616
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011464866133616 ^2 ::== 5464648456454654654564656912930915240184978727309136307920743188922368
t_ten increased 
breaking with xbrk of value 1

increasing the digits 25
-------------------------------------------------------
-------------------------------------------------------
times 25 5464648456454654654564645 2335319853185749852378053
main 2337658755347.8918011375052674660598050115824925176966075923701282590627670288086 second 1528175334569.2207750468902376796959052346553190049327497490594396367669105529785
main 5464648456454654654564645 second 2335319853185749852378052.99999999976716935634613037109375
times of 1.001001533969298172181685951914761578581327651294170710588648962272336401914057e-12
new times of 1.001001533969298172181685951914761578581327651294170710588648962272336401914057e-12
using 233531985318574985237805361387412736 * 1.001001533969298172181685951914761578581327651294170710588648962272336401914057e-12
233765875534789180113750.588195500313304364681243896484375  with length of 57 and dot length 24 will move 33
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 233765875534789180113750.588195500313304364681243896484375 ^2 ::== 54646484564546546545646478729309173272199299072
 temp fract 0 temp int 54646484564546546545646478729309173272199299072
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2337658755347891801137505.88195500313304364681243896484375
using for fract 5464648456454654654564647872930917397588674084864
getting the part of 5464648456454654654564647872930917397588674084864 :: ad 49 and mad 71
    -----------------> 2337658755347891801137505.88195500313304364681243896484375 ^2 ::== 5464648456454654654564647872930917397588674084864
t_ten increased 
using t_rst as 23376587553478918011375058.819550029933452606201171875
using for fract 546464845645465465456464787293091638427875792650240
getting the part of 546464845645465465456464787293091638427875792650240 :: ad 51 and mad 71
    -----------------> 23376587553478918011375058.819550029933452606201171875 ^2 ::== 546464845645465465456464787293091638427875792650240
t_ten increased 
using t_rst as 233765875534789180113750588.195500314235687255859375
using for fract 54646484564546546545646478729309170183855854602682368
getting the part of 54646484564546546545646478729309170183855854602682368 :: ad 53 and mad 71
    -----------------> 233765875534789180113750588.195500314235687255859375 ^2 ::== 54646484564546546545646478729309170183855854602682368
t_ten increased 
using t_rst as 2337658755347891801137505881.9550030231475830078125
using for fract 5464648456454654654564647872930916354302798806724378624
getting the part of 5464648456454654654564647872930916354302798806724378624 :: ad 55 and mad 71
    -----------------> 2337658755347891801137505881.9550030231475830078125 ^2 ::== 5464648456454654654564647872930916354302798806724378624
t_ten increased 
using t_rst as 23376587553478918011375058819.550029754638671875
using for fract 546464845645465465456464787293091630707913397802792648704
getting the part of 546464845645465465456464787293091630707913397802792648704 :: ad 57 and mad 71
    -----------------> 23376587553478918011375058819.550029754638671875 ^2 ::== 546464845645465465456464787293091630707913397802792648704
t_ten increased 
using t_rst as 233765875534789180113750588195.50030517578125
using for fract 54646484564546546545646478729309164884180069202223026929664
getting the part of 54646484564546546545646478729309164884180069202223026929664 :: ad 59 and mad 71
    -----------------> 233765875534789180113750588195.50030517578125 ^2 ::== 54646484564546546545646478729309164884180069202223026929664
t_ten increased 
using t_rst as 2337658755347891801137505881955.003173828125
using for fract 5464648456454654654564647872930917223444905245916840914321408
getting the part of 5464648456454654654564647872930917223444905245916840914321408 :: ad 61 and mad 71
    -----------------> 2337658755347891801137505881955.003173828125 ^2 ::== 5464648456454654654564647872930917223444905245916840914321408
t_ten increased 
using t_rst as 23376587553478918011375058819550.03125
using for fract 546464845645465465456464787293091727296250681733205191028637696
getting the part of 546464845645465465456464787293091727296250681733205191028637696 :: ad 63 and mad 71
    -----------------> 23376587553478918011375058819550.03125 ^2 ::== 546464845645465465456464787293091727296250681733205191028637696
t_ten increased 
using t_rst as 233765875534789180113750588195500.3125
using for fract 54646484564546546545646478729309172729625068173320519102863769600
getting the part of 54646484564546546545646478729309172729625068173320519102863769600 :: ad 65 and mad 71
    -----------------> 233765875534789180113750588195500.3125 ^2 ::== 54646484564546546545646478729309172729625068173320519102863769600
t_ten increased 
using t_rst as 2337658755347891801137505881955003.25
using for fract 5464648456454654654564647872930917800305156512275482932914910396416
getting the part of 5464648456454654654564647872930917800305156512275482932914910396416 :: ad 67 and mad 71
    -----------------> 2337658755347891801137505881955003.25 ^2 ::== 5464648456454654654564647872930917800305156512275482932914910396416
t_ten increased 
using t_rst as 23376587553478918011375058819550032
using for fract 546464845645465465456464787293091772242070363425306850495746545811456
getting the part of 546464845645465465456464787293091772242070363425306850495746545811456 :: ad 69 and mad 71
    -----------------> 23376587553478918011375058819550032 ^2 ::== 546464845645465465456464787293091772242070363425306850495746545811456
t_ten increased 
using t_rst as 233765875534789180113750588195500320
using for fract 54646484564546546545646478729309173901137046880241002790057003880284160
getting the part of 54646484564546546545646478729309173901137046880241002790057003880284160 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113750588195500320
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113750588195500320 ^2 ::== 54646484564546546545646478729309173901137046880241002790057003880284160
t_ten increased 
breaking with xbrk of value 1

increasing the digits 26
-------------------------------------------------------
-------------------------------------------------------
times 26 54646484564546546545646454 23353198531857498523780536
main 7392326059133.6571905011386995306329667269028271814335084854974411427974700927734 second 4832514721328.58572255061811563759213185298424519942273036576807498931884765625
main 54646484564546546545646453.999999992549419403076171875 second 23353198531857498523780536
times of 3.1654447886653907053885964204691473491121277282825736224358847148939438681826742e-13
new times of 3.1654447886653907053885964204691473491121277282825736224358847148939438681826742e-13
using 233531985318574985237805361387412736 * 3.1654447886653907053885964204691473491121277282825736224358847148939438681826742e-13
73923260591336571905011.3874344841678976081311702728271484375  with length of 60 and dot length 23 will move 37
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 73923260591336571905011.3874344841678976081311702728271484375 ^2 ::== 5464648456454654654564645464930915314246352896
 temp fract 0 temp int 5464648456454654654564645464930915314246352896
before loop xstp is 0entering tens with lap of value 10
using t_rst as 739232605913365719050113.874344841693527996540069580078125
using for fract 546464845645465465456464546493091516031472500736
getting the part of 546464845645465465456464546493091516031472500736 :: ad 48 and mad 71
    -----------------> 739232605913365719050113.874344841693527996540069580078125 ^2 ::== 546464845645465465456464546493091516031472500736
t_ten increased 
using t_rst as 7392326059133657190501138.743448416702449321746826171875
using for fract 54646484564546546545646454649309148506922506256384
getting the part of 54646484564546546545646454649309148506922506256384 :: ad 50 and mad 71
    -----------------> 7392326059133657190501138.743448416702449321746826171875 ^2 ::== 54646484564546546545646454649309148506922506256384
t_ten increased 
using t_rst as 73923260591336571905011387.43448416888713836669921875
using for fract 5464648456454654654564645464930915030836235720458240
getting the part of 5464648456454654654564645464930915030836235720458240 :: ad 52 and mad 71
    -----------------> 73923260591336571905011387.43448416888713836669921875 ^2 ::== 5464648456454654654564645464930915030836235720458240
t_ten increased 
using t_rst as 739232605913365719050113874.3448417186737060546875
using for fract 546464845645465465456464546493091604540715977448357888
getting the part of 546464845645465465456464546493091604540715977448357888 :: ad 54 and mad 71
    -----------------> 739232605913365719050113874.3448417186737060546875 ^2 ::== 546464845645465465456464546493091604540715977448357888
t_ten increased 
using t_rst as 7392326059133657190501138743.44841670989990234375
using for fract 54646484564546546545646454649309153960817683799073619968
getting the part of 54646484564546546545646454649309153960817683799073619968 :: ad 56 and mad 71
    -----------------> 7392326059133657190501138743.44841670989990234375 ^2 ::== 54646484564546546545646454649309153960817683799073619968
t_ten increased 
using t_rst as 73923260591336571905011387434.48416900634765625
using for fract 5464648456454654654564645464930915433860700242864523706368
getting the part of 5464648456454654654564645464930915433860700242864523706368 :: ad 58 and mad 71
    -----------------> 73923260591336571905011387434.48416900634765625 ^2 ::== 5464648456454654654564645464930915433860700242864523706368
t_ten increased 
using t_rst as 739232605913365719050113874344.8416748046875
using for fract 546464845645465465456464546493091531296811828140160623575040
getting the part of 546464845645465465456464546493091531296811828140160623575040 :: ad 60 and mad 71
    -----------------> 739232605913365719050113874344.8416748046875 ^2 ::== 546464845645465465456464546493091531296811828140160623575040
t_ten increased 
using t_rst as 7392326059133657190501138743448.4169921875
using for fract 54646484564546546545646454649309150034831084600565375109693440
getting the part of 54646484564546546545646454649309150034831084600565375109693440 :: ad 62 and mad 71
    -----------------> 7392326059133657190501138743448.4169921875 ^2 ::== 54646484564546546545646454649309150034831084600565375109693440
t_ten increased 
using t_rst as 73923260591336571905011387434484.1640625
using for fract 5464648456454654654564645464930914448885970860206174356161691648
getting the part of 5464648456454654654564645464930914448885970860206174356161691648 :: ad 64 and mad 71
    -----------------> 73923260591336571905011387434484.1640625 ^2 ::== 5464648456454654654564645464930914448885970860206174356161691648
t_ten increased 
using t_rst as 739232605913365719050113874344841.625
using for fract 546464845645465465456464546493091414464982680543111799695292235776
getting the part of 546464845645465465456464546493091414464982680543111799695292235776 :: ad 66 and mad 71
    -----------------> 739232605913365719050113874344841.625 ^2 ::== 546464845645465465456464546493091414464982680543111799695292235776
t_ten increased 
using t_rst as 7392326059133657190501138743448417
using for fract 54646484564546546545646454649309158970500165609354426259954334695424
getting the part of 54646484564546546545646454649309158970500165609354426259954334695424 :: ad 68 and mad 71
    -----------------> 7392326059133657190501138743448417 ^2 ::== 54646484564546546545646454649309158970500165609354426259954334695424
t_ten increased 
using t_rst as 73923260591336571905011387434484168
using for fract 5464648456454654654564645464930915315512768405034748230579844596891648
getting the part of 5464648456454654654564645464930915315512768405034748230579844596891648 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011387434484168
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011387434484168 ^2 ::== 5464648456454654654564645464930915315512768405034748230579844596891648
t_ten increased 
breaking with xbrk of value 1

increasing the digits 27
-------------------------------------------------------
-------------------------------------------------------
times 27 546464845645465465456464545 233531985318574985237805361
main 23376587553478.918011375053637162073631901304526792273463797755539417266845703125 second 15281753345692.20775046890437264123928547132624800042322021909058094024658203125
main 546464845645465465456464545.000000059604644775390625 second 233531985318574985237805361
times of 1.0010015339692981721816857316619394333552950310190236616441069395565956503569979e-13
new times of 1.0010015339692981721816857316619394333552950310190236616441069395565956503569979e-13
using 233531985318574985237805361387412736 * 1.0010015339692981721816857316619394333552950310190236616441069395565956503569979e-13
23376587553478918011375.05367594214840210042893886566162109375  with length of 61 and dot length 23 will move 38
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 23376587553478918011375.05367594214840210042893886566162109375 ^2 ::== 546464845645465465456464546813091705073434624
 temp fract 0 temp int 546464845645465465456464546813091705073434624
before loop xstp is 0entering tens with lap of value 10
using t_rst as 233765875534789180113750.53675942149129696190357208251953125
using for fract 54646484564546546545646454681309169132953927680
getting the part of 54646484564546546545646454681309169132953927680 :: ad 47 and mad 71
    -----------------> 233765875534789180113750.53675942149129696190357208251953125 ^2 ::== 54646484564546546545646454681309169132953927680
t_ten increased 
using t_rst as 2337658755347891801137505.36759421485476195812225341796875
using for fract 5464648456454654654564645468130917054032881123328
getting the part of 5464648456454654654564645468130917054032881123328 :: ad 49 and mad 71
    -----------------> 2337658755347891801137505.36759421485476195812225341796875 ^2 ::== 5464648456454654654564645468130917054032881123328
t_ten increased 
using t_rst as 23376587553478918011375053.6759421490132808685302734375
using for fract 546464845645465465456464546813091712158687553388544
getting the part of 546464845645465465456464546813091712158687553388544 :: ad 51 and mad 71
    -----------------> 23376587553478918011375053.6759421490132808685302734375 ^2 ::== 546464845645465465456464546813091712158687553388544
t_ten increased 
using t_rst as 233765875534789180113750536.7594214975833892822265625
using for fract 54646484564546546545646454681309173809942140704260096
getting the part of 54646484564546546545646454681309173809942140704260096 :: ad 53 and mad 71
    -----------------> 233765875534789180113750536.7594214975833892822265625 ^2 ::== 54646484564546546545646454681309173809942140704260096
t_ten increased 
using t_rst as 2337658755347891801137505367.594214916229248046875
using for fract 5464648456454654654564645468130917012059332596234977280
getting the part of 5464648456454654654564645468130917012059332596234977280 :: ad 55 and mad 71
    -----------------> 2337658755347891801137505367.594214916229248046875 ^2 ::== 5464648456454654654564645468130917012059332596234977280
t_ten increased 
using t_rst as 23376587553478918011375053675.942150115966796875
using for fract 546464845645465465456464546813091729540132156841369010176
getting the part of 546464845645465465456464546813091729540132156841369010176 :: ad 57 and mad 71
    -----------------> 23376587553478918011375053675.942150115966796875 ^2 ::== 546464845645465465456464546813091729540132156841369010176
t_ten increased 
using t_rst as 233765875534789180113750536759.421478271484375
using for fract 54646484564546546545646454681309168118309937225620202192896
getting the part of 54646484564546546545646454681309168118309937225620202192896 :: ad 59 and mad 71
    -----------------> 233765875534789180113750536759.421478271484375 ^2 ::== 54646484564546546545646454681309168118309937225620202192896
t_ten increased 
using t_rst as 2337658755347891801137505367594.21484375
using for fract 5464648456454654654564645468130916966573498633234554581680128
getting the part of 5464648456454654654564645468130916966573498633234554581680128 :: ad 61 and mad 71
    -----------------> 2337658755347891801137505367594.21484375 ^2 ::== 5464648456454654654564645468130916966573498633234554581680128
t_ten increased 
using t_rst as 23376587553478918011375053675942.1484375
using for fract 546464845645465465456464546813091711512630334748018756957503488
getting the part of 546464845645465465456464546813091711512630334748018756957503488 :: ad 63 and mad 71
    -----------------> 23376587553478918011375053675942.1484375 ^2 ::== 546464845645465465456464546813091711512630334748018756957503488
t_ten increased 
using t_rst as 233765875534789180113750536759421.46875
using for fract 54646484564546546545646454681309163545359432105425466715531116544
getting the part of 54646484564546546545646454681309163545359432105425466715531116544 :: ad 65 and mad 71
    -----------------> 233765875534789180113750536759421.46875 ^2 ::== 54646484564546546545646454681309163545359432105425466715531116544
t_ten increased 
using t_rst as 2337658755347891801137505367594214.75
using for fract 5464648456454654654564645468130916638489677661665932606814629658624
getting the part of 5464648456454654654564645468130916638489677661665932606814629658624 :: ad 67 and mad 71
    -----------------> 2337658755347891801137505367594214.75 ^2 ::== 5464648456454654654564645468130916638489677661665932606814629658624
t_ten increased 
using t_rst as 23376587553478918011375053675942148
using for fract 546464845645465465456464546813091640483631902759868932294229484371968
getting the part of 546464845645465465456464546813091640483631902759868932294229484371968 :: ad 69 and mad 71
    -----------------> 23376587553478918011375053675942148 ^2 ::== 546464845645465465456464546813091640483631902759868932294229484371968
t_ten increased 
using t_rst as 233765875534789180113750536759421472
using for fract 54646484564546546545646454681309162054521196598613083873712358016679936
getting the part of 54646484564546546545646454681309162054521196598613083873712358016679936 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113750536759421472
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113750536759421472 ^2 ::== 54646484564546546545646454681309162054521196598613083873712358016679936
t_ten increased 
breaking with xbrk of value 1

increasing the digits 28
-------------------------------------------------------
-------------------------------------------------------
times 28 5464648456454654654564645456 2335319853185749852378053613
main 73923260591336.571905011387374077503503201624912577472059638239443302154541015625 second 48325147213285.857225506181290881460078413811576325542773702181875705718994140625
main 5464648456454654654564645456 second 2335319853185749852378053613
times of 3.1654447886653907053885964190673414614762055380523025167538944616395816127045493e-14
new times of 3.1654447886653907053885964190673414614762055380523025167538944616395816127045493e-14
using 233531985318574985237805361387412736 * 3.1654447886653907053885964190673414614762055380523025167538944616395816127045493e-14
7392326059133657190501.1387401747515468741767108440399169921875  with length of 62 and dot length 22 will move 40
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 7392326059133657190501.1387401747515468741767108440399169921875 ^2 ::== 54646484564546546545646454600909150534762496
 temp fract 0 temp int 54646484564546546545646454600909150534762496
before loop xstp is 0entering tens with lap of value 10
using t_rst as 73923260591336571905011.387401747517287731170654296875
using for fract 5464648456454654654564645460090915156555464704
getting the part of 5464648456454654654564645460090915156555464704 :: ad 46 and mad 71
    -----------------> 73923260591336571905011.387401747517287731170654296875 ^2 ::== 5464648456454654654564645460090915156555464704
t_ten increased 
using t_rst as 739232605913365719050113.87401747517287731170654296875
using for fract 546464845645465465456464546009091493665313914880
getting the part of 546464845645465465456464546009091493665313914880 :: ad 48 and mad 71
    -----------------> 739232605913365719050113.87401747517287731170654296875 ^2 ::== 546464845645465465456464546009091493665313914880
t_ten increased 
using t_rst as 7392326059133657190501138.7401747517287731170654296875
using for fract 54646484564546546545646454600909152462756135305216
getting the part of 54646484564546546545646454600909152462756135305216 :: ad 50 and mad 71
    -----------------> 7392326059133657190501138.7401747517287731170654296875 ^2 ::== 54646484564546546545646454600909152462756135305216
t_ten increased 
using t_rst as 73923260591336571905011387.401747517287731170654296875
using for fract 5464648456454654654564645460090915390390801606377472
getting the part of 5464648456454654654564645460090915390390801606377472 :: ad 52 and mad 71
    -----------------> 73923260591336571905011387.401747517287731170654296875 ^2 ::== 5464648456454654654564645460090915390390801606377472
t_ten increased 
using t_rst as 739232605913365719050113874.017475128173828125
using for fract 546464845645465465456464546009091467557946875013234688
getting the part of 546464845645465465456464546009091467557946875013234688 :: ad 54 and mad 71
    -----------------> 739232605913365719050113874.017475128173828125 ^2 ::== 546464845645465465456464546009091467557946875013234688
t_ten increased 
using t_rst as 7392326059133657190501138740.17475128173828125
using for fract 54646484564546546545646454600909147641238403039381946368
getting the part of 54646484564546546545646454600909147641238403039381946368 :: ad 56 and mad 71
    -----------------> 7392326059133657190501138740.17475128173828125 ^2 ::== 54646484564546546545646454600909147641238403039381946368
t_ten increased 
using t_rst as 73923260591336571905011387401.7475128173828125
using for fract 5464648456454654654564645460090914424113453537323739250688
getting the part of 5464648456454654654564645460090914424113453537323739250688 :: ad 58 and mad 71
    -----------------> 73923260591336571905011387401.7475128173828125 ^2 ::== 5464648456454654654564645460090914424113453537323739250688
t_ten increased 
using t_rst as 739232605913365719050113874017.47509765625
using for fract 546464845645465465456464546009091406143570765293498683883520
getting the part of 546464845645465465456464546009091406143570765293498683883520 :: ad 60 and mad 71
    -----------------> 739232605913365719050113874017.47509765625 ^2 ::== 546464845645465465456464546009091406143570765293498683883520
t_ten increased 
using t_rst as 7392326059133657190501138740174.751953125
using for fract 54646484564546546545646454600909160730882714916779335499120640
getting the part of 54646484564546546545646454600909160730882714916779335499120640 :: ad 62 and mad 71
    -----------------> 7392326059133657190501138740174.751953125 ^2 ::== 54646484564546546545646454600909160730882714916779335499120640
t_ten increased 
using t_rst as 73923260591336571905011387401747.515625
using for fract 5464648456454654654564645460090914805437671263448532053208858624
getting the part of 5464648456454654654564645460090914805437671263448532053208858624 :: ad 64 and mad 71
    -----------------> 73923260591336571905011387401747.515625 ^2 ::== 5464648456454654654564645460090914805437671263448532053208858624
t_ten increased 
using t_rst as 739232605913365719050113874017475.125
using for fract 546464845645465465456464546009091462796658723149641584367040987136
getting the part of 546464845645465465456464546009091462796658723149641584367040987136 :: ad 66 and mad 71
    -----------------> 739232605913365719050113874017475.125 ^2 ::== 546464845645465465456464546009091462796658723149641584367040987136
t_ten increased 
using t_rst as 7392326059133657190501138740174752
using for fract 54646484564546546545646454600909153419074052800352147666136551391232
getting the part of 54646484564546546545646454600909153419074052800352147666136551391232 :: ad 68 and mad 71
    -----------------> 7392326059133657190501138740174752 ^2 ::== 54646484564546546545646454600909153419074052800352147666136551391232
t_ten increased 
using t_rst as 73923260591336571905011387401747512
using for fract 5464648456454654654564645460090914386524783309626931117002330562625536
getting the part of 5464648456454654654564645460090914386524783309626931117002330562625536 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011387401747512
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011387401747512 ^2 ::== 5464648456454654654564645460090914386524783309626931117002330562625536
t_ten increased 
breaking with xbrk of value 1

increasing the digits 29
-------------------------------------------------------
-------------------------------------------------------
times 29 54646484564546546545646454564 23353198531857498523780536138
main 233765875534789.18011375053650850982579247061554639230962493456900119781494140625 second 152817533456922.07750468904385074368356030316551397163493675179779529571533203125
main 54646484564546546545646454564 second 23353198531857498523780536138
times of 1.0010015339692981721816857306192921991154985637003555746853148478206944910516591e-14
new times of 1.0010015339692981721816857306192921991154985637003555746853148478206944910516591e-14
using 233531985318574985237805361387412736 * 1.0010015339692981721816857306192921991154985637003555746853148478206944910516591e-14
2337658755347891801137.505365159300026789424009621143341064453125  with length of 64 and dot length 22 will move 42
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 2337658755347891801137.505365159300026789424009621143341064453125 ^2 ::== 5464648456454654654564645456746916974952448
 temp fract 0 temp int 5464648456454654654564645456746916974952448
before loop xstp is 0entering tens with lap of value 10
using t_rst as 23376587553478918011375.053651592999813146889209747314453125
using for fract 546464845645465465456464545674691656693055488
getting the part of 546464845645465465456464545674691656693055488 :: ad 45 and mad 71
    -----------------> 23376587553478918011375.053651592999813146889209747314453125 ^2 ::== 546464845645465465456464545674691656693055488
t_ten increased 
using t_rst as 233765875534789180113750.53651592999813146889209747314453125
using for fract 54646484564546546545646454567469165669305548800
getting the part of 54646484564546546545646454567469165669305548800 :: ad 47 and mad 71
    -----------------> 233765875534789180113750.53651592999813146889209747314453125 ^2 ::== 54646484564546546545646454567469165669305548800
t_ten increased 
using t_rst as 2337658755347891801137505.36515929992310702800750732421875
using for fract 5464648456454654654564645456746916637299299057664
getting the part of 5464648456454654654564645456746916637299299057664 :: ad 49 and mad 71
    -----------------> 2337658755347891801137505.36515929992310702800750732421875 ^2 ::== 5464648456454654654564645456746916637299299057664
t_ten increased 
using t_rst as 23376587553478918011375053.6515929996967315673828125
using for fract 546464845645465465456464545674691686247928042618880
getting the part of 546464845645465465456464545674691686247928042618880 :: ad 51 and mad 71
    -----------------> 23376587553478918011375053.6515929996967315673828125 ^2 ::== 546464845645465465456464545674691686247928042618880
t_ten increased 
using t_rst as 233765875534789180113750536.515929996967315673828125
using for fract 54646484564546546545646454567469169489483932717023232
getting the part of 54646484564546546545646454567469169489483932717023232 :: ad 53 and mad 71
    -----------------> 233765875534789180113750536.515929996967315673828125 ^2 ::== 54646484564546546545646454567469169489483932717023232
t_ten increased 
using t_rst as 2337658755347891801137505365.1593000888824462890625
using for fract 5464648456454654654564645456746917096522345861378736128
getting the part of 5464648456454654654564645456746917096522345861378736128 :: ad 55 and mad 71
    -----------------> 2337658755347891801137505365.1593000888824462890625 ^2 ::== 5464648456454654654564645456746917096522345861378736128
t_ten increased 
using t_rst as 23376587553478918011375053651.592998504638671875
using for fract 546464845645465465456464545674691619927271411614614552576
getting the part of 546464845645465465456464545674691619927271411614614552576 :: ad 57 and mad 71
    -----------------> 23376587553478918011375053651.592998504638671875 ^2 ::== 546464845645465465456464545674691619927271411614614552576
t_ten increased 
using t_rst as 233765875534789180113750536515.92999267578125
using for fract 54646484564546546545646454567469169246282058849236503494656
getting the part of 54646484564546546545646454567469169246282058849236503494656 :: ad 59 and mad 71
    -----------------> 233765875534789180113750536515.92999267578125 ^2 ::== 54646484564546546545646454567469169246282058849236503494656
t_ten increased 
using t_rst as 2337658755347891801137505365159.300048828125
using for fract 5464648456454654654564645456746916924628205884923650349465600
getting the part of 5464648456454654654564645456746916924628205884923650349465600 :: ad 61 and mad 71
    -----------------> 2337658755347891801137505365159.300048828125 ^2 ::== 5464648456454654654564645456746916924628205884923650349465600
t_ten increased 
using t_rst as 23376587553478918011375053651593
using for fract 546464845645465465456464545674691717221621374199970532929044480
getting the part of 546464845645465465456464545674691717221621374199970532929044480 :: ad 63 and mad 71
    -----------------> 23376587553478918011375053651593 ^2 ::== 546464845645465465456464545674691717221621374199970532929044480
t_ten increased 
using t_rst as 233765875534789180113750536515930
using for fract 54646484564546546545646454567469170454511537191767651796201242624
getting the part of 54646484564546546545646454567469170454511537191767651796201242624 :: ad 65 and mad 71
    -----------------> 233765875534789180113750536515930 ^2 ::== 54646484564546546545646454567469170454511537191767651796201242624
t_ten increased 
using t_rst as 2337658755347891801137505365159300
using for fract 5464648456454654654564645456746916761497419268053379244358606258176
getting the part of 5464648456454654654564645456746916761497419268053379244358606258176 :: ad 67 and mad 71
    -----------------> 2337658755347891801137505365159300 ^2 ::== 5464648456454654654564645456746916761497419268053379244358606258176
t_ten increased 
using t_rst as 23376587553478918011375053651593000
using for fract 546464845645465465456464545674691686534335643874993181496853284257792
getting the part of 546464845645465465456464545674691686534335643874993181496853284257792 :: ad 69 and mad 71
    -----------------> 23376587553478918011375053651593000 ^2 ::== 546464845645465465456464545674691686534335643874993181496853284257792
t_ten increased 
using t_rst as 233765875534789180113750536515930016
using for fract 54646484564546546545646454567469174302652546473391777990865334617243648
getting the part of 54646484564546546545646454567469174302652546473391777990865334617243648 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113750536515930016
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113750536515930016 ^2 ::== 54646484564546546545646454567469174302652546473391777990865334617243648
t_ten increased 
breaking with xbrk of value 1

increasing the digits 30
-------------------------------------------------------
-------------------------------------------------------
times 30 546464845645465465456464545646 233531985318574985237805361387
main 739232605913365.719050113873771888357670778457730875743436627089977264404296875 second 483251472132858.5722550618129988298627384979422316746422438882291316986083984375
main 546464845645465465456464545645.99993896484375 second 233531985318574985237805361387
times of 3.1654447886653907053885964180213163589713992153024559965638512339855851672936547e-15
new times of 3.1654447886653907053885964180213163589713992153024559965638512339855851672936547e-15
using 233531985318574985237805361387412736 * 3.1654447886653907053885964180213163589713992153024559965638512339855851672936547e-15
739232605913365719050.11387377319488223292864859104156494140625  with length of 62 and dot length 21 will move 41
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 739232605913365719050.11387377319488223292864859104156494140625 ^2 ::== 546464845645465465456464545647931621900288
 temp fract 0 temp int 546464845645465465456464545647931621900288
before loop xstp is 0entering tens with lap of value 10
using t_rst as 7392326059133657190501.1387377319488223292864859104156494140625
using for fract 54646484564546546545646454564793157089755136
getting the part of 54646484564546546545646454564793157089755136 :: ad 44 and mad 71
    -----------------> 7392326059133657190501.1387377319488223292864859104156494140625 ^2 ::== 54646484564546546545646454564793157089755136
t_ten increased 
using t_rst as 73923260591336571905011.3873773194864043034613132476806640625
using for fract 5464648456454654654564645456479315777694990336
getting the part of 5464648456454654654564645456479315777694990336 :: ad 46 and mad 71
    -----------------> 73923260591336571905011.3873773194864043034613132476806640625 ^2 ::== 5464648456454654654564645456479315777694990336
t_ten increased 
using t_rst as 739232605913365719050113.873773194849491119384765625
using for fract 546464845645465465456464545647931584366568800256
getting the part of 546464845645465465456464545647931584366568800256 :: ad 48 and mad 71
    -----------------> 739232605913365719050113.873773194849491119384765625 ^2 ::== 546464845645465465456464545647931584366568800256
t_ten increased 
using t_rst as 7392326059133657190501138.73773194849491119384765625
using for fract 54646484564546546545646454564793156747807019761664
getting the part of 54646484564546546545646454564793156747807019761664 :: ad 50 and mad 71
    -----------------> 7392326059133657190501138.73773194849491119384765625 ^2 ::== 54646484564546546545646454564793156747807019761664
t_ten increased 
using t_rst as 73923260591336571905011387.3773194849491119384765625
using for fract 5464648456454654654564645456479315566694310919274496
getting the part of 5464648456454654654564645456479315566694310919274496 :: ad 52 and mad 71
    -----------------> 73923260591336571905011387.3773194849491119384765625 ^2 ::== 5464648456454654654564645456479315566694310919274496
t_ten increased 
using t_rst as 739232605913365719050113873.77319490909576416015625
using for fract 546464845645465465456464545647931667349895534184759296
getting the part of 546464845645465465456464545647931667349895534184759296 :: ad 54 and mad 71
    -----------------> 739232605913365719050113873.77319490909576416015625 ^2 ::== 546464845645465465456464545647931667349895534184759296
t_ten increased 
using t_rst as 7392326059133657190501138737.7319488525390625
using for fract 54646484564546546545646454564793159356291923934655283200
getting the part of 54646484564546546545646454564793159356291923934655283200 :: ad 56 and mad 71
    -----------------> 7392326059133657190501138737.7319488525390625 ^2 ::== 54646484564546546545646454564793159356291923934655283200
t_ten increased 
using t_rst as 73923260591336571905011387377.319488525390625
using for fract 5464648456454654654564645456479316237860647297122821996544
getting the part of 5464648456454654654564645456479316237860647297122821996544 :: ad 58 and mad 71
    -----------------> 73923260591336571905011387377.319488525390625 ^2 ::== 5464648456454654654564645456479316237860647297122821996544
t_ten increased 
using t_rst as 739232605913365719050113873773.19482421875
using for fract 546464845645465465456464545647931529489850799771206572572672
getting the part of 546464845645465465456464545647931529489850799771206572572672 :: ad 60 and mad 71
    -----------------> 739232605913365719050113873773.19482421875 ^2 ::== 546464845645465465456464545647931529489850799771206572572672
t_ten increased 
using t_rst as 7392326059133657190501138737731.94921875
using for fract 54646484564546546545646454564793171208600659436479712019349504
getting the part of 54646484564546546545646454564793171208600659436479712019349504 :: ad 62 and mad 71
    -----------------> 7392326059133657190501138737731.94921875 ^2 ::== 54646484564546546545646454564793171208600659436479712019349504
t_ten increased 
using t_rst as 73923260591336571905011387377319.484375
using for fract 5464648456454654654564645456479315496682734401229050534283968512
getting the part of 5464648456454654654564645456479315496682734401229050534283968512 :: ad 64 and mad 71
    -----------------> 73923260591336571905011387377319.484375 ^2 ::== 5464648456454654654564645456479315496682734401229050534283968512
t_ten increased 
using t_rst as 739232605913365719050113873773194.875
using for fract 546464845645465465456464545647931600374297449252081113296525066240
getting the part of 546464845645465465456464545647931600374297449252081113296525066240 :: ad 66 and mad 71
    -----------------> 739232605913365719050113873773194.875 ^2 ::== 546464845645465465456464545647931600374297449252081113296525066240
t_ten increased 
using t_rst as 7392326059133657190501138737731949
using for fract 54646484564546546545646454564793166852319371752169373775928938725376
getting the part of 54646484564546546545646454564793166852319371752169373775928938725376 :: ad 68 and mad 71
    -----------------> 7392326059133657190501138737731949 ^2 ::== 54646484564546546545646454564793166852319371752169373775928938725376
t_ten increased 
using t_rst as 73923260591336571905011387377319488
using for fract 5464648456454654654564645456479316186771438755873485038665246267408384
getting the part of 5464648456454654654564645456479316186771438755873485038665246267408384 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011387377319488
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011387377319488 ^2 ::== 5464648456454654654564645456479316186771438755873485038665246267408384
t_ten increased 
breaking with xbrk of value 1

increasing the digits 31
-------------------------------------------------------
-------------------------------------------------------
times 31 5464648456454654654564645456465 2335319853185749852378053613874
main 2337658755347891.80113750536509900114501281365164686576463282108306884765625 second 1528175334569220.77504689043853164875062800032168297548196278512477874755859375
main 5464648456454654654564645456465.0009765625 second 2335319853185749852378053613874.000244140625
times of 1.0010015339692981721816857305935264051963269058705180971533067671192355047822458e-15
new times of 1.0010015339692981721816857305935264051963269058705180971533067671192355047822458e-15
using 233531985318574985237805361387412736 * 1.0010015339692981721816857305935264051963269058705180971533067671192355047822458e-15
233765875534789180113.750536509912848259773454628884792327880859375  with length of 66 and dot length 21 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 233765875534789180113.750536509912848259773454628884792327880859375 ^2 ::== 54646484564546546545646454564655961473024
 temp fract 0 temp int 54646484564546546545646454564655961473024
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2337658755347891801137.50536509912853944115340709686279296875
using for fract 5464648456454654654564645456465596080193536
getting the part of 5464648456454654654564645456465596080193536 :: ad 43 and mad 71
    -----------------> 2337658755347891801137.50536509912853944115340709686279296875 ^2 ::== 5464648456454654654564645456465596080193536
t_ten increased 
using t_rst as 23376587553478918011375.0536509912853944115340709686279296875
using for fract 546464845645465465456464545646559620904255488
getting the part of 546464845645465465456464545646559620904255488 :: ad 45 and mad 71
    -----------------> 23376587553478918011375.0536509912853944115340709686279296875 ^2 ::== 546464845645465465456464545646559620904255488
t_ten increased 
using t_rst as 233765875534789180113750.53650991283939220011234283447265625
using for fract 54646484564546546545646454564655955218477875200
getting the part of 54646484564546546545646454564655955218477875200 :: ad 47 and mad 71
    -----------------> 233765875534789180113750.53650991283939220011234283447265625 ^2 ::== 54646484564546546545646454564655955218477875200
t_ten increased 
using t_rst as 2337658755347891801137505.36509912856854498386383056640625
using for fract 5464648456454654654564645456465596471825833918464
getting the part of 5464648456454654654564645456465596471825833918464 :: ad 49 and mad 71
    -----------------> 2337658755347891801137505.36509912856854498386383056640625 ^2 ::== 5464648456454654654564645456465596471825833918464
t_ten increased 
using t_rst as 23376587553478918011375053.650991283357143402099609375
using for fract 546464845645465465456464545646559536844392521269248
getting the part of 546464845645465465456464545646559536844392521269248 :: ad 51 and mad 71
    -----------------> 23376587553478918011375053.650991283357143402099609375 ^2 ::== 546464845645465465456464545646559536844392521269248
t_ten increased 
using t_rst as 233765875534789180113750536.50991284847259521484375
using for fract 54646484564546546545646454564655958007894894402600960
getting the part of 54646484564546546545646454564655958007894894402600960 :: ad 53 and mad 71
    -----------------> 233765875534789180113750536.50991284847259521484375 ^2 ::== 54646484564546546545646454564655958007894894402600960
t_ten increased 
using t_rst as 2337658755347891801137505365.0991284847259521484375
using for fract 5464648456454654654564645456465595690109024998002786304
getting the part of 5464648456454654654564645456465595690109024998002786304 :: ad 55 and mad 71
    -----------------> 2337658755347891801137505365.0991284847259521484375 ^2 ::== 5464648456454654654564645456465595690109024998002786304
t_ten increased 
using t_rst as 23376587553478918011375053650.991283416748046875
using for fract 546464845645465465456464545646559538315520361147584741376
getting the part of 546464845645465465456464545646559538315520361147584741376 :: ad 57 and mad 71
    -----------------> 23376587553478918011375053650.991283416748046875 ^2 ::== 546464845645465465456464545646559538315520361147584741376
t_ten increased 
using t_rst as 233765875534789180113750536509.912841796875
using for fract 54646484564546546545646454564655960178412589091561641345024
getting the part of 54646484564546546545646454564655960178412589091561641345024 :: ad 59 and mad 71
    -----------------> 233765875534789180113750536509.912841796875 ^2 ::== 54646484564546546545646454564655960178412589091561641345024
t_ten increased 
using t_rst as 2337658755347891801137505365099.12841796875
using for fract 5464648456454654654564645456465595669670622860142961819123712
getting the part of 5464648456454654654564645456465595669670622860142961819123712 :: ad 61 and mad 71
    -----------------> 2337658755347891801137505365099.12841796875 ^2 ::== 5464648456454654654564645456465595669670622860142961819123712
t_ten increased 
using t_rst as 23376587553478918011375053650991.28515625
using for fract 546464845645465465456464545646559618960543936000267727675588608
getting the part of 546464845645465465456464545646559618960543936000267727675588608 :: ad 63 and mad 71
    -----------------> 23376587553478918011375053650991.28515625 ^2 ::== 546464845645465465456464545646559618960543936000267727675588608
t_ten increased 
using t_rst as 233765875534789180113750536509912.84375
using for fract 54646484564546546545646454564655959677665843200625320148328251392
getting the part of 54646484564546546545646454564655959677665843200625320148328251392 :: ad 65 and mad 71
    -----------------> 233765875534789180113750536509912.84375 ^2 ::== 54646484564546546545646454564655959677665843200625320148328251392
t_ten increased 
using t_rst as 2337658755347891801137505365099128.5
using for fract 5464648456454654654564645456465596170590680356579236254305337999360
getting the part of 5464648456454654654564645456465596170590680356579236254305337999360 :: ad 67 and mad 71
    -----------------> 2337658755347891801137505365099128.5 ^2 ::== 5464648456454654654564645456465596170590680356579236254305337999360
t_ten increased 
using t_rst as 23376587553478918011375053650991284
using for fract 546464845645465465456464545646559572924544738111888782921315001565184
getting the part of 546464845645465465456464545646559572924544738111888782921315001565184 :: ad 69 and mad 71
    -----------------> 23376587553478918011375053650991284 ^2 ::== 546464845645465465456464545646559572924544738111888782921315001565184
t_ten increased 
using t_rst as 233765875534789180113750536509912864
using for fract 54646484564546546545646454564655964270901451681997211037118566628327424
getting the part of 54646484564546546545646454564655964270901451681997211037118566628327424 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113750536509912864
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113750536509912864 ^2 ::== 54646484564546546545646454564655964270901451681997211037118566628327424
t_ten increased 
breaking with xbrk of value 1

increasing the digits 32
-------------------------------------------------------
-------------------------------------------------------
times 32 54646484564546546545646454564654 23353198531857498523780536138741
main 7392326059133657.1905011387377225362538268882417469285428524017333984375 second 4832514721328585.722550618129992540568384828958414800581522285938262939453125
main 54646484564546546545646454564654 second 23353198531857498523780536138741
times of 3.1654447886653907053885964180173230346733446676314703438390095479400849579390273e-16
new times of 3.1654447886653907053885964180173230346733446676314703438390095479400849579390273e-16
using 233531985318574985237805361387412736 * 3.1654447886653907053885964180173230346733446676314703438390095479400849579390273e-16
73923260591336571905.0113873772262280681388801895081996917724609375  with length of 66 and dot length 20 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 73923260591336571905.0113873772262280681388801895081996917724609375 ^2 ::== 5464648456454654654564645456465527570432
 temp fract 0 temp int 5464648456454654654564645456465527570432
before loop xstp is 0entering tens with lap of value 10
using t_rst as 739232605913365719050.1138737722623091030982322990894317626953125
using for fract 546464845645465465456464545646552803180544
getting the part of 546464845645465465456464545646552803180544 :: ad 42 and mad 71
    -----------------> 739232605913365719050.1138737722623091030982322990894317626953125 ^2 ::== 546464845645465465456464545646552803180544
t_ten increased 
using t_rst as 7392326059133657190501.1387377226228636573068797588348388671875
using for fract 54646484564546546545646454564655280049618944
getting the part of 54646484564546546545646454564655280049618944 :: ad 44 and mad 71
    -----------------> 7392326059133657190501.1387377226228636573068797588348388671875 ^2 ::== 54646484564546546545646454564655280049618944
t_ten increased 
using t_rst as 73923260591336571905011.38737722623045556247234344482421875
using for fract 5464648456454654654564645456465528451638493184
getting the part of 5464648456454654654564645456465528451638493184 :: ad 46 and mad 71
    -----------------> 73923260591336571905011.38737722623045556247234344482421875 ^2 ::== 5464648456454654654564645456465528451638493184
t_ten increased 
using t_rst as 739232605913365719050113.873772262246347963809967041015625
using for fract 546464845645465465456464545646552708824407474176
getting the part of 546464845645465465456464545646552708824407474176 :: ad 48 and mad 71
    -----------------> 739232605913365719050113.873772262246347963809967041015625 ^2 ::== 546464845645465465456464545646552708824407474176
t_ten increased 
using t_rst as 7392326059133657190501138.737722623161971569061279296875
using for fract 54646484564546546545646454564655283548814699397120
getting the part of 54646484564546546545646454564655283548814699397120 :: ad 50 and mad 71
    -----------------> 7392326059133657190501138.737722623161971569061279296875 ^2 ::== 54646484564546546545646454564655283548814699397120
t_ten increased 
using t_rst as 73923260591336571905011387.377226226031780242919921875
using for fract 5464648456454654654564645456465527778420717636288512
getting the part of 5464648456454654654564645456465527778420717636288512 :: ad 52 and mad 71
    -----------------> 73923260591336571905011387.377226226031780242919921875 ^2 ::== 5464648456454654654564645456465527778420717636288512
t_ten increased 
using t_rst as 739232605913365719050113873.7722623348236083984375
using for fract 546464845645465465456464545646552883910850187458772992
getting the part of 546464845645465465456464545646552883910850187458772992 :: ad 54 and mad 71
    -----------------> 739232605913365719050113873.7722623348236083984375 ^2 ::== 546464845645465465456464545646552883910850187458772992
t_ten increased 
using t_rst as 7392326059133657190501138737.72262287139892578125
using for fract 54646484564546546545646454564655285144458061772996214784
getting the part of 54646484564546546545646454564655285144458061772996214784 :: ad 56 and mad 71
    -----------------> 7392326059133657190501138737.72262287139892578125 ^2 ::== 54646484564546546545646454564655285144458061772996214784
t_ten increased 
using t_rst as 73923260591336571905011387377.226226806640625
using for fract 5464648456454654654564645456465527834425032644070710706176
getting the part of 5464648456454654654564645456465527834425032644070710706176 :: ad 58 and mad 71
    -----------------> 73923260591336571905011387377.226226806640625 ^2 ::== 5464648456454654654564645456465527834425032644070710706176
t_ten increased 
using t_rst as 739232605913365719050113873772.2623291015625
using for fract 546464845645465465456464545646552851142349162826304854163456
getting the part of 546464845645465465456464545646552851142349162826304854163456 :: ad 60 and mad 71
    -----------------> 739232605913365719050113873772.2623291015625 ^2 ::== 546464845645465465456464545646552851142349162826304854163456
t_ten increased 
using t_rst as 7392326059133657190501138737722.623046875
using for fract 54646484564546546545646454564655284495264896639940347966783488
getting the part of 54646484564546546545646454564655284495264896639940347966783488 :: ad 62 and mad 71
    -----------------> 7392326059133657190501138737722.623046875 ^2 ::== 54646484564546546545646454564655284495264896639940347966783488
t_ten increased 
using t_rst as 73923260591336571905011387377226.2265625
using for fract 5464648456454654654564645456465527894929352064143671641870696448
getting the part of 5464648456454654654564645456465527894929352064143671641870696448 :: ad 64 and mad 71
    -----------------> 73923260591336571905011387377226.2265625 ^2 ::== 5464648456454654654564645456465527894929352064143671641870696448
t_ten increased 
using t_rst as 739232605913365719050113873772262.25
using for fract 546464845645465465456464545646552721039802794089979483365096554496
getting the part of 546464845645465465456464545646552721039802794089979483365096554496 :: ad 66 and mad 71
    -----------------> 739232605913365719050113873772262.25 ^2 ::== 546464845645465465456464545646552721039802794089979483365096554496
t_ten increased 
using t_rst as 7392326059133657190501138737722623
using for fract 54646484564546546545646454564655280216944120869666117915410169856000
getting the part of 54646484564546546545646454564655280216944120869666117915410169856000 :: ad 68 and mad 71
    -----------------> 7392326059133657190501138737722623 ^2 ::== 54646484564546546545646454564655280216944120869666117915410169856000
t_ten increased 
using t_rst as 73923260591336571905011387377226232
using for fract 5464648456454654654564645456465528769385159715981790299932488393293824
getting the part of 5464648456454654654564645456465528769385159715981790299932488393293824 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011387377226232
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011387377226232 ^2 ::== 5464648456454654654564645456465528769385159715981790299932488393293824
t_ten increased 
breaking with xbrk of value 1

increasing the digits 33
-------------------------------------------------------
-------------------------------------------------------
times 33 546464845645465465456464545646545 233531985318574985237805361387412
main 23376587553478918.011375053650990972486933827667598961852490901947021484375 second 15281753345692207.75046890438531687998746644296943486551754176616668701171875
main 546464845645465465456464545646545 second 233531985318574985237805361387412.03125
times of 1.0010015339692981721816857305935159707228987059387155644989390077339806102536259e-16
new times of 1.0010015339692981721816857305935159707228987059387155644989390077339806102536259e-16
using 233531985318574985237805361387412736 * 1.0010015339692981721816857305935159707228987059387155644989390077339806102536259e-16
23376587553478918011.37505365099104182036171550862491130828857421875  with length of 67 and dot length 20 will move 47
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 23376587553478918011.37505365099104182036171550862491130828857421875 ^2 ::== 546464845645465465456464545646548221952
 temp fract 0 temp int 546464845645465465456464545646548221952
before loop xstp is 0entering tens with lap of value 10
using t_rst as 233765875534789180113.75053650991043241447187028825283050537109375
using for fract 54646484564546546545646454564654829010944
getting the part of 54646484564546546545646454564654829010944 :: ad 41 and mad 71
    -----------------> 233765875534789180113.75053650991043241447187028825283050537109375 ^2 ::== 54646484564546546545646454564654829010944
t_ten increased 
using t_rst as 2337658755347891801137.505365099104210457880981266498565673828125
using for fract 5464648456454654654564645456465482263560192
getting the part of 5464648456454654654564645456465482263560192 :: ad 43 and mad 71
    -----------------> 2337658755347891801137.505365099104210457880981266498565673828125 ^2 ::== 5464648456454654654564645456465482263560192
t_ten increased 
using t_rst as 23376587553478918011375.05365099104164983145892620086669921875
using for fract 546464845645465465456464545646548213471117312
getting the part of 546464845645465465456464545646548213471117312 :: ad 45 and mad 71
    -----------------> 23376587553478918011375.05365099104164983145892620086669921875 ^2 ::== 546464845645465465456464545646548213471117312
t_ten increased 
using t_rst as 233765875534789180113750.5365099104237742722034454345703125
using for fract 54646484564546546545646454564654829318571032576
getting the part of 54646484564546546545646454564654829318571032576 :: ad 47 and mad 71
    -----------------> 233765875534789180113750.5365099104237742722034454345703125 ^2 ::== 54646484564546546545646454564654829318571032576
t_ten increased 
using t_rst as 2337658755347891801137505.36509910412132740020751953125
using for fract 5464648456454654654564645456465482192985289392128
getting the part of 5464648456454654654564645456465482192985289392128 :: ad 49 and mad 71
    -----------------> 2337658755347891801137505.36509910412132740020751953125 ^2 ::== 5464648456454654654564645456465482192985289392128
t_ten increased 
using t_rst as 23376587553478918011375053.6509910412132740020751953125
using for fract 546464845645465465456464545646548223802128566583296
getting the part of 546464845645465465456464545646548223802128566583296 :: ad 51 and mad 71
    -----------------> 23376587553478918011375053.6509910412132740020751953125 ^2 ::== 546464845645465465456464545646548223802128566583296
t_ten increased 
using t_rst as 233765875534789180113750536.509910404682159423828125
using for fract 54646484564546546545646454564654814309762324410400768
getting the part of 54646484564546546545646454564654814309762324410400768 :: ad 53 and mad 71
    -----------------> 233765875534789180113750536.509910404682159423828125 ^2 ::== 54646484564546546545646454564654814309762324410400768
t_ten increased 
using t_rst as 2337658755347891801137505365.0991041660308837890625
using for fract 5464648456454654654564645456465482353313436126517657600
getting the part of 5464648456454654654564645456465482353313436126517657600 :: ad 55 and mad 71
    -----------------> 2337658755347891801137505365.0991041660308837890625 ^2 ::== 5464648456454654654564645456465482353313436126517657600
t_ten increased 
using t_rst as 23376587553478918011375053650.9910430908203125
using for fract 546464845645465465456464545646548280193825199913395290112
getting the part of 546464845645465465456464545646548280193825199913395290112 :: ad 57 and mad 71
    -----------------> 23376587553478918011375053650.9910430908203125 ^2 ::== 546464845645465465456464545646548280193825199913395290112
t_ten increased 
using t_rst as 233765875534789180113750536509.910430908203125
using for fract 54646484564546546545646454564654828623845429798654116364288
getting the part of 54646484564546546545646454564654828623845429798654116364288 :: ad 59 and mad 71
    -----------------> 233765875534789180113750536509.910430908203125 ^2 ::== 54646484564546546545646454564654828623845429798654116364288
t_ten increased 
using t_rst as 2337658755347891801137505365099.104248046875
using for fract 5464648456454654654564645456465482398157028247847808549257216
getting the part of 5464648456454654654564645456465482398157028247847808549257216 :: ad 61 and mad 71
    -----------------> 2337658755347891801137505365099.104248046875 ^2 ::== 5464648456454654654564645456465482398157028247847808549257216
t_ten increased 
using t_rst as 23376587553478918011375053650991.04296875
using for fract 546464845645465465456464545646548289333304396199991850890690560
getting the part of 546464845645465465456464545646548289333304396199991850890690560 :: ad 63 and mad 71
    -----------------> 23376587553478918011375053650991.04296875 ^2 ::== 546464845645465465456464545646548289333304396199991850890690560
t_ten increased 
using t_rst as 233765875534789180113750536509910.40625
using for fract 54646484564546546545646454564654813721523236881246367128630591488
getting the part of 54646484564546546545646454564654813721523236881246367128630591488 :: ad 65 and mad 71
    -----------------> 233765875534789180113750536509910.40625 ^2 ::== 54646484564546546545646454564654813721523236881246367128630591488
t_ten increased 
using t_rst as 2337658755347891801137505365099104.25
using for fract 5464648456454654654564645456465482589096899907224862149698136309760
getting the part of 5464648456454654654564645456465482589096899907224862149698136309760 :: ad 67 and mad 71
    -----------------> 2337658755347891801137505365099104.25 ^2 ::== 5464648456454654654564645456465482589096899907224862149698136309760
t_ten increased 
using t_rst as 23376587553478918011375053650991040
using for fract 546464845645465465456464545646548108333081093212484987585420083593216
getting the part of 546464845645465465456464545646548108333081093212484987585420083593216 :: ad 69 and mad 71
    -----------------> 23376587553478918011375053650991040 ^2 ::== 546464845645465465456464545646548108333081093212484987585420083593216
t_ten increased 
using t_rst as 233765875534789180113750536509910432
using for fract 54646484564546546545646454564654826451737059794010005378274966653370368
getting the part of 54646484564546546545646454564654826451737059794010005378274966653370368 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113750536509910432
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113750536509910432 ^2 ::== 54646484564546546545646454564654826451737059794010005378274966653370368
t_ten increased 
breaking with xbrk of value 1

increasing the digits 34
-------------------------------------------------------
-------------------------------------------------------
times 34 5464648456454654654564645456465456 2335319853185749852378053613874127
main 73923260591336571.90501138737722573723853969340780167840421199798583984375 second 48325147213285857.225506181299925688443774873803704394958913326263427734375
main 5464648456454654654564645456465455 second 2335319853185749852378053613874127.25
times of 3.1654447886653907053885964180173020801980175448176046020331070803221550467954873e-17
new times of 3.1654447886653907053885964180173020801980175448176046020331070803221550467954873e-17
using 233531985318574985237805361387412736 * 3.1654447886653907053885964180173020801980175448176046020331070803221550467954873e-17
7392326059133657190.501138737722573779365120572037994861602783203125  with length of 67 and dot length 19 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 7392326059133657190.501138737722573779365120572037994861602783203125 ^2 ::== 54646484564546546545646454564654555136
 temp fract 0 temp int 54646484564546546545646454564654555136
before loop xstp is 0entering tens with lap of value 10
using t_rst as 73923260591336571905.01138737722573068822384811937808990478515625
using for fract 5464648456454654654564645456465454170112
getting the part of 5464648456454654654564645456465454170112 :: ad 40 and mad 71
    -----------------> 73923260591336571905.01138737722573068822384811937808990478515625 ^2 ::== 5464648456454654654564645456465454170112
t_ten increased 
using t_rst as 739232605913365719050.113873772257420569076202809810638427734375
using for fract 546464845645465465456464545646545622532096
getting the part of 546464845645465465456464545646545622532096 :: ad 42 and mad 71
    -----------------> 739232605913365719050.113873772257420569076202809810638427734375 ^2 ::== 546464845645465465456464545646545622532096
t_ten increased 
using t_rst as 7392326059133657190501.1387377225737509434111416339874267578125
using for fract 54646484564546546545646454564654549905178624
getting the part of 54646484564546546545646454564654549905178624 :: ad 44 and mad 71
    -----------------> 7392326059133657190501.1387377225737509434111416339874267578125 ^2 ::== 54646484564546546545646454564654549905178624
t_ten increased 
using t_rst as 73923260591336571905011.3873772257356904447078704833984375
using for fract 5464648456454654654564645456465455334115246080
getting the part of 5464648456454654654564645456465455334115246080 :: ad 46 and mad 71
    -----------------> 73923260591336571905011.3873772257356904447078704833984375 ^2 ::== 5464648456454654654564645456465455334115246080
t_ten increased 
using t_rst as 739232605913365719050113.873772257356904447078704833984375
using for fract 546464845645465465456464545646545531212501352448
getting the part of 546464845645465465456464545646545531212501352448 :: ad 48 and mad 71
    -----------------> 739232605913365719050113.873772257356904447078704833984375 ^2 ::== 546464845645465465456464545646545531212501352448
t_ten increased 
using t_rst as 7392326059133657190501138.73772257380187511444091796875
using for fract 54646484564546546545646454564654553965675065376768
getting the part of 54646484564546546545646454564654553965675065376768 :: ad 50 and mad 71
    -----------------> 7392326059133657190501138.73772257380187511444091796875 ^2 ::== 54646484564546546545646454564654553965675065376768
t_ten increased 
using t_rst as 73923260591336571905011387.377225734293460845947265625
using for fract 5464648456454654654564645456465455144365927404929024
getting the part of 5464648456454654654564645456465455144365927404929024 :: ad 52 and mad 71
    -----------------> 73923260591336571905011387.377225734293460845947265625 ^2 ::== 5464648456454654654564645456465455144365927404929024
t_ten increased 
using t_rst as 739232605913365719050113873.772257328033447265625
using for fract 546464845645465465456464545646545505213220703638126592
getting the part of 546464845645465465456464545646545505213220703638126592 :: ad 54 and mad 71
    -----------------> 739232605913365719050113873.772257328033447265625 ^2 ::== 546464845645465465456464545646545505213220703638126592
t_ten increased 
using t_rst as 7392326059133657190501138737.7225742340087890625
using for fract 54646484564546546545646454564654557900019699847633305600
getting the part of 54646484564546546545646454564654557900019699847633305600 :: ad 56 and mad 71
    -----------------> 7392326059133657190501138737.7225742340087890625 ^2 ::== 54646484564546546545646454564654557900019699847633305600
t_ten increased 
using t_rst as 73923260591336571905011387377.225738525390625
using for fract 5464648456454654654564645456465455298875855766320228335616
getting the part of 5464648456454654654564645456465455298875855766320228335616 :: ad 58 and mad 71
    -----------------> 73923260591336571905011387377.225738525390625 ^2 ::== 5464648456454654654564645456465455298875855766320228335616
t_ten increased 
using t_rst as 739232605913365719050113873772.25732421875
using for fract 546464845645465465456464545646545500873365905880922640613376
getting the part of 546464845645465465456464545646545500873365905880922640613376 :: ad 60 and mad 71
    -----------------> 739232605913365719050113873772.25732421875 ^2 ::== 546464845645465465456464545646545500873365905880922640613376
t_ten increased 
using t_rst as 7392326059133657190501138737722.57421875
using for fract 54646484564546546545646454564654561538281953977859806878236672
getting the part of 54646484564546546545646454564654561538281953977859806878236672 :: ad 62 and mad 71
    -----------------> 7392326059133657190501138737722.57421875 ^2 ::== 54646484564546546545646454564654561538281953977859806878236672
t_ten increased 
using t_rst as 73923260591336571905011387377225.734375
using for fract 5464648456454654654564645456465455005019838940953085581436387328
getting the part of 5464648456454654654564645456465455005019838940953085581436387328 :: ad 64 and mad 71
    -----------------> 73923260591336571905011387377225.734375 ^2 ::== 5464648456454654654564645456465455005019838940953085581436387328
t_ten increased 
using t_rst as 739232605913365719050113873772257.375
using for fract 546464845645465465456464545646545581631622308701990253932643876864
getting the part of 546464845645465465456464545646545581631622308701990253932643876864 :: ad 66 and mad 71
    -----------------> 739232605913365719050113873772257.375 ^2 ::== 546464845645465465456464545646545581631622308701990253932643876864
t_ten increased 
using t_rst as 7392326059133657190501138737722574
using for fract 54646484564546546545646454564654553295383925993798123645924079042560
getting the part of 54646484564546546545646454564654553295383925993798123645924079042560 :: ad 68 and mad 71
    -----------------> 7392326059133657190501138737722574 ^2 ::== 54646484564546546545646454564654553295383925993798123645924079042560
t_ten increased 
using t_rst as 73923260591336571905011387377225736
using for fract 5464648456454654654564645456465454997231393653150844138640642834169856
getting the part of 5464648456454654654564645456465454997231393653150844138640642834169856 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011387377225736
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011387377225736 ^2 ::== 5464648456454654654564645456465454997231393653150844138640642834169856
t_ten increased 
breaking with xbrk of value 1

increasing the digits 35
-------------------------------------------------------
-------------------------------------------------------
times 35 54646484564546546545646454564654568 23353198531857498523780536138741272
main 233765875534789180.1137505365099098775250041626350139267742633819580078125 second 152817533456922077.50468904385316903926650411449372768402099609375
main 54646484564546546545646454564654568 second 23353198531857498523780536138741276
times of 1.0010015339692981721816857305935134850517183201967646538000245568558333121205274e-17
new times of 1.0010015339692981721816857305935134850517183201967646538000245568558333121205274e-17
using 233531985318574985237805361387412736 * 1.0010015339692981721816857305935134850517183201967646538000245568558333121205274e-17
2337658755347891801.137505365099098497694285470061004161834716796875  with length of 67 and dot length 19 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 2337658755347891801.137505365099098497694285470061004161834716796875 ^2 ::== 5464648456454654654564645456465456128
 temp fract 0 temp int 5464648456454654654564645456465456128
before loop xstp is 0entering tens with lap of value 10
using t_rst as 23376587553478918011.37505365099098497694285470061004161834716796875
using for fract 546464845645465465456464545646545534976
getting the part of 546464845645465465456464545646545534976 :: ad 39 and mad 71
    -----------------> 23376587553478918011.37505365099098497694285470061004161834716796875 ^2 ::== 546464845645465465456464545646545534976
t_ten increased 
using t_rst as 233765875534789180113.75053650990986398028326220810413360595703125
using for fract 54646484564546546545646454564654560575488
getting the part of 54646484564546546545646454564654560575488 :: ad 41 and mad 71
    -----------------> 233765875534789180113.75053650990986398028326220810413360595703125 ^2 ::== 54646484564546546545646454564654560575488
t_ten increased 
using t_rst as 2337658755347891801137.5053650990985261159949004650115966796875
using for fract 5464648456454654654564645456465455956885504
getting the part of 5464648456454654654564645456465455956885504 :: ad 43 and mad 71
    -----------------> 2337658755347891801137.5053650990985261159949004650115966796875 ^2 ::== 5464648456454654654564645456465455956885504
t_ten increased 
using t_rst as 23376587553478918011375.05365099098344217054545879364013671875
using for fract 546464845645465465456464545646545464692047872
getting the part of 546464845645465465456464545646545464692047872 :: ad 45 and mad 71
    -----------------> 23376587553478918011375.05365099098344217054545879364013671875 ^2 ::== 546464845645465465456464545646545464692047872
t_ten increased 
using t_rst as 233765875534789180113750.5365099098416976630687713623046875
using for fract 54646484564546546545646454564654556639687344128
getting the part of 54646484564546546545646454564654556639687344128 :: ad 47 and mad 71
    -----------------> 233765875534789180113750.5365099098416976630687713623046875 ^2 ::== 54646484564546546545646454564654556639687344128
t_ten increased 
using t_rst as 2337658755347891801137505.3650990985333919525146484375
using for fract 5464648456454654654564645456465455734337478590464
getting the part of 5464648456454654654564645456465455734337478590464 :: ad 49 and mad 71
    -----------------> 2337658755347891801137505.3650990985333919525146484375 ^2 ::== 5464648456454654654564645456465455734337478590464
t_ten increased 
using t_rst as 23376587553478918011375053.650990985333919525146484375
using for fract 546464845645465465456464545646545557671149163249664
getting the part of 546464845645465465456464545646545557671149163249664 :: ad 51 and mad 71
    -----------------> 23376587553478918011375053.650990985333919525146484375 ^2 ::== 546464845645465465456464545646545557671149163249664
t_ten increased 
using t_rst as 233765875534789180113750536.5099098384380340576171875
using for fract 54646484564546546545646454564654546831973255621902336
getting the part of 54646484564546546545646454564654546831973255621902336 :: ad 53 and mad 71
    -----------------> 233765875534789180113750536.5099098384380340576171875 ^2 ::== 54646484564546546545646454564654546831973255621902336
t_ten increased 
using t_rst as 2337658755347891801137505365.0990984439849853515625
using for fract 5464648456454654654564645456465455199706159626057678848
getting the part of 5464648456454654654564645456465455199706159626057678848 :: ad 55 and mad 71
    -----------------> 2337658755347891801137505365.0990984439849853515625 ^2 ::== 5464648456454654654564645456465455199706159626057678848
t_ten increased 
using t_rst as 23376587553478918011375053650.990985870361328125
using for fract 546464845645465465456464545646545635668594792912075620352
getting the part of 546464845645465465456464545646545635668594792912075620352 :: ad 57 and mad 71
    -----------------> 23376587553478918011375053650.990985870361328125 ^2 ::== 546464845645465465456464545646545635668594792912075620352
t_ten increased 
using t_rst as 233765875534789180113750536509.90985107421875
using for fract 54646484564546546545646454564654557824461836121718982180864
getting the part of 54646484564546546545646454564654557824461836121718982180864 :: ad 59 and mad 71
    -----------------> 233765875534789180113750536509.90985107421875 ^2 ::== 54646484564546546545646454564654557824461836121718982180864
t_ten increased 
using t_rst as 2337658755347891801137505365099.098388671875
using for fract 5464648456454654654564645456465455163476163969481760768524288
getting the part of 5464648456454654654564645456465455163476163969481760768524288 :: ad 61 and mad 71
    -----------------> 2337658755347891801137505365099.098388671875 ^2 ::== 5464648456454654654564645456465455163476163969481760768524288
t_ten increased 
using t_rst as 23376587553478918011375053650990.984375
using for fract 546464845645465465456464545646545516347616396948176076852428800
getting the part of 546464845645465465456464545646545516347616396948176076852428800 :: ad 63 and mad 71
    -----------------> 23376587553478918011375053650990.984375 ^2 ::== 546464845645465465456464545646545516347616396948176076852428800
t_ten increased 
using t_rst as 233765875534789180113750536509909.84375
using for fract 54646484564546546545646454564654550050198389409530855814363873280
getting the part of 54646484564546546545646454564654550050198389409530855814363873280 :: ad 65 and mad 71
    -----------------> 233765875534789180113750536509909.84375 ^2 ::== 54646484564546546545646454564654550050198389409530855814363873280
t_ten increased 
using t_rst as 2337658755347891801137505365099098.5
using for fract 5464648456454654654564645456465455978575499916233265930904449056768
getting the part of 5464648456454654654564645456465455978575499916233265930904449056768 :: ad 67 and mad 71
    -----------------> 2337658755347891801137505365099098.5 ^2 ::== 5464648456454654654564645456465455978575499916233265930904449056768
t_ten increased 
using t_rst as 23376587553478918011375053650990984
using for fract 546464845645465465456464545646545532953839259937981236459240790425600
getting the part of 546464845645465465456464545646545532953839259937981236459240790425600 :: ad 69 and mad 71
    -----------------> 23376587553478918011375053650990984 ^2 ::== 546464845645465465456464545646545532953839259937981236459240790425600
t_ten increased 
using t_rst as 233765875534789180113750536509909856
using for fract 54646484564546546545646454564654560606137902810835424616862910584455168
getting the part of 54646484564546546545646454564654560606137902810835424616862910584455168 :: ad 71 and mad 71
i push_back a near value of 233765875534789180113750536509909856
stopping with ad 71 and mad of 71
    -----------------> 233765875534789180113750536509909856 ^2 ::== 54646484564546546545646454564654560606137902810835424616862910584455168
t_ten increased 
breaking with xbrk of value 1

increasing the digits 36
-------------------------------------------------------
-------------------------------------------------------
times 36 546464845645465465456464545646545664 233531985318574985237805361387412736
main 739232605913365719.0501138737722575111632750122225843369960784912109375 second 483251472132858572.25506181299925689831553654585150070488452911376953125
main 546464845645465465456464545646545728 second 233531985318574985237805361387412736
times of 3.1654447886653907053885964180173023474744885540371692160867537954703429283151753e-18
new times of 3.1654447886653907053885964180173023474744885540371692160867537954703429283151753e-18
using 233531985318574985237805361387412736 * 3.1654447886653907053885964180173023474744885540371692160867537954703429283151753e-18
739232605913365719.0501138737722575111632750122225843369960784912109375  with length of 70 and dot length 18 will move 52
lap for tens is more than ten will lower it 

 trying to reach the main number 54646484564546546545646454564654565923049885950498916232091151705833472  main number intpart lenght 71 
 fract 0 int 54646484564546546545646454564654565923049885950498916232091151705833472
    -----------------> 739232605913365719.0501138737722575111632750122225843369960784912109375 ^2 ::== 546464845645465465456464545646545728
 temp fract 0 temp int 546464845645465465456464545646545728
before loop xstp is 0entering tens with lap of value 10
using t_rst as 7392326059133657190.5011387377225755557219599722884595394134521484375
using for fract 54646484564546546545646454564654579712
getting the part of 54646484564546546545646454564654579712 :: ad 38 and mad 71
    -----------------> 7392326059133657190.5011387377225755557219599722884595394134521484375 ^2 ::== 54646484564546546545646454564654579712
t_ten increased 
using t_rst as 73923260591336571905.0113873772257448990785633213818073272705078125
using for fract 5464648456454654654564645456465456267264
getting the part of 5464648456454654654564645456465456267264 :: ad 40 and mad 71
    -----------------> 73923260591336571905.0113873772257448990785633213818073272705078125 ^2 ::== 5464648456454654654564645456465456267264
t_ten increased 
using t_rst as 739232605913365719050.1138737722575342559139244258403778076171875
using for fract 546464845645465465456464545646545756749824
getting the part of 546464845645465465456464545646545756749824 :: ad 42 and mad 71
    -----------------> 739232605913365719050.1138737722575342559139244258403778076171875 ^2 ::== 546464845645465465456464545646545756749824
t_ten increased 
using t_rst as 7392326059133657190501.138737722574660438112914562225341796875
using for fract 54646484564546546545646454564654567085047808
getting the part of 54646484564546546545646454564654567085047808 :: ad 44 and mad 71
    -----------------> 7392326059133657190501.138737722574660438112914562225341796875 ^2 ::== 54646484564546546545646454564654567085047808
t_ten increased 
using t_rst as 73923260591336571905011.387377225750242359936237335205078125
using for fract 5464648456454654654564645456465457533138501632
getting the part of 5464648456454654654564645456465457533138501632 :: ad 46 and mad 71
    -----------------> 73923260591336571905011.387377225750242359936237335205078125 ^2 ::== 5464648456454654654564645456465457533138501632
t_ten increased 
using t_rst as 739232605913365719050113.8737722574733197689056396484375
using for fract 546464845645465465456464545646545671949989707776
getting the part of 546464845645465465456464545646545671949989707776 :: ad 48 and mad 71
    -----------------> 739232605913365719050113.8737722574733197689056396484375 ^2 ::== 546464845645465465456464545646545671949989707776
t_ten increased 
using t_rst as 7392326059133657190501138.737722574733197689056396484375
using for fract 54646484564546546545646454564654571980073574858752
getting the part of 54646484564546546545646454564654571980073574858752 :: ad 50 and mad 71
    -----------------> 7392326059133657190501138.737722574733197689056396484375 ^2 ::== 54646484564546546545646454564654571980073574858752
t_ten increased 
using t_rst as 73923260591336571905011387.377225749194622039794921875
using for fract 5464648456454654654564645456465456873748184315199488
getting the part of 5464648456454654654564645456465456873748184315199488 :: ad 52 and mad 71
    -----------------> 73923260591336571905011387.377225749194622039794921875 ^2 ::== 5464648456454654654564645456465456873748184315199488
t_ten increased 
using t_rst as 739232605913365719050113873.7722575664520263671875
using for fract 546464845645465465456464545646545800361125882990952448
getting the part of 546464845645465465456464545646545800361125882990952448 :: ad 54 and mad 71
    -----------------> 739232605913365719050113873.7722575664520263671875 ^2 ::== 546464845645465465456464545646545800361125882990952448
t_ten increased 
using t_rst as 7392326059133657190501138737.72257518768310546875
using for fract 54646484564546546545646454564654576789485631326214160384
getting the part of 54646484564546546545646454564654576789485631326214160384 :: ad 56 and mad 71
    -----------------> 7392326059133657190501138737.72257518768310546875 ^2 ::== 54646484564546546545646454564654576789485631326214160384
t_ten increased 
using t_rst as 73923260591336571905011387377.2257537841796875
using for fract 5464648456454654654564645456465457716727494995578577747968
getting the part of 5464648456454654654564645456465457716727494995578577747968 :: ad 58 and mad 71
    -----------------> 73923260591336571905011387377.2257537841796875 ^2 ::== 5464648456454654654564645456465457716727494995578577747968
t_ten increased 
using t_rst as 739232605913365719050113873772.257568359375
using for fract 546464845645465465456464545646545810358375727225991365394432
getting the part of 546464845645465465456464545646545810358375727225991365394432 :: ad 60 and mad 71
    -----------------> 739232605913365719050113873772.257568359375 ^2 ::== 546464845645465465456464545646545810358375727225991365394432
t_ten increased 
using t_rst as 7392326059133657190501138737722.5751953125
using for fract 54646484564546546545646454564654571441802268260902006071230464
getting the part of 54646484564546546545646454564654571441802268260902006071230464 :: ad 62 and mad 71
    -----------------> 7392326059133657190501138737722.5751953125 ^2 ::== 54646484564546546545646454564654571441802268260902006071230464
t_ten increased 
using t_rst as 73923260591336571905011387377225.75
using for fract 5464648456454654654564645456465457540321039397411888574842798080
getting the part of 5464648456454654654564645456465457540321039397411888574842798080 :: ad 64 and mad 71
    -----------------> 73923260591336571905011387377225.75 ^2 ::== 5464648456454654654564645456465457540321039397411888574842798080
t_ten increased 
using t_rst as 739232605913365719050113873772257.5
using for fract 546464845645465465456464545646545743890899137915353645510654164992
getting the part of 546464845645465465456464545646545743890899137915353645510654164992 :: ad 66 and mad 71
    -----------------> 739232605913365719050113873772257.5 ^2 ::== 546464845645465465456464545646545743890899137915353645510654164992
t_ten increased 
using t_rst as 7392326059133657190501138737722575
using for fract 54646484564546546545646454564654574064571360133108637767909395922944
getting the part of 54646484564546546545646454564654574064571360133108637767909395922944 :: ad 68 and mad 71
    -----------------> 7392326059133657190501138737722575 ^2 ::== 54646484564546546545646454564654574064571360133108637767909395922944
t_ten increased 
using t_rst as 73923260591336571905011387377225752
using for fract 5464648456454654654564645456465457655687385222982589946254763394859008
getting the part of 5464648456454654654564645456465457655687385222982589946254763394859008 :: ad 70 and mad 71
i push_back a near value of 73923260591336571905011387377225752
stopping with ad 70 and mad of 71
    -----------------> 73923260591336571905011387377225752 ^2 ::== 5464648456454654654564645456465457655687385222982589946254763394859008
t_ten increased 
breaking with xbrk of value 1

increasing the digits 37


u enter as approximation 233531985318574985237805361387412736 with main number to find the power 54646484564546546545646454564654565923049885950498916232091151705833472 with psifia 71
as of the entered 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
233531985318574985237805361387412736 ^2 ::== 54537188166835122449350787396157603302397093673380837868280834062024704               me idia psifia 2               me diafora 109296397711424096295667168496962620652792277118078363810317643808768

will count the digit from 5464648456454654654564250912930916121710470178770993742800681200254976
with string of it 5464648456454654654564250912930916121710470178770993742800681200254976
73923260591336571905008718775141744 ^2 ::== 5464648456454654654564250912930916121710470178770993742800681200254976            me idia psifia 22            me diafora 49181836108091891891082203651723651795181409449101731845001060926095360

will count the digit from 5464648456454654654564645456465454997231393653150844138640642834169856
with string of it 5464648456454654654564645456465454997231393653150844138640642834169856
73923260591336571905011387377225736 ^2 ::== 5464648456454654654564645456465454997231393653150844138640642834169856            me idia psifia 33            me diafora 49181836108091891891081809108189110925818492297348072093450508871663616

will count the digit from 5464648456454654654564645456465457655687385222982589946254763394859008
with string of it 5464648456454654654564645456465457655687385222982589946254763394859008
73923260591336571905011387377225752 ^2 ::== 5464648456454654654564645456465457655687385222982589946254763394859008            me idia psifia 33            me diafora 49181836108091891891081809108189110925818492297348072093450508871663616

will count the digit from 5464648456454654654564645456465528769385159715981790299932488393293824
with string of it 5464648456454654654564645456465528769385159715981790299932488393293824
73923260591336571905011387377226232 ^2 ::== 5464648456454654654564645456465528769385159715981790299932488393293824            me idia psifia 31            me diafora 49181836108091891891081809108189036489050728342059189480255133172367360

will count the digit from 5464648456454654654564645456479316186771438755873485038665246267408384
with string of it 5464648456454654654564645456479316186771438755873485038665246267408384
73923260591336571905011387377319488 ^2 ::== 5464648456454654654564645456479316186771438755873485038665246267408384            me idia psifia 29            me diafora 49181836108091891891081809108175249736278447194625431193425905438425088

will count the digit from 5464648456454654654564645460090914386524783309626931117002330562625536
with string of it 5464648456454654654564645460090914386524783309626931117002330562625536
73923260591336571905011387401747512 ^2 ::== 5464648456454654654564645460090914386524783309626931117002330562625536            me idia psifia 26            me diafora 49181836108091891891081809104563652201139100533329921566992351283380224

will count the digit from 5464648456454654654564645464930915315512768405034748230579844596891648
with string of it 5464648456454654654564645464930915315512768405034748230579844596891648
73923260591336571905011387434484168 ^2 ::== 5464648456454654654564645464930915315512768405034748230579844596891648            me idia psifia 26            me diafora 49181836108091891891081809099723651272151115437922104453414837249114112

will count the digit from 5464648456454654654564656912930915240184978727309136307920743188922368
with string of it 5464648456454654654564656912930915240184978727309136307920743188922368
73923260591336571905011464866133616 ^2 ::== 5464648456454654654564656912930915240184978727309136307920743188922368            me idia psifia 23            me diafora 49181836108091891891081797651723648689022913545815970568459818096394240

will count the digit from 5464648456454654654865290912930916100316144949072443119355283111936000
with string of it 5464648456454654654865290912930916100316144949072443119355283111936000
73923260591336571907044884371679840 ^2 ::== 5464648456454654654865290912930916100316144949072443119355283111936000            me idia psifia 19            me diafora 49181836108091891890781163651723649822733741001426473112735868593897472

will count the digit from 5464648456454654661129290912930916461937478163888106126668771117498368
with string of it 5464648456454654661129290912930916461937478163888106126668771117498368
73923260591336571949413145389201224 ^2 ::== 5464648456454654661129290912930916461937478163888106126668771117498368            me idia psifia 17            me diafora 49181836108091891884517163651723646802656416216779064297808260027645952

will count the digit from 5464648456454657989129290912932621233035188937562850288509300215119872
with string of it 5464648456454657989129290912932621233035188937562850288509300215119872
73923260591336594459242753676432112 ^2 ::== 5464648456454657989129290912932621233035188937562850288509300215119872            me idia psifia 15            me diafora 49181836108091888556517163651721946683856690690309875299292441911230464

will count the digit from 5464648456454833309129290918068200424153692893661686892606696313585664
with string of it 5464648456454833309129290918068200424153692893661686892606696313585664
73923260591337780283559738351505520 ^2 ::== 5464648456454833309129290918068200424153692893661686892606696313585664            me idia psifia 13            me diafora 49181836108091713236517163646586365498896193056837229339484455392247808

will count the digit from 5464648456476909309129367373411974852061558666931277504510444248760320
with string of it 5464648456476909309129367373411974852061558666931277504510444248760320
73923260591487097290300651733340672 ^2 ::== 5464648456476909309129367373411974852061558666931277504510444248760320            me idia psifia 11            me diafora 49181836108069637236517087191242593064830320960941448083291297877590016

will count the digit from 5464648456869309309160681492568744920789098074228024077499650162032640
with string of it 5464648456869309309160681492568744920789098074228024077499650162032640
73923260594141200997878846044985528 ^2 ::== 5464648456869309309160681492568744920789098074228024077499650162032640            me idia psifia 10            me diafora 49181836107677237236485773072085821002260787876270892154591501543800832

will count the digit from 5464648648909315240854869873108040134772072761922358068482490186596352
with string of it 5464648648909315240854869873108040134772072761922358068482490186596352
73923261893055796356888357958613264 ^2 ::== 5464648648909315240854869873108040134772072761922358068482490186596352            me idia psifia 7            me diafora 49181835915637231304791584691546526452891811081034494615512191659409408

will count the digit from 5464686113129791027317996358379633097654995496519724391115360399523840
with string of it 5464686113129791027317996358379633097654995496519724391115360399523840
73923515292021868427395698909558264 ^2 ::== 5464686113129791027317996358379633097654995496519724391115360399523840            me idia psifia 5            me diafora 49181798451416755518328458206274934819236884131353001196686381726826496

will count the digit from 5465497042832735425688644586982472116256472429117452211244303506210816
with string of it 5465497042832735425688644586982472116256472429117452211244303506210816
73929000012395240200293542502668096 ^2 ::== 5465497042832735425688644586982472116256472429117452211244303506210816            me idia psifia 3            me diafora 49180987521713811119957809977672093142179415628923527568943318059450368

will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
233765875534789180113750536509909856 ^2 ::== 54646484564546546545646454564654560606137902810835424616862910584455168            me idia psifia 34            me diafora 5316911983139663491615228241121378304

will count the digit from 54646484564546546545646454564654826451737059794010005378274966653370368
with string of it 54646484564546546545646454564654826451737059794010005378274966653370368
233765875534789180113750536509910432 ^2 ::== 54646484564546546545646454564654826451737059794010005378274966653370368            me idia psifia 32            me diafora 260528687173843511089146183814947536896

will count the digit from 54646484564546546545646454564655964270901451681997211037118566628327424
with string of it 54646484564546546545646454564655964270901451681997211037118566628327424
233765875534789180113750536509912864 ^2 ::== 54646484564546546545646454564655964270901451681997211037118566628327424            me idia psifia 31            me diafora 1398347851565731498294805027414922493952

will count the digit from 54646484564546546545646454567469174302652546473391777990865334617243648
with string of it 54646484564546546545646454567469174302652546473391777990865334617243648
233765875534789180113750536515930016 ^2 ::== 54646484564546546545646454567469174302652546473391777990865334617243648            me idia psifia 28            me diafora 2814608379602660522892861758774182911410176

will count the digit from 54646484564546546545646454681309162054521196598613083873712358016679936
with string of it 54646484564546546545646454681309162054521196598613083873712358016679936
233765875534789180113750536759421472 ^2 ::== 54646484564546546545646454681309162054521196598613083873712358016679936            me idia psifia 26            me diafora 116654596131471310648114167641621206310846464

will count the digit from 54646484564546546545646478729309173901137046880241002790057003880284160
with string of it 54646484564546546545646478729309173901137046880241002790057003880284160
233765875534789180113750588195500320 ^2 ::== 54646484564546546545646478729309173901137046880241002790057003880284160            me idia psifia 24            me diafora 24164654607978087160929742086557965852174450688

will count the digit from 54646484564546546545648509129309192342266776779346187111411705777750016
with string of it 54646484564546546545648509129309192342266776779346187111411705777750016
233765875534789180113754931002155424 ^2 ::== 54646484564546546545648509129309192342266776779346187111411705777750016            me idia psifia 22            me diafora 2054564654626419216890828847270879320554071916544

will count the digit from 54646484564546546545976909129309169613431955591828917178750136980865024
with string of it 54646484564546546545976909129309169613431955591828917178750136980865024
233765875534789180114457343189667168 ^2 ::== 54646484564546546545976909129309169613431955591828917178750136980865024            me idia psifia 20            me diafora 330454564654603690382069641330000946658985275031552

will count the digit from 54646484564546546557692909129309157539055156297568913467020601116852224
with string of it 54646484564546546557692909129309157539055156297568913467020601116852224
233765875534789180139516603813565216 ^2 ::== 54646484564546546557692909129309157539055156297568913467020601116852224            me idia psifia 18            me diafora 12046454564654591616005270347069997234929449411018752

will count the digit from 54646484564546548451292909129309247850336038978219387030339584536870912
with string of it 54646484564546548451292909129309247850336038978219387030339584536870912
233765875534789184189722810489341056 ^2 ::== 54646484564546548451292909129309247850336038978219387030339584536870912            me idia psifia 16            me diafora 1905646454564654681927286153027720470798248432831037440

will count the digit from 54646484564546961091292909131834339126596898589831613150354539800428544
with string of it 54646484564546961091292909131834339126596898589831613150354539800428544
233765875534790066782186436756303520 ^2 ::== 54646484564546961091292909131834339126596898589831613150354539800428544            me idia psifia 14            me diafora 414545646454567179773203547012639332696918263388094595072

will count the digit from 54646484564575093091292921827386140855240860556251767183708898824552448
with string of it 54646484564575093091292921827386140855240860556251767183708898824552448
233765875534850238096617277084129472 ^2 ::== 54646484564575093091292921827386140855240860556251767183708898824552448            me idia psifia 12            me diafora 28546545646467262731574932190974605752850951617747118718976

will count the digit from 54646484568013093091473805394318243070402358244960257593721107976814592
with string of it 54646484568013093091473805394318243070402358244960257593721107976814592
233765875542203749365661047764430240 ^2 ::== 54646484568013093091473805394318243070402358244960257593721107976814592            me idia psifia 10            me diafora 3466546545827350829663677147352472294461341361629956270981120

will count the digit from 54646484649093093220269523079688030751196119438048346638859848428552192
with string of it 54646484649093093220269523079688030751196119438048346638859848428552192
233765875715625126439327813540757632 ^2 ::== 54646484649093093220269523079688030751196119438048346638859848428552192            me idia psifia 8            me diafora 84546546674623068515033464828146233487549430406768696722718720

will count the digit from 54646519929111639419443991101602381424693108642354185329426256350937088
with string of it 54646519929111639419443991101602381424693108642354185329426256350937088
233765951175768194720003369580699456 ^2 ::== 54646519929111639419443991101602381424693108642354185329426256350937088            me idia psifia 5            me diafora 35364565092873797536536947815501643222691855269097335104645103616

will count the digit from 54646929132702460380213252354644449262579617439986178653737269168439296
with string of it 54646929132702460380213252354644449262579617439986178653737269168439296
233766826416201450686141421968478624 ^2 ::== 54646929132702460380213252354644449262579617439986178653737269168439296            me idia psifia 5            me diafora 444568155913834566797789989883339529731489487262421646117462605824

will count the digit from 54849609937725831857918786344014545855138156816190778521049622565093376
with string of it 54849609937725831857918786344014545855138156816190778521049622565093376
234199935819218003170668364244160320 ^2 ::== 54849609937725831857918786344014545855138156816190778521049622565093376            me idia psifia 2            me diafora 203125373179285312272331779359979932088270865691862288958470859259904

will count the digit from 556712317771095767913977791945654040523685536988869367680708112453468160
with string of it 556712317771095767913977791945654040523685536988869367680708112453468160
746131568673444997210230372988431744 ^2 ::== 556712317771095767913977791945654040523685536988869367680708112453468160            me idia psifia 1            me diafora 502065833206549221368331337380999437382251769060726010142019272897986560


-------------------------Approximation Result Set-----------------------------------------------------

possible approximation > ::== 233765875534789180113750536509909856 ^2 54646484564546546545646454564654560606137902810835424616862910584455168             me idia psifia 34             me diafora 5316911983139663491615228241121378304


will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
possible approximation of addition ::== 233765875534789180113750536509909856 with ^2  54646484564546546545646454564654560606137902810835424616862910584455168             me idia psifia 34             me diafora 5316911983139663491615228241121378304

will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
possible approximation of addition ::== 233765875534789180113750536509909856 with ^2  54646484564546546545646454564654560606137902810835424616862910584455168             me idia psifia 34             me diafora 5316911983139663491615228241121378304

will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
possible approximation of addition ::== 233765875534789180113750536509909856 with ^2  54646484564546546545646454564654560606137902810835424616862910584455168             me idia psifia 34             me diafora 5316911983139663491615228241121378304

will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
possible approximation of addition ::== 233765875534789180113750536509909856 with ^2  54646484564546546545646454564654560606137902810835424616862910584455168             me idia psifia 34             me diafora 5316911983139663491615228241121378304

will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
possible approximation of addition ::== 233765875534789180113750536509909856 with ^2  54646484564546546545646454564654560606137902810835424616862910584455168             me idia psifia 34             me diafora 5316911983139663491615228241121378304
----removing using main number 54646484564546546545646454564654565923049885950498916232091151705833472



------------------------Bee-----------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
will count the digit from 54646484564546546545646454564654565923049885950498916232091151705833472
with string of it 54646484564546546545646454564654565923049885950498916232091151705833472
Main Number 54646484564546546545646454564654565923049885950498916232091151705833472 has number of digits 71
Using Power of 233531985318574985237805361387412736

first 54646484564546546545646454564654565923049885950498916232091151705833472 
     doted 0
     makes 54646484564546546545646454564654565923049885950498916232091151705833472

second 233531985318574985237805361387412736 
     doted 0 
     makes 233531985318574985237805361387412736

result 233999999999999999999999999999999936 
     doted 0 
     makes 233999999999999999999999999999999936


for the integer string 233999999999999999999999999999999936.000000
the numbers are 36
the retrievable integer digit is 6

entering with number of 6
recheck values of 233531985318574985237805361387412736 and result of 54537188166835122449350787396157603302397093673380837868280834062024704 with intpart 54537188166835122449350787396157603302397093673380837868280834062024704

     ----> using 6 rst is 3
     ----> using 3 with intpart 3 and fract 0
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 3.000000

from new int t  of 6 ---> 5 with 5
     ----> using 5 rst is 2.5
     ----> using 2.5 with intpart 2 and fract 0.5
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 2.500000

     ----> using 2.5 rst is 1.25
     ----> using 1.25 with intpart 1 and fract 0.25
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 1.250000

     ----> using 1.25 rst is 0.625
     ----> using 0.625 with intpart 0 and fract 0.625
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.625000

     ----> using 0.625 rst is 0.3125
     ----> using 0.3125 with intpart 0 and fract 0.3125
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.312500

     ----> using 0.3125 rst is 0.15625
     ----> using 0.15625 with intpart 0 and fract 0.15625
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.156250

     ----> using 0.15625 rst is 0.078125
     ----> using 0.078125 with intpart 0 and fract 0.078125
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.078125

from new int t  of 5 ---> 4 with 4
     ----> using 4 rst is 2
     ----> using 2 with intpart 2 and fract 0
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 2.000000

from new int t  of 4 ---> 3 with 3
     ----> using 3 rst is 1.5
     ----> using 1.5 with intpart 1 and fract 0.5
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 1.500000

     ----> using 1.5 rst is 0.75
     ----> using 0.75 with intpart 0 and fract 0.75
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.750000

     ----> using 0.75 rst is 0.375
     ----> using 0.375 with intpart 0 and fract 0.375
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.375000

     ----> using 0.375 rst is 0.1875
     ----> using 0.1875 with intpart 0 and fract 0.1875
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.187500

     ----> using 0.1875 rst is 0.09375
     ----> using 0.09375 with intpart 0 and fract 0.09375
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.093750

from new int t  of 3 ---> 2 with 2
     ----> using 2 rst is 1
     ----> using 1 with intpart 1 and fract 0
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 1.000000

from new int t  of 2 ---> 1 with 1
     ----> using 1 rst is 0.5
     ----> using 0.5 with intpart 0 and fract 0.5
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.500000

     ----> using 0.5 rst is 0.25
     ----> using 0.25 with intpart 0 and fract 0.25
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.250000

     ----> using 0.25 rst is 0.125
     ----> using 0.125 with intpart 0 and fract 0.125
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.125000

     ----> using 0.125 rst is 0.0625
     ----> using 0.0625 with intpart 0 and fract 0.0625
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.062500

from new int t  of 1 ---> 0 with 0
     ----> using 0 rst is 0
     ----> using 0 with intpart 0 and fract 0
trying to retrieve digits 
will count the digit from 54537188166835122449350787396157603302397093673380837868280834062024704
with string of it 54537188166835122449350787396157603302397093673380837868280834062024704
digits retrieved 2
                     with combination da_rst 233531985318574985237805361387412736 sq of rst 54537188166835122449350787396157603302397093673380837868280834062024704
                     with intpart 54537188166835122449350787396157603302397093673380837868280834062024704 and other part 0
                     the int string is 0.000000

--------------------------------------
Psifia,Power,Result of Power,Diafora from Main,Diairesi from Main
--------------------------------------
2 233531985318574985237805361387412736.000000 54537188166835122449350787396157603302397093673380837868280834062024704.000000 109296397711424096295667168496962620652792277118078363810317643808768.000000 1.002004 
--------------------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
will count the digit from 54646484564546546545646454564654565923049885950498916232091151705833472
with string of it 54646484564546546545646454564654565923049885950498916232091151705833472
Main Number 54646484564546546545646454564654565923049885950498916232091151705833472 has number of digits 71
Using Power of 233765875534789180113750536509909856

first 54646484564546546545646454564654565923049885950498916232091151705833472 
     doted 0
     makes 54646484564546546545646454564654565923049885950498916232091151705833472

second 233765875534789180113750536509909856 
     doted 0 
     makes 233765875534789180113750536509909856

result 233765875534789180113750536509909888 
     doted 0 
     makes 233765875534789180113750536509909888


for the integer string 233765875534789180113750536509909888.000000
the numbers are 36
the retrievable integer digit is 8

entering with number of 8
recheck values of 233765875534789180113750536509909856 and result of 54646484564546546545646454564654560606137902810835424616862910584455168 with intpart 54646484564546546545646454564654560606137902810835424616862910584455168

     ----> using 8 rst is 4
     ----> using 4 with intpart 4 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 4.000000

from new int t  of 8 ---> 7 with 7
     ----> using 7 rst is 3.5
     ----> using 3.5 with intpart 3 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.500000

     ----> using 3.5 rst is 1.75
     ----> using 1.75 with intpart 1 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.750000

     ----> using 1.75 rst is 0.875
     ----> using 0.875 with intpart 0 and fract 0.875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.875000

     ----> using 0.875 rst is 0.4375
     ----> using 0.4375 with intpart 0 and fract 0.4375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.437500

     ----> using 0.4375 rst is 0.21875
     ----> using 0.21875 with intpart 0 and fract 0.21875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.218750

     ----> using 0.21875 rst is 0.109375
     ----> using 0.109375 with intpart 0 and fract 0.109375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.109375

     ----> using 0.109375 rst is 0.0546875
     ----> using 0.0546875 with intpart 0 and fract 0.0546875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.054688

from new int t  of 7 ---> 6 with 6
     ----> using 6 rst is 3
     ----> using 3 with intpart 3 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.000000

from new int t  of 6 ---> 5 with 5
     ----> using 5 rst is 2.5
     ----> using 2.5 with intpart 2 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 2.500000

     ----> using 2.5 rst is 1.25
     ----> using 1.25 with intpart 1 and fract 0.25
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.250000

     ----> using 1.25 rst is 0.625
     ----> using 0.625 with intpart 0 and fract 0.625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.625000

     ----> using 0.625 rst is 0.3125
     ----> using 0.3125 with intpart 0 and fract 0.3125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.312500

     ----> using 0.3125 rst is 0.15625
     ----> using 0.15625 with intpart 0 and fract 0.15625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.156250

     ----> using 0.15625 rst is 0.078125
     ----> using 0.078125 with intpart 0 and fract 0.078125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.078125

from new int t  of 5 ---> 4 with 4
     ----> using 4 rst is 2
     ----> using 2 with intpart 2 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 2.000000

from new int t  of 4 ---> 3 with 3
     ----> using 3 rst is 1.5
     ----> using 1.5 with intpart 1 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.500000

     ----> using 1.5 rst is 0.75
     ----> using 0.75 with intpart 0 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.750000

     ----> using 0.75 rst is 0.375
     ----> using 0.375 with intpart 0 and fract 0.375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.375000

     ----> using 0.375 rst is 0.1875
     ----> using 0.1875 with intpart 0 and fract 0.1875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.187500

     ----> using 0.1875 rst is 0.09375
     ----> using 0.09375 with intpart 0 and fract 0.09375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.093750

from new int t  of 3 ---> 2 with 2
     ----> using 2 rst is 1
     ----> using 1 with intpart 1 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.000000

from new int t  of 2 ---> 1 with 1
     ----> using 1 rst is 0.5
     ----> using 0.5 with intpart 0 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.500000

     ----> using 0.5 rst is 0.25
     ----> using 0.25 with intpart 0 and fract 0.25
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.250000

     ----> using 0.25 rst is 0.125
     ----> using 0.125 with intpart 0 and fract 0.125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.125000

     ----> using 0.125 rst is 0.0625
     ----> using 0.0625 with intpart 0 and fract 0.0625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.062500

from new int t  of 1 ---> 0 with 0
     ----> using 0 rst is 0
     ----> using 0 with intpart 0 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.000000

--------------------------------------
Psifia,Power,Result of Power,Diafora from Main,Diairesi from Main
--------------------------------------
34 233765875534789180113750536509909856.000000 54646484564546546545646454564654560606137902810835424616862910584455168.000000 5316911983139663491615228241121378304.000000 1.000000 
--------------------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
will count the digit from 54646484564546546545646454564654565923049885950498916232091151705833472
with string of it 54646484564546546545646454564654565923049885950498916232091151705833472
Main Number 54646484564546546545646454564654565923049885950498916232091151705833472 has number of digits 71
Using Power of 233765875534789180113750536509909856

first 54646484564546546545646454564654565923049885950498916232091151705833472 
     doted 0
     makes 54646484564546546545646454564654565923049885950498916232091151705833472

second 233765875534789180113750536509909856 
     doted 0 
     makes 233765875534789180113750536509909856

result 233765875534789180113750536509909888 
     doted 0 
     makes 233765875534789180113750536509909888


for the integer string 233765875534789180113750536509909888.000000
the numbers are 36
the retrievable integer digit is 8

entering with number of 8
recheck values of 233765875534789180113750536509909856 and result of 54646484564546546545646454564654560606137902810835424616862910584455168 with intpart 54646484564546546545646454564654560606137902810835424616862910584455168

     ----> using 8 rst is 4
     ----> using 4 with intpart 4 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 4.000000

from new int t  of 8 ---> 7 with 7
     ----> using 7 rst is 3.5
     ----> using 3.5 with intpart 3 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.500000

     ----> using 3.5 rst is 1.75
     ----> using 1.75 with intpart 1 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.750000

     ----> using 1.75 rst is 0.875
     ----> using 0.875 with intpart 0 and fract 0.875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.875000

     ----> using 0.875 rst is 0.4375
     ----> using 0.4375 with intpart 0 and fract 0.4375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.437500

     ----> using 0.4375 rst is 0.21875
     ----> using 0.21875 with intpart 0 and fract 0.21875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.218750

     ----> using 0.21875 rst is 0.109375
     ----> using 0.109375 with intpart 0 and fract 0.109375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.109375

     ----> using 0.109375 rst is 0.0546875
     ----> using 0.0546875 with intpart 0 and fract 0.0546875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.054688

from new int t  of 7 ---> 6 with 6
     ----> using 6 rst is 3
     ----> using 3 with intpart 3 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.000000

from new int t  of 6 ---> 5 with 5
     ----> using 5 rst is 2.5
     ----> using 2.5 with intpart 2 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 2.500000

     ----> using 2.5 rst is 1.25
     ----> using 1.25 with intpart 1 and fract 0.25
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.250000

     ----> using 1.25 rst is 0.625
     ----> using 0.625 with intpart 0 and fract 0.625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.625000

     ----> using 0.625 rst is 0.3125
     ----> using 0.3125 with intpart 0 and fract 0.3125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.312500

     ----> using 0.3125 rst is 0.15625
     ----> using 0.15625 with intpart 0 and fract 0.15625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.156250

     ----> using 0.15625 rst is 0.078125
     ----> using 0.078125 with intpart 0 and fract 0.078125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.078125

from new int t  of 5 ---> 4 with 4
     ----> using 4 rst is 2
     ----> using 2 with intpart 2 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 2.000000

from new int t  of 4 ---> 3 with 3
     ----> using 3 rst is 1.5
     ----> using 1.5 with intpart 1 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.500000

     ----> using 1.5 rst is 0.75
     ----> using 0.75 with intpart 0 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.750000

     ----> using 0.75 rst is 0.375
     ----> using 0.375 with intpart 0 and fract 0.375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.375000

     ----> using 0.375 rst is 0.1875
     ----> using 0.1875 with intpart 0 and fract 0.1875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.187500

     ----> using 0.1875 rst is 0.09375
     ----> using 0.09375 with intpart 0 and fract 0.09375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.093750

from new int t  of 3 ---> 2 with 2
     ----> using 2 rst is 1
     ----> using 1 with intpart 1 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.000000

from new int t  of 2 ---> 1 with 1
     ----> using 1 rst is 0.5
     ----> using 0.5 with intpart 0 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.500000

     ----> using 0.5 rst is 0.25
     ----> using 0.25 with intpart 0 and fract 0.25
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.250000

     ----> using 0.25 rst is 0.125
     ----> using 0.125 with intpart 0 and fract 0.125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.125000

     ----> using 0.125 rst is 0.0625
     ----> using 0.0625 with intpart 0 and fract 0.0625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.062500

from new int t  of 1 ---> 0 with 0
     ----> using 0 rst is 0
     ----> using 0 with intpart 0 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.000000

--------------------------------------
Psifia,Power,Result of Power,Diafora from Main,Diairesi from Main
--------------------------------------
34 233765875534789180113750536509909856.000000 54646484564546546545646454564654560606137902810835424616862910584455168.000000 5316911983139663491615228241121378304.000000 1.000000 
--------------------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
will count the digit from 54646484564546546545646454564654565923049885950498916232091151705833472
with string of it 54646484564546546545646454564654565923049885950498916232091151705833472
Main Number 54646484564546546545646454564654565923049885950498916232091151705833472 has number of digits 71
Using Power of 233765875534789180113750536509909856

first 54646484564546546545646454564654565923049885950498916232091151705833472 
     doted 0
     makes 54646484564546546545646454564654565923049885950498916232091151705833472

second 233765875534789180113750536509909856 
     doted 0 
     makes 233765875534789180113750536509909856

result 233765875534789180113750536509909888 
     doted 0 
     makes 233765875534789180113750536509909888


for the integer string 233765875534789180113750536509909888.000000
the numbers are 36
the retrievable integer digit is 8

entering with number of 8
recheck values of 233765875534789180113750536509909856 and result of 54646484564546546545646454564654560606137902810835424616862910584455168 with intpart 54646484564546546545646454564654560606137902810835424616862910584455168

     ----> using 8 rst is 4
     ----> using 4 with intpart 4 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 4.000000

from new int t  of 8 ---> 7 with 7
     ----> using 7 rst is 3.5
     ----> using 3.5 with intpart 3 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.500000

     ----> using 3.5 rst is 1.75
     ----> using 1.75 with intpart 1 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.750000

     ----> using 1.75 rst is 0.875
     ----> using 0.875 with intpart 0 and fract 0.875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.875000

     ----> using 0.875 rst is 0.4375
     ----> using 0.4375 with intpart 0 and fract 0.4375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.437500

     ----> using 0.4375 rst is 0.21875
     ----> using 0.21875 with intpart 0 and fract 0.21875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.218750

     ----> using 0.21875 rst is 0.109375
     ----> using 0.109375 with intpart 0 and fract 0.109375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.109375

     ----> using 0.109375 rst is 0.0546875
     ----> using 0.0546875 with intpart 0 and fract 0.0546875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.054688

from new int t  of 7 ---> 6 with 6
     ----> using 6 rst is 3
     ----> using 3 with intpart 3 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.000000

from new int t  of 6 ---> 5 with 5
     ----> using 5 rst is 2.5
     ----> using 2.5 with intpart 2 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 2.500000

     ----> using 2.5 rst is 1.25
     ----> using 1.25 with intpart 1 and fract 0.25
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.250000

     ----> using 1.25 rst is 0.625
     ----> using 0.625 with intpart 0 and fract 0.625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.625000

     ----> using 0.625 rst is 0.3125
     ----> using 0.3125 with intpart 0 and fract 0.3125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.312500

     ----> using 0.3125 rst is 0.15625
     ----> using 0.15625 with intpart 0 and fract 0.15625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.156250

     ----> using 0.15625 rst is 0.078125
     ----> using 0.078125 with intpart 0 and fract 0.078125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.078125

from new int t  of 5 ---> 4 with 4
     ----> using 4 rst is 2
     ----> using 2 with intpart 2 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 2.000000

from new int t  of 4 ---> 3 with 3
     ----> using 3 rst is 1.5
     ----> using 1.5 with intpart 1 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.500000

     ----> using 1.5 rst is 0.75
     ----> using 0.75 with intpart 0 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.750000

     ----> using 0.75 rst is 0.375
     ----> using 0.375 with intpart 0 and fract 0.375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.375000

     ----> using 0.375 rst is 0.1875
     ----> using 0.1875 with intpart 0 and fract 0.1875
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.187500

     ----> using 0.1875 rst is 0.09375
     ----> using 0.09375 with intpart 0 and fract 0.09375
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.093750

from new int t  of 3 ---> 2 with 2
     ----> using 2 rst is 1
     ----> using 1 with intpart 1 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.000000

from new int t  of 2 ---> 1 with 1
     ----> using 1 rst is 0.5
     ----> using 0.5 with intpart 0 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.500000

     ----> using 0.5 rst is 0.25
     ----> using 0.25 with intpart 0 and fract 0.25
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.250000

     ----> using 0.25 rst is 0.125
     ----> using 0.125 with intpart 0 and fract 0.125
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.125000

     ----> using 0.125 rst is 0.0625
     ----> using 0.0625 with intpart 0 and fract 0.0625
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.062500

from new int t  of 1 ---> 0 with 0
     ----> using 0 rst is 0
     ----> using 0 with intpart 0 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 0.000000

--------------------------------------
Psifia,Power,Result of Power,Diafora from Main,Diairesi from Main
--------------------------------------
34 233765875534789180113750536509909856.000000 54646484564546546545646454564654560606137902810835424616862910584455168.000000 5316911983139663491615228241121378304.000000 1.000000 
--------------------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
will count the digit from 54646484564546546545646454564654565923049885950498916232091151705833472
with string of it 54646484564546546545646454564654565923049885950498916232091151705833472
Main Number 54646484564546546545646454564654565923049885950498916232091151705833472 has number of digits 71
Using Power of 233765875534789180113750536509909856

first 54646484564546546545646454564654565923049885950498916232091151705833472 
     doted 0
     makes 54646484564546546545646454564654565923049885950498916232091151705833472

second 233765875534789180113750536509909856 
     doted 0 
     makes 233765875534789180113750536509909856

result 233765875534789180113750536509909888 
     doted 0 
     makes 233765875534789180113750536509909888


for the integer string 233765875534789180113750536509909888.000000
the numbers are 36
the retrievable integer digit is 8

entering with number of 8
recheck values of 233765875534789180113750536509909856 and result of 54646484564546546545646454564654560606137902810835424616862910584455168 with intpart 54646484564546546545646454564654560606137902810835424616862910584455168

     ----> using 8 rst is 4
     ----> using 4 with intpart 4 and fract 0
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 4.000000

from new int t  of 8 ---> 7 with 7
     ----> using 7 rst is 3.5
     ----> using 3.5 with intpart 3 and fract 0.5
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 3.500000

     ----> using 3.5 rst is 1.75
     ----> using 1.75 with intpart 1 and fract 0.75
trying to retrieve digits 
will count the digit from 54646484564546546545646454564654560606137902810835424616862910584455168
with string of it 54646484564546546545646454564654560606137902810835424616862910584455168
digits retrieved 34
                     with combination da_rst 233765875534789180113750536509909856 sq of rst 54646484564546546545646454564654560606137902810835424616862910584455168
                     with intpart 54646484564546546545646454564654560606137902810835424616862910584455168 and other part 0
                     the int string is 1.750000

     ----> using 1.75 rst is 0.875
     ----> using 0.875 with intpart 