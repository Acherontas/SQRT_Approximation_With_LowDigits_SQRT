#include "bee_cls.h"

using namespace std;
bee_cls::bee_cls()
{
    //ctor
}

bee_cls::~bee_cls()
{
    //dtor
}

bee_cls::bee_cls(const bee_cls& other)
{
    //copy ctor
}

bee_cls& bee_cls::operator=(const bee_cls& rhs)
{
    if (this == &rhs) return *this; // handle self assignment
    //assignment operator
    return *this;
}


void bee_cls::bee_show(int lxpre){
 long double prw;
 long double rst;
 int psi;
 cout<<"--------------------------------------\n";
 for(auto io=0;io<=this->da_psifia.size()-1;io++){
    cout<<"psifia " << std::setprecision(lxpre)<<this->da_psifia[io] << " ";
    cout<<"PWR "<<std::setprecision(lxpre)<<this->da_pwrs[io] <<" \n";
    cout<<" ------------> RESULT "<<std::setprecision(lxpre)<<this->da_rsts[io] <<"\n";
    cout<<" ------------> DIAFORA "<<std::setprecision(lxpre)<<this->dfr[io] <<"\n";
    cout<<" ------------> DIAIRESI main/result " << std::setprecision(lxpre)<<this->da_dr[io]<<"\n";
 }
 cout<<"--------------------------------------\n";
}

int bee_cls::bee_man(long double fr,long double sc,int rts,int logl){
    //int rtr=0;
    this->rtr=0;
    this->da_pwrs.clear();
    this->da_rsts.clear();
    this->da_psifia.clear();
    cout<<"first number second number is the qube one dimension and third the precision \n";
    int lxpre=-1;
    long double first,second,rst;
    eql_digits_cnt *b_d=new eql_digits_cnt();
    int f_dit=0;
    first=fr;
    second=sc;
    lxpre=rts;
    if(logl==0){b_d->fcnt(0,first,lxpre,1,0);}
    if(logl==1){b_d->fcnt(0,first,lxpre,1,1);}
    f_dit=b_d->mnarcnt;
    cout<<"Main Number " <<std::setprecision(lxpre)<<first << " has number of digits " << f_dit <<"\n";
    cout<<"Using Power of " <<std::setprecision(lxpre)<<second << "\n";
    rst=(long double)first/(long double)second;
    long double fr_f,int_f,fr_s,int_s,fr_rs,int_rsl;
    fr_f=modfl(first,&int_f);
    fr_s=modfl(second,&int_s);
    fr_rs=modfl(rst,&int_rsl);
    cout<<"\n";
    cout<<"first " << std::setprecision(lxpre) << int_f << " \n";
    cout<<"     doted " <<std::setprecision(lxpre) << fr_f << "\n";
    cout<<"     makes " <<std::setprecision(lxpre)<< first<<"\n";
    cout<<"\n";
    cout<<"second " << std::setprecision(lxpre) <<int_s << " \n";
    cout<<"     doted " <<std::setprecision(lxpre) << fr_s << " \n";
    cout<<"     makes " <<std::setprecision(lxpre) << second <<"\n";
    cout<<"\n";
    cout<<"result " <<std::setprecision(lxpre) << int_rsl << " \n";
    cout<<"     doted " <<std::setprecision(lxpre) << fr_rs << " \n";
    cout<<"     makes " <<std::setprecision(lxpre) << rst <<"\n";
    long double get_dfr;
    if(int_s>int_rsl){get_dfr=int_s-int_rsl;}
    if(int_s<int_rsl){get_dfr=int_rsl-int_s;}
    cout<<"\n";
    if(get_dfr==1){cout<<"u can easily almost retrieve the dots digits \n";}
    //getting the last digit of the int_rsl
    string last_digit;
    last_digit.clear();
    last_digit+=to_string(int_rsl);
    int xp=-1;
    char mk;
    int lk;
    for(int i=0;i<=last_digit.size()-1;i++){
            if(last_digit.at(i)!=*"."){xp+=1;}
            if(last_digit.at(i)==*"."){
            mk=last_digit.at(i-1);
            lk=stoi(&mk);
            break;}
            }
            xp+=1;
    std::this_thread::sleep_for(std::chrono::milliseconds(1500));
    cout<<"\n";
    cout<<"for the integer string " <<std::setprecision(lxpre)  << last_digit << "\n";
    cout<<"the numbers are " <<std::setprecision(lxpre) << xp <<"\n";
    cout<<"the retrievable integer digit is " <<std::setprecision(lxpre) << lk <<"\n";
    cout<<"\n";
    //lowering
    long double newd,new_int_t=-1,nr_lw;
    new_int_t=lk;
    newd=new_int_t+fr_rs;
    cout<<"entering with number of " <<std::setprecision(lxpre) <<newd <<"\n";
    int myfunc=-1,xpp=1,stop=-1,status=-1,lx=1,tmp_lk=-1,tms=0,go_down=0;
    string int_string;string mn_string;
    mn_string.clear();
    mn_string+=to_string(newd);
    tmp_lk=lk;
    long double da_rst,da_sq_rst,fr_da,int_da;
    //sometimes the value of power of the second is bigger than the first so we use the second-1;
    //so we recheck
    long double recheck_them;
    recheck_them=second*second;
    long double frck,intck;
    frck=modfl(recheck_them,&intck);
    cout<<"recheck values of " << second << " and result of " << recheck_them << " with intpart " << intck <<"\n";
    cout<<"\n";
    if(intck>first){
      //if the second power is bigger than the actual first power we lower it;
      if(logl==1){cout<<"recheck power " << second << " of result " << recheck_them <<"\n";}
      if(logl==1){cout<<"lowering second to value of " << second <<"\n"; cout<<"\n";}
      second=second-1;
    }
    int insr=0;int st=0;int fbd=0;
    for(;;){
        if(logl==1){cout<<"     ----> using " <<std::setprecision(lxpre) << newd ;
                       //cout<<" with string " << mn_string;
                   }
        nr_lw=(long double)newd/(long double)2;
        tms+=1;
        if(logl==1){cout<<" rst is " <<std::setprecision(lxpre)<< nr_lw <<"\n";}
        da_rst=-1;
        frck=modf(nr_lw,&intck);
        if(logl==1){cout <<"     ----> using " <<std::setprecision(lxpre)<< nr_lw <<" with intpart " <<std::setprecision(lxpre)<< intck <<" and fract " <<std::setprecision(lxpre)<< frck <<"\n";}
        da_rst=second+frck;
        da_sq_rst=da_rst*da_rst;
        fr_da=modfl(da_sq_rst,&int_da);
        if(logl==1){cout<<"trying to retrieve digits \n";b_d->fcnt(0,int_da,lxpre,0,1);}
        if(logl==0){b_d->fcnt(0,int_da,lxpre,0,0);}
        fbd=b_d->f_cnt;
        if(logl==1){cout<<"digits retrieved "<< fbd <<"\n";}
        if(insr>0 && st==1){
            if(insr>fbd){
                this->da_psifia.push_back(fbd);
                this->da_pwrs.push_back(da_rst);
                this->da_rsts.push_back(da_sq_rst);
                if(da_sq_rst<first){drf=first-da_sq_rst; this->dfr.push_back(drf);}
                if(da_sq_rst>first){drf=da_sq_rst-first; this->dfr.push_back(drf);}
                this->da_dr.push_back((long double)first/(long double)da_sq_rst);
                insr=fbd;
            }
        }
        if(insr==0 && st==0){
                            this->da_psifia.push_back(fbd);
                            this->da_pwrs.push_back(da_rst);
                            this->da_rsts.push_back(da_sq_rst);
                            if(da_sq_rst<first){drf=first-da_sq_rst; this->dfr.push_back(drf);}
                            if(da_sq_rst>first){drf=da_sq_rst-first; this->dfr.push_back(drf);}
                            this->da_dr.push_back((long double)first/(long double)da_sq_rst);
                            insr=fbd;
                            st=1;
                            }
        if(logl==1){
          cout<<"                     with combination da_rst " <<std::setprecision(lxpre)<< da_rst << " sq of rst " << da_sq_rst << "\n";
          cout<<"                     with intpart " << int_da << " and other part " << fr_da <<"\n";
        }
        if(int_da==first){
        cout<<"\n";
        cout<<"     ----> using " <<std::setprecision(lxpre)<< newd << " \n";
        cout<<"     ----> with rst " <<std::setprecision(lxpre)<< nr_lw <<" \n";
        cout<<"     ----> the times i run " <<std::setprecision(lxpre)<< tms <<"\n";
        cout<<"     ----> i just go down :" <<std::setprecision(lxpre)<< go_down <<"\n";
        cout<<"     ------------------- found  @--------------------------- \n";
        cout<<"     for number " <<std::setprecision(lxpre) << first <<"  \n";
        cout<<"     power result is  " <<std::setprecision(lxpre) <<da_rst << "\n";
        cout<<"     with result of the power * power  " <<std::setprecision(lxpre)<< da_sq_rst <<"\n";
        cout<<"\n";
        this->rtr=1;
        }
        int_string.clear();
        int_string+=to_string(nr_lw);
        if(logl==1){
          cout<<"                     the int string is " << int_string <<"\n";
          cout<<"\n";}
        if(lx==2){lx=1;}
        if(mn_string.at(0)=='0' && int_string.at(2)=='0' && new_int_t==0){
           stop=1;
        }
        if(mn_string.at(0)!='0' && int_string.at(2)=='0'){
            go_down+=1;
            if(logl==1){cout<<"from new int t  of " <<std::setprecision(lxpre)<< new_int_t <<" ---> ";}
          new_int_t=tmp_lk-1;
          newd=new_int_t+fr_rs;
          mn_string.clear();
          mn_string+=to_string(newd);
          int_string.clear();
          nr_lw=-1;
          if(logl==1){cout<<std::setprecision(lxpre)<< new_int_t << " with " <<std::setprecision(lxpre)<< newd <<"\n";}
          lx=2;
          if(tmp_lk>=0){tmp_lk=tmp_lk-1;}
        }
        if(lx==1){newd=nr_lw;}
        if(stop==1){break;}
        if(this->rtr==1){break;}
     }
//bee_show(lxpre);
     return 0;
}
