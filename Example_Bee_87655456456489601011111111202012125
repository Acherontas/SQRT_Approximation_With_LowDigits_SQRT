acherontas@acherontas:~/Documents/oxoros $  ./sqrt_sum_of_times_arm64 87655456456489601011111111202012125 60 150 0 0
voyeristic behaviours and others have fun 
ur number ,ur precision , ur sleep time , ur log ,ur automation 0 no 1 auto  
35
with main number 87655456456489601011111111202012128
Main cdi 115
Secondary cdi 7
Exiting Secondary cdi 7
with sqrt of math 296066641917811471.99345098301572393184599718551908154040575

9 25 |34 16| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------
error continue with the rest 

-------------------------------------------------------------------------

9 |25| 34 |16| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------
error continue with the rest 
error continue with the rest 

-------------------------------------------------------------------------

9 26 |35 17| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------

-------------------------------------------------------------------------

9 |26| 35 |17| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------

-------------------------------------------------------------------------

10 25 |35 15| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------
error continue with the rest 

-------------------------------------------------------------------------

10 |25| 35 |15| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------
error continue with the rest 
error continue with the rest 

-------------------------------------------------------------------------

10 26 |36 16| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------
error continue with the rest 

-------------------------------------------------------------------------

10 |26| 36 |16| 296066641917811471.99345098301572393184599718551908154040575  and main 87655456456489601011111111202012128
-------------------------------------------------------------------------
error continue with the rest 
error continue with the rest 

-------------------------------------------------------------------------



---------order of near approximation numbers--------
|----------bigger value is the nearest-------------|

 289644116986661290  289644116986661290  271541359674994959  271541359674994959  271541359674994959  271541359674994959  266000622510407672 
----------------------------------------------------

enter a number from above 
289644116986661290
lenght of 289644116986661290 18
lenght of 87655456456489601011111111202012128 is 35
default 4 loops enter 4 or more [4 is 3] 
suggested value : 19
19
-------------------------------------------------------
times 1 8 2
main 2.82842712474619009760337744841939596869449277831725483251102 second 1.41421356237309504880168872420969798434724638915862741625551
main 7.99999999999999999999999999999999922962802224510565877760882 second 1.99999999999999999999999999999999980740700556127641469440221
times of 1.41421356237309504880168872420969817694024082788221272185331
new times of 1.41421356237309504880168872420969817694024082788221272185331
using 289644116986661290 * 1.41421356237309504880168872420969817694024082788221272185331
409618638504115755.380675411974172983597952679701847955584526  with length of 60 and dot length 18 will move 42
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 409618638504115755.380675411974172983597952679701847955584526 ^2 ::== 167787429009965462480879562368928224
 temp fract 0 temp int 167787429009965462480879562368928224
before loop xstp is 0
getting the part of 16778742900996546248087956236892825600 :: ad 38 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 2 87 28
main 9.32737905308881504555447554232055747152764772658487564871228 second 5.29150262212918118100323150727852080201865855473882535966131
main 87.0000000000000000000000000000000123259516440783094595582588 second 28
times of 0.333120680467457680198374126511448474247666188852188940825517
new times of 0.333120680467457680198374126511448474247666188852188940825517
using 289644116986661290 * 0.333120680467457680198374126511448474247666188852188940825517
96486445343992526.8641683762756159348228379712963942438364029  with length of 60 and dot length 17 will move 43
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 96486445343992526.8641683762756159348228379712963942438364029 ^2 ::== 9309634135119257165712067554908646
 temp fract 0 temp int 9309634135119257165712067554908646
before loop xstp is 0
getting the part of 930963413511925716571206755490864512 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 3 876 289
main 29.5972971738974841141686860587716758354154238757579000979486 second 17
main 876 second 289
times of 0.102412792989264650914078498473258399558670853304181229050276
new times of 0.102412792989264650914078498473258399558670853304181229050276
using 289644116986661290 * 0.102412792989264650914078498473258399558670853304181229050276
29663262993513295.747347675267178650215793567213040660135448  with length of 59 and dot length 17 will move 42
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 29663262993513295.747347675267178650215793567213040660135448 ^2 ::== 879909171422335371542788619839208.875
 temp fract 0.875 temp int 879909171422335371542788619839208
before loop xstp is 0
getting the part of 87990917142233537154278861983920896 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 4 8765 2896
main 93.621578709184347955860990798618479804766491043410941289938 second 53.8144961882948412686523418486816170857517184536483908865923
main 8765 second 2896
times of 0.0323278932006852030234326625685837277180331892859565856056587
new times of 0.0323278932006852030234326625685837277180331892859565856056587
using 289644116986661290 * 0.0323278932006852030234326625685837277180331892859565856056587
9363584080151557.03237297213421569397340249452099669724702835  with length of 60 and dot length 16 will move 44
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 9363584080151557.03237297213421569397340249452099669724702835 ^2 ::== 87676706826067680431102182530513.09375
 temp fract 0.09375 temp int 87676706826067680431102182530513
before loop xstp is 0
getting the part of 8767670682606768043110218253051309 :: ad 34 and mad 35
getting the part of 876767068260676804311021825305130880 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 5 87655 28964
main 296.065871048994770825171389700282150534888617954925406906408 second 170.18813119603846216975295812525943939630994932050685843283
main 87654.999999999999999999999999999987378225516463811113412343 second 28963.9999999999999999999999999999968445563791159527783530857
times of 0.01022185716920987331947146076854999991920960311697633912339
new times of 0.01022185716920987331947146076854999991920960311697633912339
using 289644116986661290 * 0.01022185716920987331947146076854999991920960311697633912339
2960700793739566.95685865873166163876953338451869512937264517  with length of 60 and dot length 16 will move 44
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 2960700793739566.95685865873166163876953338451869512937264517 ^2 ::== 8765749190050101800843014675171.1533203125
 temp fract 0.1533203125 temp int 8765749190050101800843014675171
before loop xstp is 0
getting the part of 876574919005010180084301467517115.25 :: ad 33 and mad 35
getting the part of 87657491900501018008430146751711536 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 6 876554 289644
main 936.244626152802011371252210168039885155595062028480021740126 second 538.185841508302780434563944058211939308840883068208441240179
main 876554.000000000000000000000000000100974195868289511092701256 second 289644
times of 0.00323239779229951944929379586723025452925280811390978356565304
new times of 0.00323239779229951944929379586723025452925280811390978356565304
using 289644116986661290 * 0.00323239779229951944929379586723025452925280811390978356565304
936245004300227.693658904254468666608982041488218328595394269  with length of 60 and dot length 15 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 936245004300227.693658904254468666608982041488218328595394269 ^2 ::== 876554708077133372591319844761.012451171875
 temp fract 0.012451171875 temp int 876554708077133372591319844761
before loop xstp is 0
getting the part of 87655470807713337259131984476101.234375 :: ad 32 and mad 35
getting the part of 8765547080771333725913198447610124 :: ad 34 and mad 35
getting the part of 876554708077133372591319844761012480 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 7 8765545 2896441
main 2960.66631014033731143113953950120758446414696529982982432821 second 1701.89335741109231229903763904539133283875896176888272272407
main 8765545 second 2896441
times of 0.00102217387136155623795932302418768683616254601003818793233816
new times of 0.00102217387136155623795932302418768683616254601003818793233816
using 289644116986661290 * 0.00102217387136155623795932302418768683616254601003818793233816
296066648377355.063449900895451781784178946210772664926480502  with length of 60 and dot length 15 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 296066648377355.063449900895451781784178946210772664926480502 ^2 ::== 87655460281400401625275792008.493682861328125
 temp fract 0.493682861328125 temp int 87655460281400401625275792008
before loop xstp is 0
getting the part of 8765546028140040162527579200849.369140625 :: ad 31 and mad 35
getting the part of 876554602814004016252757920084937 :: ad 33 and mad 35
getting the part of 87655460281400401625275792008493696 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 8 87655456 28964411
main 9362.44925219891378824642377377157804110412729679050249221954 second 5381.85943703475035304966033554203039331663586751568263202036
main 87655456 second 28964411
times of 0.000323239759724405022019830604315467647319735532339156850677687
new times of 0.000323239759724405022019830604315467647319735532339156850677687
using 289644116986661290 * 0.000323239759724405022019830604315467647319735532339156850677687
93624494780355.8545378658733652638823793598610301103235542541  with length of 60 and dot length 14 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 93624494780355.8545378658733652638823793598610301103235542541 ^2 ::== 8765546022876880651045852178.90469837188720703125
 temp fract 0.90469837188720703125 temp int 8765546022876880651045852178
before loop xstp is 0
getting the part of 876554602287688065104585217890.4698486328125 :: ad 30 and mad 35
getting the part of 87655460228768806510458521789046.984375 :: ad 32 and mad 35
getting the part of 8765546022876880651045852178904699 :: ad 34 and mad 35
getting the part of 876554602287688065104585217890469760 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 9 876554564 289644116
main 29606.6641822411327191096157482632065235475333612632934349271 second 17018.9340441756222231226233440929550957691195754254533651739
main 876554564 second 289644115.999999999999999999999999948301211715435770320536957
times of 0.000102217385221252458375883650777367119993119724508185787550386
new times of 0.000102217385221252458375883650777367119993119724508185787550386
using 289644116986661290 * 0.000102217385221252458375883650777367119993119724508185787550386
29606664283095.069881937501745083878435926133532163362360734  with length of 59 and dot length 14 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 29606664283095.069881937501745083878435926133532163362360734 ^2 ::== 876554569971897308244905157.791301727294921875
 temp fract 0.791301727294921875 temp int 876554569971897308244905157
before loop xstp is 0
getting the part of 87655456997189730824490515779.1301727294921875 :: ad 29 and mad 35
getting the part of 8765545699718973082449051577913.0166015625 :: ad 31 and mad 35
getting the part of 876554569971897308244905157791301.75 :: ad 33 and mad 35
getting the part of 87655456997189730824490515779130176 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 10 8765545645 2896441169
main 93624.4927623108674324349946508041954626608352092147015996275 second 53818.5950113898829936964218908901780539308258522504983210064
main 8765545645.00000000000000000000000165436122510605534974281738 second 2896441169.00000000000000000000000041359030627651383743570435
times of 3.23239752853792099350024791236504442576885542983074575083868e-05
new times of 3.23239752853792099350024791236504442576885542983074575083868e-05
using 289644116986661290 * 3.23239752853792099350024791236504442576885542983074575083868e-05
9362449279032.3241394025799372285499117506135657862387233763  with length of 59 and dot length 13 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 9362449279032.3241394025799372285499117506135657862387233763 ^2 ::== 87655456502452886072289004.89807872474193572998046875
 temp fract 0.89807872474193572998046875 temp int 87655456502452886072289004
before loop xstp is 0
getting the part of 8765545650245288607228900489.80787181854248046875 :: ad 28 and mad 35
getting the part of 876554565024528860722890048980.7872314453125 :: ad 30 and mad 35
getting the part of 87655456502452886072289004898078.734375 :: ad 32 and mad 35
getting the part of 8765545650245288607228900489807873 :: ad 34 and mad 35
getting the part of 876554565024528860722890048980787200 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 11 87655456456 28964411698
main 296066.641916984629415137636895037255590671267667821235972624 second 170189.340729670846210404412493145424257130702268673053904197
main 87655456456 second 28964411697.9999999999999999999999966912775497878893005143652
times of 1.02217384908055324457616621222988838749820242261841127030427e-05
new times of 1.02217384908055324457616621222988838749820242261841127030427e-05
using 289644116986661290 * 1.02217384908055324457616621222988838749820242261841127030427e-05
2960666419237.93625854279435417600079821624260711931952982923  with length of 60 and dot length 13 will move 47
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 2960666419237.93625854279435417600079821624260711931952982923 ^2 ::== 8765545646003183342116919.9007926993072032928466796875
 temp fract 0.9007926993072032928466796875 temp int 8765545646003183342116919
before loop xstp is 0
getting the part of 876554564600318334211691990.079269886016845703125 :: ad 27 and mad 35
getting the part of 87655456460031833421169199007.927001953125 :: ad 29 and mad 35
getting the part of 8765545646003183342116919900792.7001953125 :: ad 31 and mad 35
getting the part of 876554564600318334211691990079269.875 :: ad 33 and mad 35
getting the part of 87655456460031833421169199007927008 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 12 876554564564 289644116986
main 936244.927657287764704744186223740599645241926625643537449202 second 538185.950193796865156404375713961385496931997396560451440983
main 876554564564 second 289644116986.000000000000000000000052939559203393771191770156
times of 3.23239752769617388808380534328930881748156196096475093898113e-06
new times of 3.23239752769617388808380534328930881748156196096475093898113e-06
using 289644116986661290 * 3.23239752769617388808380534328930881748156196096475093898113e-06
936244927659.425316865834389054191355699534662915262117621751  with length of 60 and dot length 12 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 936244927659.425316865834389054191355699534662915262117621751 ^2 ::== 876554564568002544736851.72127186809666454792022705078125
 temp fract 0.72127186809666454792022705078125 temp int 876554564568002544736851
before loop xstp is 0
getting the part of 87655456456800254473685172.12718679010868072509765625 :: ad 26 and mad 35
getting the part of 8765545645680025447368517212.71868038177490234375 :: ad 28 and mad 35
getting the part of 876554564568002544736851721271.8681640625 :: ad 30 and mad 35
getting the part of 87655456456800254473685172127186.796875 :: ad 32 and mad 35
getting the part of 8765545645680025447368517212718680 :: ad 34 and mad 35
getting the part of 876554564568002544736851721271868160 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 13 8765545645648 2896441169866
main 2960666.41917795257719784555037178691313287886466901731048057 second 1701893.40731609863064123194400116101111148867225291431821109
main 8765545645648 second 2896441169866.00000000000000000000042351647362715016953416125
times of 1.02217384906006009884602406877718629161764073060486511285687e-06
new times of 1.02217384906006009884602406877718629161764073060486511285687e-06
using 289644116986661290 * 1.02217384906006009884602406877718629161764073060486511285687e-06
296066641917.857906754993446120636922781153019604283294086144  with length of 60 and dot length 12 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 296066641917.857906754993446120636922781153019604283294086144 ^2 ::== 87655456456517096578947.37613256115582771599292755126953125
 temp fract 0.37613256115582771599292755126953125 temp int 87655456456517096578947
before loop xstp is 0
getting the part of 8765545645651709657894737.613256114535033702850341796875 :: ad 25 and mad 35
getting the part of 876554564565170965789473761.32561147212982177734375 :: ad 27 and mad 35
getting the part of 87655456456517096578947376132.5611572265625 :: ad 29 and mad 35
getting the part of 8765545645651709657894737613256.1162109375 :: ad 31 and mad 35
getting the part of 876554564565170965789473761325611.625 :: ad 33 and mad 35
getting the part of 87655456456517096578947376132561136 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 14 87655456456489 28964411698666
main 9362449.27657763067680337747130859149396418823757667557194928 second 5381859.5019441003612432165671933648045873499450188052507793
main 87655456456489 second 28964411698666.00000000000000000000338813178901720135627329
times of 3.23239752769044934787930921942933521196433537919631694558457e-07
new times of 3.23239752769044934787930921942933521196433537919631694558457e-07
using 289644116986661290 * 3.23239752769044934787930921942933521196433537919631694558457e-07
93624492765.776723747314846781051775465506688093941800588027  with length of 59 and dot length 11 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 93624492765.776723747314846781051775465506688093941800588027 ^2 ::== 8765545645648978078947.36842103897379274712875485420227050781
 temp fract 0.3684210389737927471287548542022705078125 temp int 8765545645648978078947
before loop xstp is 0
getting the part of 876554564564897807894736.842103897477500140666961669921875 :: ad 24 and mad 35
getting the part of 87655456456489780789473684.21038973331451416015625 :: ad 26 and mad 35
getting the part of 8765545645648978078947368421.03897380828857421875 :: ad 28 and mad 35
getting the part of 876554564564897807894736842103.8973388671875 :: ad 30 and mad 35
getting the part of 87655456456489780789473684210389.75 :: ad 32 and mad 35
getting the part of 8765545645648978078947368421038973 :: ad 34 and mad 35
getting the part of 876554564564897807894736842103897472 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 15 876554564564896 289644116986661
main 29606664.1917811470285877470761178828843631220659127429098434 second 17018934.0731627784280498371016682188615003737082044641022727
main 876554564564896 second 289644116986661
times of 1.02217384905990079977522031814435399584811438730105488047018e-07
new times of 1.02217384905990079977522031814435399584811438730105488047018e-07
using 289644116986661290 * 1.02217384905990079977522031814435399584811438730105488047018e-07
29606664191.7811766716293698132410777639968331702985393505401  with length of 60 and dot length 11 will move 49
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 29606664191.7811766716293698132410777639968331702985393505401 ^2 ::== 876554564564897755263.157894739459834454464726150035858154297
 temp fract 0.157894739459834454464726150035858154296875 temp int 876554564564897755263
before loop xstp is 0
getting the part of 87655456456489775526315.78947394600254483520984649658203125 :: ad 23 and mad 35
getting the part of 8765545645648977552631578.947394599206745624542236328125 :: ad 25 and mad 35
getting the part of 876554564564897755263157894.7394597530364990234375 :: ad 27 and mad 35
getting the part of 87655456456489775526315789473.9459991455078125 :: ad 29 and mad 35
getting the part of 8765545645648977552631578947394.5986328125 :: ad 31 and mad 35
getting the part of 876554564564897755263157894739460 :: ad 33 and mad 35
getting the part of 87655456456489775526315789473946000 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 16 8765545645648960 2896441169866612
main 93624492.7657766271970060848969816540739472136752876915699595 second 53818595.0194411150980626960230370070561444076122305148895952
main 8765545645648959.99999999999999999913263826201159645279403776 second 2896441169866612
times of 3.2323975276904470188580359934082838334062611813631575512291e-08
new times of 3.2323975276904470188580359934082838334062611813631575512291e-08
using 289644116986661290 * 3.2323975276904470188580359934082838334062611813631575512291e-08
9362449276.57766562885838341110048344325691803803971002828632  with length of 60 and dot length 10 will move 50
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 9362449276.57766562885838341110048344325691803803971002828632 ^2 ::== 87655456456489654473.6842105263406210724497213959693908691406
 temp fract 0.684210526340621072449721395969390869140625 temp int 87655456456489654473
before loop xstp is 0
getting the part of 8765545645648965447368.421052634061197750270366668701171875 :: ad 22 and mad 35
getting the part of 876554564564896544736842.10526340617798268795013427734375 :: ad 24 and mad 35
getting the part of 87655456456489654473684210.5263406336307525634765625 :: ad 26 and mad 35
getting the part of 8765545645648965447368421052.63406276702880859375 :: ad 28 and mad 35
getting the part of 876554564564896544736842105263.4061279296875 :: ad 30 and mad 35
getting the part of 87655456456489654473684210526340.609375 :: ad 32 and mad 35
getting the part of 8765545645648965447368421052634060 :: ad 34 and mad 35
getting the part of 876554564564896544736842105263406080 :: ad 36 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 17 87655456456489601 28964411698666129
main 296066641.917811471974686438773187158801708273095625728599245 second 170189340.73162786947972376119608987877870827324109986519729
main 87655456456489601 second 28964411698666129
times of 1.02217384905989978217607027936526993815911483672242867143123e-08
new times of 1.02217384905989978217607027936526993815911483672242867143123e-08
using 289644116986661290 * 1.02217384905989978217607027936526993815911483672242867143123e-08
2960666419.17811471974686438773187158801708273095625728599245  with length of 60 and dot length 10 will move 50
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 2960666419.17811471974686438773187158801708273095625728599245 ^2 ::== 8765545645648960100
 temp fract 0 temp int 8765545645648960100
before loop xstp is 0
getting the part of 876554564564896010000 :: ad 21 and mad 35
getting the part of 87655456456489601000000 :: ad 23 and mad 35
getting the part of 8765545645648960100000000 :: ad 25 and mad 35
getting the part of 876554564564896009999999999.99999988079071044921875 :: ad 27 and mad 35
getting the part of 87655456456489601000000000000 :: ad 29 and mad 35
getting the part of 8765545645648960099999999999999.9990234375 :: ad 31 and mad 35
getting the part of 876554564564896010000000000000000 :: ad 33 and mad 35
getting the part of 87655456456489601000000000000000000 :: ad 35 and mad 35
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 18 876554564564896010 289644116986661290
main 936244927.657766277310543720806205697178467371028214721873084 second 538185950.194411234594849857993604514228776568811460009889025
main 876554564564896010 second 289644116986661290
times of 3.23239752769044603290569699439048232631190196230826219701572e-09
new times of 3.23239752769044603290569699439048232631190196230826219701572e-09
using 289644116986661290 * 3.23239752769044603290569699439048232631190196230826219701572e-09
936244927.657766277310543720806205697178467371028214721873084  with length of 60 and dot length 9 will move 51
lap for tens is more than ten will lower it 

 trying to reach the main number 87655456456489601011111111202012128  main number intpart lenght 35 
 fract 0 int 87655456456489601011111111202012128
    -----------------> 936244927.657766277310543720806205697178467371028214721873084 ^2 ::== 876554564564896010
 temp fract 0 temp int 876554564564896010
before loop xstp is 0
getting the part of 87655456456489601000 :: ad 20 and mad 35
getting the part of 8765545645648960099999.99999999999909050529822707176208496094 :: ad 22 and mad 35
getting the part of 876554564564896010000000 :: ad 24 and mad 35
getting the part of 87655456456489600999999999.99999998509883880615234375 :: ad 26 and mad 35
getting the part of 8765545645648960100000000000 :: ad 28 and mad 35
getting the part of 876554564564896010000000000000 :: ad 30 and mad 35
getting the part of 87655456456489600999999999999999.984375 :: ad 32 and mad 35
getting the part of 8765545645648960100000000000000000 :: ad 34 and mad 35
getting the part of 876554564564896010000000000000000000 :: ad 36 and mad 35
i push_back a near value 



u enter as approximation 289644116986661290 with main number to find the power 87655456456489601011111111202012128 with psifia 35
as of the entered 
289644116986661290 ^2 ::== 83893714504982731240439781184464096               me idia psifia 1               me diafora 3761741951506869770671330017548032
296066641917811471 ^2 ::== 87655456456489600422855718299183840            me idia psifia 16            me diafora 588255392902828288
296066641917811766 ^2 ::== 87655456456489775102174449808038752            me idia psifia 14            me diafora 174091063338606026624
296066641917857906 ^2 ::== 87655456456517096131890627606704832            me idia psifia 11            me diafora 27495120779516404692704
296066641923793625 ^2 ::== 87655456460031832915321911590640624            me idia psifia 9            me diafora 3542231904210800388628496
296066642830950698 ^2 ::== 87655456997189730339311294506687200            me idia psifia 8            me diafora 540700129328200183304675072
296066648377355063 ^2 ::== 87655460281400401358874491571733968            me idia psifia 6            me diafora 3824910800347763380369721840
296070079373956695 ^2 ::== 87657491900501017602301419735323024            me idia psifia 4            me diafora 2035444011416591190308533310896
296632629935132957 ^2 ::== 87990917142233536873381553267563856            me idia psifia 2            me diafora 335460685743935862270442065551728
936244927657766277 ^2 ::== 876554564564896009418510033158440704            me idia psifia 16            me diafora 788899108108406408407398921956428544
936244927657766562 ^2 ::== 876554564564896543078118798085299840            me idia psifia 15            me diafora 788899108108406942067007686883287680
936244927657767237 ^2 ::== 876554564564897807008771136070614144            me idia psifia 14            me diafora 788899108108408205997660024868601984
936244927659425316 ^2 ::== 876554564568002543115585611381699840            me idia psifia 11            me diafora 788899108111512942104474500179687680
936244927903232413 ^2 ::== 876554565024528858962266493893802624            me idia psifia 8            me diafora 788899108568039257951155382691790464
936244947803558545 ^2 ::== 876554602287688064395550565242516992            me idia psifia 6            me diafora 788899145831198463384439454040504832
936245004300227693 ^2 ::== 876554708077133371357528211644102272            me idia psifia 6            me diafora 788899251620643770346417100442090112
936358408015155703 ^2 ::== 876767068260676803866631343333424256            me idia psifia 3            me diafora 789111611804187202855520232131412096
964864453439925268 ^2 ::== 930963413511925715332931049424871808            me idia psifia 0            me diafora 843307957055436114321819938222859648
4096186385041157553 ^2 ::== 16778742900996546241478725754168948736            me idia psifia 0            me diafora 16691087444540056640467614642966937600


-------------------------Approximation Result Set-----------------------------------------------------
possible approximation > ::== 296066641917811471 ^2 87655456456489600422855718299183840             me idia psifia 16             me diafora 588255392902828288
possible approximation of addition ::== 296066641917811472 with ^2  87655456456489601014989002134806784             me idia psifia 19             me diafora 3877890932794656



------------------------Bee-----------------------------
enter one of the approximated number from above 
296066641917811471
enter log level 0 or 1
1
entering with 296066641917811471 and log of bee 1
first number second number is the qube one dimension and third the precision 

first 87655456456489601011111111202012128 
     doted 0
     makes 87655456456489601011111111202012128

second 296066641917811471 
     doted 0 
     makes 296066641917811471

result 296066641917811472 
     doted 0.98690196603144786369199437103816308081150054931640625 
     makes 296066641917811472.986901966031447863691994371038163080811501

u can easily almost retrieve the dots digits 

for the integer string 296066641917811472.000000
the numbers are 18
the retrievable integer digit is 2

entering with number of 2.98690196603144786369199437103816308081150054931640625
recheck values of 296066641917811471 and result of 87655456456489600422855718299183840 with intpart 87655456456489600422855718299183840

     ----> using 2.98690196603144786369199437103816308081150054931640625 rst is 1.493450983015723931845997185519081540405750274658203125
     ----> using 1.493450983015723931845997185519081540405750274658203125 with intpart 1 and fract 0.493450983015723931845997185519081540405750274658203125
                     with combination da_rst 296066641917811471.49345098301572393184599718551908154040575 sq of rst 87655456456489600715044469284200656
                     with intpart 87655456456489600715044469284200656 and other part 0
                     the int string is 1.493451

     ----> using 1.493450983015723931845997185519081540405750274658203125 rst is 0.7467254915078619659229985927595407702028751373291015625
     ----> using 0.7467254915078619659229985927595407702028751373291015625 with intpart 0 and fract 0.7467254915078619659229985927595407702028751373291015625
                     with combination da_rst 296066641917811471.746725491507861938167422977130627259612083 sq of rst 87655456456489600865016735709503696
                     with intpart 87655456456489600865016735709503696 and other part 0
                     the int string is 0.746725

     ----> using 0.7467254915078619659229985927595407702028751373291015625 rst is 0.37336274575393098296149929637977038510143756866455078125
     ----> using 0.37336274575393098296149929637977038510143756866455078125 with intpart 0 and fract 0.37336274575393098296149929637977038510143756866455078125
                     with combination da_rst 296066641917811471.373362745753930969083711488565313629806042 sq of rst 87655456456489600643936227004343776
                     with intpart 87655456456489600643936227004343776 and other part 0
                     the int string is 0.373363

     ----> using 0.37336274575393098296149929637977038510143756866455078125 rst is 0.186681372876965491480749648189885192550718784332275390625
     ----> using 0.186681372876965491480749648189885192550718784332275390625 with intpart 0 and fract 0.186681372876965491480749648189885192550718784332275390625
                     with combination da_rst 296066641917811471.186681372876965512297431359911570325493813 sq of rst 87655456456489600533395972651763824
                     with intpart 87655456456489600533395972651763824 and other part 0
                     the int string is 0.186681

     ----> using 0.186681372876965491480749648189885192550718784332275390625 rst is 0.0933406864384827457403748240949425962753593921661376953125
     ----> using 0.0933406864384827457403748240949425962753593921661376953125 with intpart 0 and fract 0.0933406864384827457403748240949425962753593921661376953125
                     with combination da_rst 296066641917811471.093340686438482756148715679955785162746906 sq of rst 87655456456489600478125845475473824
                     with intpart 87655456456489600478125845475473824 and other part 0
                     the int string is 0.093341

from new int t  of 2 ---> 1 with 1.98690196603144786369199437103816308081150054931640625
     ----> using 1.98690196603144786369199437103816308081150054931640625 rst is 0.993450983015723931845997185519081540405750274658203125
     ----> using 0.993450983015723931845997185519081540405750274658203125 with intpart 0 and fract 0.993450983015723931845997185519081540405750274658203125
                     with combination da_rst 296066641917811471.99345098301572393184599718551908154040575 sq of rst 87655456456489601011111111202012128
                     with intpart 87655456456489601011111111202012128 and other part 0

     ----> using 1.98690196603144786369199437103816308081150054931640625 
     ----> with rst 0.993450983015723931845997185519081540405750274658203125 
     ----> the times i run 6
     ----> i just go down :1
     ------------------- found  @--------------------------- 
     for number 87655456456489601011111111202012128  
     power result is  296066641917811471.99345098301572393184599718551908154040575
     with result of the power * power  87655456456489601011111111202012128

                     the int string is 0.993451

enter 1 to exit 
0
-------------------------------------------------
enter one of the approximated number from above 
296066641917811472
enter log level 0 or 1
1
entering with 296066641917811472 and log of bee 1
first number second number is the qube one dimension and third the precision 

first 87655456456489601011111111202012128 
     doted 0
     makes 87655456456489601011111111202012128

second 296066641917811472 
     doted 0 
     makes 296066641917811472

result 296066641917811471 
     doted 0.98690196603144786369199437103816308081150054931640625 
     makes 296066641917811471.986901966031447863691994371038163080811501

u can easily almost retrieve the dots digits 

for the integer string 296066641917811471.000000
the numbers are 18
the retrievable integer digit is 1

entering with number of 1.98690196603144786369199437103816308081150054931640625
recheck values of 296066641917811472 and result of 87655456456489601014989002134806784 with intpart 87655456456489601014989002134806784

recheck power 296066641917811472 of result 87655456456489601014989002134806784
lowering second to value of 296066641917811472

     ----> using 1.98690196603144786369199437103816308081150054931640625 rst is 0.993450983015723931845997185519081540405750274658203125
     ----> using 0.993450983015723931845997185519081540405750274658203125 with intpart 0 and fract 0.993450983015723931845997185519081540405750274658203125
                     with combination da_rst 296066641917811471.99345098301572393184599718551908154040575 sq of rst 87655456456489601011111111202012128
                     with intpart 87655456456489601011111111202012128 and other part 0

     ----> using 1.98690196603144786369199437103816308081150054931640625 
     ----> with rst 0.993450983015723931845997185519081540405750274658203125 
     ----> the times i run 1
     ----> i just go down :0
     ------------------- found  @--------------------------- 
     for number 87655456456489601011111111202012128  
     power result is  296066641917811471.99345098301572393184599718551908154040575
     with result of the power * power  87655456456489601011111111202012128

                     the int string is 0.993451

enter 1 to exit 
1
