acherontas@acherontas:~/codeblocks/sqrt_sum_of_times_arm64/bin/Debug $ ./sqrt_sum_of_times_arm64 456456458795266456456465 30 250 0
voyeristic behaviours and others have fun 
ur number ,ur precision , ur sleep time , ur log  
Main cdi 127
Secondary cdi 10
Secondary cdi 1
Exiting Secondary cdi 1
with sqrt of math 675615614676.91557229037805215

9 25 |34 16| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

9 |25| 34 |16| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

9 26 |35 17| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

9 |26| 35 |17| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

10 25 |35 15| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

10 |25| 35 |15| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

10 26 |36 16| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------

10 |26| 36 |16| 675615614676.91557229037805215  and main 456456458795266456456465
-------------------------------------------------------------------------

-------------------------------------------------------------------------



---------order of near approximation numbers--------
|----------bigger value is the nearest-------------|

 671259498228  671259498228  671259498228  652080655421  652080655421  652080655421  652080655421  652080655421  652080655421  633967303882  633967303882  633967303882  633967303882  633967303882  608608611727  608608611727  608608611727  570570573494 
----------------------------------------------------

enter a number from above 
671259498228
lenght of 671259498228 12
lenght of 456456458795266456456465 is 24
default 4 loops enter 4 or more [4 is 3] 
suggested value : 13
13
-------------------------------------------------------
times 1 4 6
main 2 second 2.44948974278317809819728407471
main 4 second 6
times of 0.333333333333333333333333333333
new times of 0.333333333333333333333333333333
using 671259498228 * 0.333333333333333333333333333333
223753166076  with length of 11 and dot length 32767 will move -32756

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 223753166076 ^2 ::== 50065479329034037237776
 temp fract 1.4551915228366851806640625e-11 temp int 50065479329034037237776
before loop xstp is 0

-------------------------------------------------------
-------------------------------------------------------
times 2 45 67
main 6.70820393249936908922752100619 second 8.18535277187244996995370372473
main 45 second 67
times of 0.100122446753721926704888373227
new times of 0.100122446753721926704888373227
using 671259498228 * 0.100122446753721926704888373227
67208143369.263028011364762847  with length of 29 and dot length 11 will move 18
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 67208143369.263028011364762847 ^2 ::== 4516934535143413918756.80106928
 temp fract 0.801069280465071642538532614708 temp int 4516934535143413918756
before loop xstp is 0
getting the part of 451693453514341391875680.106928 :: ad 24 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 3 456 671
main 21.3541565040626224216230479312 second 25.9036676939772372459002461803
main 456 second 671
times of 0.0318243763100784238772325602551
new times of 0.0318243763100784238772325602551
using 671259498228 * 0.0318243763100784238772325602551
21362414873.3222929511602226701  with length of 30 and dot length 11 will move 19
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 21362414873.3222929511602226701 ^2 ::== 456352769219941517595.760279495
 temp fract 0.760279494759345197962829843163 temp int 456352769219941517595
before loop xstp is 0
getting the part of 45635276921994151759576.0279495 :: ad 23 and mad 24
getting the part of 4563527692199415175957602.79495 :: ad 25 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 4 4564 6712
main 67.5573830162181459851469656603 second 81.9267965930561696095400806841
main 4564 second 6712
times of 0.0100651643349550277093484752176
new times of 0.0100651643349550277093484752176
using 671259498228 * 0.0100651643349550277093484752176
6756337161.06427322112309369934  with length of 30 and dot length 10 will move 20
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 6756337161.06427322112309369934 ^2 ::== 45648091833978043025.6663872793
 temp fract 0.666387279254351483359641861171 temp int 45648091833978043025
before loop xstp is 0
getting the part of 4564809183397804302566.63872793 :: ad 22 and mad 24
getting the part of 456480918339780430256663.872793 :: ad 24 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 5 45645 67125
main 213.646904962370096113922151911 second 259.084928160632300413471493147
main 45645 second 67125
times of 0.00318282167541705915998394267279
new times of 0.00318282167541705915998394267279
using 671259498228 * 0.00318282167541705915998394267279
2136499280.78965741436221253508  with length of 30 and dot length 10 will move 20
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 2136499280.78965741436221253508 ^2 ::== 4564629176814723395.08661631285
 temp fract 0.0866163128491619360715958464425 temp int 4564629176814723395
before loop xstp is 0
getting the part of 456462917681472339508.661631285 :: ad 21 and mad 24
getting the part of 45646291768147233950866.1631285 :: ad 23 and mad 24
getting the part of 4564629176814723395086616.31285 :: ad 25 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 6 456456 671259
main 675.615275138151387252837196584 second 819.303972894065734616410758829
main 456456 second 671259
times of 0.00100648970835124949870740980245
new times of 0.00100648970835124949870740980245
using 671259498228 * 0.00100648970835124949870740980245
675615776.599505799679172438579  with length of 30 and dot length 9 will move 21
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 675615776.599505799679172438579 ^2 ::== 456456677590153328.492896480106
 temp fract 0.492896480105652345926614543714 temp int 456456677590153328
before loop xstp is 0
getting the part of 45645667759015332849.2896480106 :: ad 20 and mad 24
getting the part of 4564566775901533284928.96480106 :: ad 22 and mad 24
getting the part of 456456677590153328492896.480106 :: ad 24 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 7 4564564 6712594
main 2136.48402755555371364621956784 second 2590.86742231245788614157233195
main 4564564 second 6712594
times of 0.00031827994178637255785858932744
new times of 0.00031827994178637255785858932744
using 671259498228 * 0.00031827994178637255785858932744
213648434.019557493156425570118  with length of 30 and dot length 9 will move 21
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 213648434.019557493156425570118 ^2 ::== 45645653359009211.5720545757249
 temp fract 0.572054575724930000624190995495 temp int 45645653359009211
before loop xstp is 0
getting the part of 4564565335900921157.20545757249 :: ad 19 and mad 24
getting the part of 456456533590092115720.545757249 :: ad 21 and mad 24
getting the part of 45645653359009211572054.5757249 :: ad 23 and mad 24
getting the part of 4564565335900921157205457.57249 :: ad 25 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 8 45645645 67125949
main 6756.15608167839769601525999485 second 8193.04271928323342121461839952
main 45645645 second 67125949
times of 0.000100648946976949222662241393337
new times of 0.000100648946976949222662241393337
using 671259498228 * 0.000100648946976949222662241393337
67561561.6449235126864908040134  with length of 30 and dot length 8 will move 22
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 67561561.6449235126864908040134 ^2 ::== 4564564611900799.90133158187847
 temp fract 0.90133158187846974807033717525 temp int 4564564611900799
before loop xstp is 0
getting the part of 456456461190079990.133158187847 :: ad 18 and mad 24
getting the part of 45645646119007999013.3158187847 :: ad 20 and mad 24
getting the part of 4564564611900799901331.58187847 :: ad 22 and mad 24
getting the part of 456456461190079990133158.187847 :: ad 24 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 9 456456458 671259498
main 21364.8416329258101992174616152 second 25908.676114382996393110364577
main 456456458 second 671259498
times of 3.18279915540588897547598821688e-05
new times of 3.18279915540588897547598821688e-05
using 671259498228 * 3.18279915540588897547598821688e-05
21364841.6401825922735428884793  with length of 30 and dot length 8 will move 22
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 21364841.6401825922735428884793 ^2 ::== 456456458310079.999617896088154
 temp fract 0.999617896088154028538200895904 temp int 456456458310079
before loop xstp is 0
getting the part of 45645645831007999.9617896088154 :: ad 17 and mad 24
getting the part of 4564564583100799996.17896088154 :: ad 19 and mad 24
getting the part of 456456458310079999617.896088154 :: ad 21 and mad 24
getting the part of 45645645831007999961789.6088154 :: ad 23 and mad 24
getting the part of 4564564583100799996178960.88154 :: ad 25 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 10 4564564587 6712594982
main 67561.5614606412127438091100494 second 81930.4276932569173562030046406
main 4564564587 second 6712594982
times of 1.00648946706615424907531103668e-05
new times of 1.00648946706615424907531103668e-05
using 671259498228 * 1.00648946706615424907531103668e-05
6756156.14634593832515943419468  with length of 30 and dot length 7 will move 23
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 6756156.14634593832515943419468 ^2 ::== 45645645873807.9999994453888533
 temp fract 0.999999445388853331420652998524 temp int 45645645873807
before loop xstp is 0
getting the part of 4564564587380799.99994453888533 :: ad 16 and mad 24
getting the part of 456456458738079999.994453888533 :: ad 18 and mad 24
getting the part of 45645645873807999999.4453888533 :: ad 20 and mad 24
getting the part of 4564564587380799999944.53888533 :: ad 22 and mad 24
getting the part of 456456458738079999994453.888533 :: ad 24 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 11 45645645879 67125949822
main 213648.416514141288404541074523 second 259086.761186286783996070787477
main 45645645879 second 67125949822
times of 3.18279915711702461375029263304e-06
new times of 3.18279915711702461375029263304e-06
using 671259498228 * 3.18279915711702461375029263304e-06
2136484.16516687527730234694214  with length of 30 and dot length 7 will move 23
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 2136484.16516687527730234694214 ^2 ::== 4564564588008.80000000074367663
 temp fract 0.800000000743676627776908988343 temp int 4564564588008
before loop xstp is 0
getting the part of 456456458800880.000000074367663 :: ad 15 and mad 24
getting the part of 45645645880088000.0000074367663 :: ad 17 and mad 24
getting the part of 4564564588008800000.00074367663 :: ad 19 and mad 24
getting the part of 456456458800880000000.074367663 :: ad 21 and mad 24
getting the part of 45645645880088000000007.4367663 :: ad 23 and mad 24
getting the part of 4564564588008800000000743.67663 :: ad 25 and mad 24
i push_back a near value 

-------------------------------------------------------
-------------------------------------------------------
times 12 456456458795 671259498228
main 675615.614676718376983848273119 second 819304.276949656842202390679368
main 456456458795 second 671259498228
times of 1.00648946712890873460453751617e-06
new times of 1.00648946712890873460453751617e-06
using 671259498228 * 1.00648946712890873460453751617e-06
675615.614676718376983848273119  with length of 30 and dot length 6 will move 24
lap for tens is more than ten will lower it 

 trying to reach the main number 456456458795266456456465  main number intpart lenght 24 
 fract 0 int 456456458795266456456465
    -----------------> 675615.614676718376983848273119 ^2 ::== 456456458795
 temp fract 5.29395592033937711917701562925e-23 temp int 456456458795
before loop xstp is 0
getting the part of 45645645879500 :: ad 14 and mad 24
getting the part of 4564564587950000 :: ad 16 and mad 24
getting the part of 456456458795000000 :: ad 18 and mad 24
getting the part of 45645645879500000000 :: ad 20 and mad 24
getting the part of 4564564587950000000000 :: ad 22 and mad 24
getting the part of 456456458795000000000000 :: ad 24 and mad 24
i push_back a near value 

u enter as approximation 671259498228 with main number to find the power 456456458795266456456465
as of the entered 
671259498228 ^2 ::== 450589313961306335139984 me diafora 5867144833960121316481
672081433692 ^2 ::== 451693453513494192750864 me diafora 4763005281772263705601
675615614634 ^2 ::== 456456458737277594953956 me diafora 57988861502509
675615614676 ^2 ::== 456456458794029306584976 me diafora 1237149871489
675615616449 ^2 ::== 456456461189762279369601 me diafora 2394495822913136
675615776599 ^2 ::== 456456677589469876006801 me diafora 218794203419550336
675633716106 ^2 ::== 456480918339203003803236 me diafora 24459543936547346771
2136241487332 ^2 ::== 4563527692198435516478224 me diafora 4107071233403169060021759
2136484164018 ^2 ::== 4564564583099692325904324 me diafora 4108108124304425869447859
2136484165166 ^2 ::== 4564564588005059967807556 me diafora 4108108129209793511351091
2136484340195 ^2 ::== 4564565335898464492638025 me diafora 4108108877103198036181560
2136499280789 ^2 ::== 4564629176811914264462521 me diafora 4108172718016647808006056
possible approximation ::== 675615614676 with afr 1237149871489
possible approximation of addition ::== 675615614677 with 456456458795380537814329
