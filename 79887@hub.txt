voyeristic behaviours and others have fun 
ur number ,ur precision , ur sleep time , ur log ,ur automation 0 no 1 auto , ur bee auto 0 for no log 1 for log 
the approximation while loops times to run if -1 infinite loop will occur until other equations gets equal 
with main number without precision 7.89876e+57
with main number 7898756447985644142144124141241241901830747210744254693376
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
58
 @ CDIS : with main number 7898756447985644142144124141241241901830747210744254693376
Main cdi 246
Secondary cdi 12
Secondary cdi 3
Exiting Secondary cdi 3
with sqrt of math 88874948371212256598707572195.3532257080078125

9 25 |34 16| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 34 ::== 232316366117224827710121298271801250185107559354671824896
            ----->  | *2 464632732234449655420242596543602500370215118709343649792
            ----->  /2 116158183058612413855060649135900625092553779677335912448
                 --> 58079091529306206927530324567950312546276889838667956224
                 --> 29039545764653103463765162283975156273138444919333978112
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2158835758636497918836984923929783822565538223090707726336 46463273223444965542024259654.360260009765625
i insert 134927234914781119927311557733995676288306426346651779072 11615818305861241385506064913.59006500244140625
i insert 0 0
i insert 1349272349147811199273115576643007598256572360168570880 1161581830586124138550606491.35900652408599853515625
i insert 843295218217381999545697235866512446966250168852479475712 29039545764653103463765162283.975162506103515625
CDIS Start 
section_temp 0
section h inf
232316366117224827710121298271801250185107559354671824896 / 12 ::== 19359697176435402309176774855983436728364549467948449792
            ----->  | *2 38719394352870804618353549711966873456729098935896899584
            ----->  /2 9679848588217701154588387427991718364182274733974224896
                 --> 4839924294108850577294193713995859182091137366987112448
                 --> 2419962147054425288647096856997929591045568683493556224
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1499191499053123554747906197121835078459139095247479373824 38719394352870804618353549711.96686553955078125
i insert 93699468690820222171744137305594926626146552707320643584 9679848588217701154588387427.9917163848876953125
i insert 0 0
i insert 936994686908202221717441371700770387186083407901753344 967984858821770115458838742.7991716861724853515625
i insert 585621679317626388573400858232567115578797675279342895104 24199621470544252886470968569.979290008544921875
section_temp 0
section h inf
19359697176435402309176774855983436728364549467948449792 / 3 ::== 6453232392145134103058924951994478909454849822649483264
            ----->  | *2 12906464784290268206117849903988957818909699645298966528
            ----->  /2 3226616196072567051529462475997239454727424911324741632
                 --> 1613308098036283525764731237998619727363712455662370816
                 --> 806654049018141762882365618999309863681856227831185408
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 166576833228124839416434021885217512034931794047209046016 12906464784290268206117849903.9889621734619140625
i insert 1041105207675780246352712636879407880864710512983293296640 32266161960725670515294624759.97240447998046875
i insert 0 0
i insert 10411052076757802463527126362986169428089034966304817152 3226616196072567051529462475.997240543365478515625
i insert 6506907547973626539704453980738295150209298116134834274304 80665404901814176288236561899.9310150146484375
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 16 ::== 493672277999102758884007758827577618864421700671515918336
            ----->  | *2 987344555998205517768015517655155237728843401343031836672
            ----->  /2 246836138999551379442003879413788809432210850335757959168
                 --> 123418069499775689721001939706894404716105425167878979584
                 --> 61709034749887844860500969853447202358052712583939489792
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929359147482600461824531431520374691698049024 9873445559982055177680155176.55154895782470703125
i insert 609280795162058494671766252935770494395288981705618096128 24683613899955137944200387941.378871917724609375
i insert 0 0
i insert 6092807951620584946717662528864033214470023418231128064 2468361389995513794420038794.1378872394561767578125
i insert 3808004969762865591698539080910274736196136594918468485120 61709034749887844860500969853.44718170166015625
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 / 246 ::== 2006797878045133166195153491169014667638606155344773120
            ----->  | *2 4013595756090266332390306982338029335277212310689546240
            ----->  /2 1003398939022566583097576745584507333819303077672386560
                 --> 501699469511283291548788372792253666909651538836193280
                 --> 250849734755641645774394186396126833454825769418096640
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1610895089330579667319099089015609283019711540504393940992 40135957560902663323903069823.38031005859375
i insert 100680943083161229207443693048424585960791358406498713600 10033989390225665830975767455.8450775146484375
i insert 0 0
i insert 1006809430831612292074436929480846874060737108349288448 1003398939022566583097576745.5845077037811279296875
i insert 629255894269757682546523081627908586170984225719294361600 25084973475564164577439418639.61269378662109375
removals 
reporing rt 4
section_temp 0
section h inf
232316366117224827710121298271801250185107559354671824896 - 2006797878045133166195153491169014667638606155344773120 ::== 230309568239179694543926144780632229024215039253564882944
            ----->  | *2 460619136478359389087852289561264458048430078507129765888
            ----->  /2 115154784119589847271963072390316114512107519626782441472
                 --> 57577392059794923635981536195158057256053759813391220736
                 --> 28788696029897461817990768097579028628026879906695610368
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2121699888900694732270964045540013059421279575792045522944 46061913647835938908785228956.1264495849609375
i insert 132606243056293420766935252846250816213829973487002845184 11515478411958984727196307239.031612396240234375
i insert 0 0
i insert 1326062430562934207669352526389722014100908481259241472 1151547841195898472719630723.9031612873077392578125
i insert 828789019101833879793345330260278888832342708268709183488 28788696029897461817990768097.57903289794921875
section_temp 0
section h inf
19359697176435402309176774855983436728364549467948449792 - 2006797878045133166195153491169014667638606155344773120 ::== 17352899298390269142981621364814422651021753671309328384
            ----->  | *2 34705798596780538285963242729628845302043507342618656768
            ----->  /2 8676449649195134571490810682407211325510876835654664192
                 --> 4338224824597567285745405341203605662755438417827332096
                 --> 2169112412298783642872702670601802831377719208913666048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1204492456240293980314823952039325243113320064570905067520 34705798596780538285963242729.62884521484375
i insert 7528077851501837376967649700506076852131999251874275393536 86764496491951345714908106824.072113037109375
i insert 0 0
i insert 75280778515018373769676496998119606835628372981538881536 8676449649195134571490810682.4072113037109375
i insert 470504865718864836060478106281629803258249953242142212096 21691124122987836428727026706.01802825927734375
section_temp 0
section h inf
6453232392145134103058924951994478909454849822649483264 - 2006797878045133166195153491169014667638606155344773120 ::== 4446434514100000936863771460825464241816243667304710144
            ----->  | *2 8892869028200001873727542921650928483632487334609420288
            ----->  /2 2223217257050000468431885730412732120908121833652355072
                 --> 1111608628525000234215942865206366060454060916826177536
                 --> 555804314262500117107971432603183030227030458413088768
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 79083119552718845720867267454897631788928871776947011584 8892869028200001873727542921.6509304046630859375
i insert 494269497204492785755420421659806721151541231828072398848 22232172570500004684318857304.12732696533203125
i insert 0 0
i insert 4942694972044927857554204214819493515080782242505555968 2223217257050000468431885730.412732601165771484375
i insert 3089184357528079910971377635373791950528734904489709928448 55580431426250011710797143260.31832122802734375
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 - 2006797878045133166195153491169014667638606155344773120 ::== 491665480121057625717812605336408597703529180570408976384
            ----->  | *2 983330960242115251435625210672817195407058361140817952768
            ----->  /2 245832740060528812858906302668204298851764590285204488192
                 --> 122916370030264406429453151334102149425882295142602244096
                 --> 61458185015132203214726575667051074712941147571301122048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 96693977737068044530828922805673636635152398283433836544 9833309602421152514356252106.7281665802001953125
i insert 604337360856675278317680767584626807595713033799401996288 24583274006052881285890630266.820415496826171875
i insert 0 0
i insert 6043373608566752783176807672896274657047280455470022656 2458327400605288128589063026.682041645050048828125
i insert 3777108505354220489485504797649749873919281239528539422720 61458185015132203214726575667.0510406494140625
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 46463273223444965542024259654.360260009765625 ^2 ::== 2158835758636497918836984923963261698593761437853964828672 as intpart 2158835758636497918836984923929783822565538223090707726336  diafora 5739920689349146223307139217311458381496663891310840643584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11615818305861241385506064913.59006500244140625 ^2 ::== 134927234914781119927311557747703856162110089865872801792 as intpart 134927234914781119927311557733995676288306426346651779072  diafora 7763829213070863022216812583507246319989770441790507188224 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1161581830586124138550606491.35900652408599853515625 ^2 ::== 1349272349147811199273115577477038467173771241265823744 as intpart 1349272349147811199273115576643007598256572360168570880  diafora 7897407175636496330944851025664598311462951861751931469824 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 29039545764653103463765162283.975162506103515625 ^2 ::== 843295218217381999545697235923149110457921027400995438592 as intpart 843295218217381999545697235866512446966250168852479475712  diafora 7055461229768262142598426905374729303748769590063128379392 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 38719394352870804618353549711.96686553955078125 ^2 ::== 1499191499053123554747906197196708085708241731239144325120 as intpart 1499191499053123554747906197121835078459139095247479373824  diafora 6399564948932520587396217944119406521140153211839481643008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9679848588217701154588387427.9917163848876953125 ^2 ::== 93699468690820222171744137324794255356765108202446520320 as intpart 93699468690820222171744137305594926626146552707320643584  diafora 7805056979294823919972380003935646994094066589515514904576 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 967984858821770115458838742.7991716861724853515625 ^2 ::== 936994686908202221717441373247942642112022635830312960 as intpart 936994686908202221717441371700770387186083407901753344  diafora 7897819453298735939922406699869540856365713500179519242240 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24199621470544252886470968569.979290008544921875 ^2 ::== 585621679317626388573400858279964034589017648959902973952 as intpart 585621679317626388573400858232567115578797675279342895104  diafora 7313134768668017753570723283008675012925540713207882055680 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12906464784290268206117849903.9889621734619140625 ^2 ::== 166576833228124839416434021910745510762835138836179189760 as intpart 166576833228124839416434021885217512034931794047209046016  diafora 7732179614757519302727690119356024673137804388875758469120 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 32266161960725670515294624759.97240447998046875 ^2 ::== 1041105207675780246352712636942159442267719617726119936000 as intpart 1041105207675780246352712636879407880864710512983293296640  diafora 6857651240309863895791411504361833718734581794103667720192 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3226616196072567051529462475.997240543365478515625 ^2 ::== 10411052076757802463527126369421594422677196177261199360 as intpart 10411052076757802463527126362986169428089034966304817152  diafora 7888345395908886339680597014878255608440538000449763016704 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 80665404901814176288236561899.9310150146484375 ^2 ::== 6506907547973626539704453980888496929741498103317028405248 as intpart 6506907547973626539704453980738295150209298116134834274304  diafora 1391848900012017602439670160502946751621449094609420419072 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9873445559982055177680155176.55154895782470703125 ^2 ::== 97484927225929359147482600472715904700888986494563254272 as intpart 97484927225929359147482600461824531431520374691698049024  diafora 7801271520759714782996641540779417417622891664749008781312 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24683613899955137944200387941.378871917724609375 ^2 ::== 609280795162058494671766252954474390213456716982084698112 as intpart 609280795162058494671766252935770494395288981705618096128  diafora 7289475652823585647472357888305471482993321954952960016384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2468361389995513794420038794.1378872394561767578125 ^2 ::== 6092807951620584946717662529544744043805561655910203392 as intpart 6092807951620584946717662528864033214470023418231128064  diafora 7892663640034023557197406478712377947125619965033875243008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61709034749887844860500969853.44718170166015625 ^2 ::== 3808004969762865591698539080965465222176093453316742184960 as intpart 3808004969762865591698539080910274736196136594918468485120  diafora 4090751478222778550445585060330967165634610615825786208256 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 40135957560902663323903069823.38031005859375 ^2 ::== 1610895089330579667319099089046137380048075060081367973888 as intpart 1610895089330579667319099089015609283019711540504393940992  diafora 6287861358655064474825025052225632316579580766582567075840 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10033989390225665830975767455.8450775146484375 ^2 ::== 100680943083161229207443693065383586253004691255085498368 as intpart 100680943083161229207443693048424585960791358406498713600  diafora 7798075504902482912936680448192817731438206344866534785024 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1003398939022566583097576745.5845077037811279296875 ^2 ::== 1006809430831612292074436930653835779888633462332063744 as intpart 1006809430831612292074436929480846874060737108349288448  diafora 7897749638554812529852049704311760790504163432935773437952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 25084973475564164577439418639.61269378662109375 ^2 ::== 629255894269757682546523081658647414081279320344284364800 as intpart 629255894269757682546523081627908586170984225719294361600  diafora 7269500553715886459597601059613333088986171807281990074368 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 46061913647835938908785228956.1264495849609375 ^2 ::== 2121699888900694732270964045551661966387631238862220558336 as intpart 2121699888900694732270964045540013059421279575792045522944  diafora 5777056559084949409873160095701228540178012731294915493888 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11515478411958984727196307239.031612396240234375 ^2 ::== 132606243056293420766935252846978872899226952428888784896 as intpart 132606243056293420766935252846250816213829973487002845184  diafora 7766150204929350721377188888394991368958906209435964669952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1151547841195898472719630723.9031612873077392578125 ^2 ::== 1326062430562934207669352528469788829342557285268848640 as intpart 1326062430562934207669352526389722014100908481259241472  diafora 7897430385555081207936454788714852389961954789962207461376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 28788696029897461817990768097.57903289794921875 ^2 ::== 828789019101833879793345330293618040622765144334168752128 as intpart 828789019101833879793345330260278888832342708268709183488  diafora 7069967428883810262350778810980963617461314309790132862976 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 34705798596780538285963242729.62884521484375 ^2 ::== 1204492456240293980314823952082974416524870961895552581632 as intpart 1204492456240293980314823952039325243113320064570905067520  diafora 6694263991745350161829300189201916809833154598001996464128 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 86764496491951345714908106824.072113037109375 ^2 ::== 7528077851501837376967649700518590443290830278461659021312 as intpart 7528077851501837376967649700506076852131999251874275393536  diafora 370678596483806765176474440735165049698747958869979299840 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 8676449649195134571490810682.4072113037109375 ^2 ::== 75280778515018373769676497005185901032804435118472036352 as intpart 75280778515018373769676496998119606835628372981538881536  diafora 7823475669470625768374447644243122616116039672898590343168 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 21691124122987836428727026706.01802825927734375 ^2 ::== 470504865718864836060478106282411902705676892403853688832 as intpart 470504865718864836060478106281629803258249953242142212096  diafora 7428251582266779306083646034959611645225314902016171966464 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 8892869028200001873727542921.6509304046630859375 ^2 ::== 79083119552718845720867267466474909900468368068520706048 as intpart 79083119552718845720867267454897631788928871776947011584  diafora 7819673328432925296423256873786344534494341379667439648768 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 22232172570500004684318857304.12732696533203125 ^2 ::== 494269497204492785755420421665468196322660266167544840192 as intpart 494269497204492785755420421659806721151541231828072398848  diafora 7404486950781151356388703719581434802889887349344565198848 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2223217257050000468431885730.412732601165771484375 ^2 ::== 4942694972044927857554204216654681868779273004282544128 as intpart 4942694972044927857554204214819493515080782242505555968  diafora 7893813753013599214286569937026422196989766320085125824512 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 55580431426250011710797143260.31832122802734375 ^2 ::== 3089184357528079910971377635409176604805945293118772346880 as intpart 3089184357528079910971377635373791950528734904489709928448  diafora 4809572090457564231172746505867449649070557402597251088384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9833309602421152514356252106.7281665802001953125 ^2 ::== 96693977737068044530828922819994212994454597393966956544 as intpart 96693977737068044530828922805673636635152398283433836544  diafora 7802062470248576097613295218435568491869185990203791114240 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24583274006052881285890630266.820415496826171875 ^2 ::== 604337360856675278317680767624963750935111024928324845568 as intpart 604337360856675278317680767584626807595713033799401996288  diafora 7294419087128968863826443373656614565329988095544588763136 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2458327400605288128589063026.682041645050048828125 ^2 ::== 6043373608566752783176807676249638312153412337122934784 as intpart 6043373608566752783176807672896274657047280455470022656  diafora 7892713074377077389360947333568345891035927160630210985984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61458185015132203214726575667.0510406494140625 ^2 ::== 3777108505354220489485504797656023594460171357630677123072 as intpart 3777108505354220489485504797649749873919281239528539422720  diafora 4121647942631423652658619343591492027911465971215715270656 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 86764496491951345714908106824.072113037109375 ^2 ::== 7528077851501837376967649700518590443290830278461659021312 as intpart 7528077851501837376967649700506076852131999251874275393536  diafora 370678596483806765176474440735165049698747958869979299840 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

9 |25| 34 |16| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 25 ::== 315950257919425765685764965649649665495128966801764909056
            ----->  | *2 631900515838851531371529931299299330990257933603529818112
            ----->  /2 157975128959712882842882482824824832747564483400882454528
                 --> 78987564479856441421441241412412416373782241700441227264
                 --> 39493782239928220710720620706206208186891120850220613632
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3992982619174066550680887315244921214700937201730273148928 63190051583885153137152993129.9299163818359375
i insert 249561413698379159417555457194908794623833354695067303936 15797512895971288284288248282.482479095458984375
i insert 0 0
i insert 2495614136983791594175554571317187626734814241115602944 1579751289597128828428824828.2482478618621826171875
i insert 1559758835614869746359721607547167524340920596014076788736 39493782239928220710720620706.206195831298828125
CDIS Start 
section_temp 0
section h inf
315950257919425765685764965649649665495128966801764909056 / 12 ::== 26329188159952147140480413804137470550471919610265337856
            ----->  | *2 52658376319904294280960827608274941100943839220530675712
            ----->  /2 13164594079976073570240206902068735275235959805132668928
                 --> 6582297039988036785120103451034367637617979902566334464
                 --> 3291148519994018392560051725517183818808989951283167232
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2772904596648657326861727302306075565247030514729770549248 52658376319904294280960827608.27494049072265625
i insert 173306537290541082928857956394129722827939407170610659328 13164594079976073570240206902.0687351226806640625
i insert 0 0
i insert 1733065372905410829288579563414713555889978039269851136 1316459407997607357024020690.206873416900634765625
i insert 1083165858065881768305362227463310847954851503600285253632 32911485199940183925600517255.17183685302734375
section_temp 0
section h inf
26329188159952147140480413804137470550471919610265337856 / 3 ::== 8776396053317382380160137934712490183490639870088445952
            ----->  | *2 17552792106634764760320275869424980366981279740176891904
            ----->  /2 4388198026658691190080068967356245091745319935044222976
                 --> 2194099013329345595040034483678122545872659967522111488
                 --> 1097049506664672797520017241839061272936329983761055744
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 308100510738739702984636366911195449777556168916244365312 17552792106634764760320275869.4249820709228515625
i insert 1925628192117123143653977293238853613302013186735243001856 43881980266586911900800689673.5624542236328125
i insert 0 0
i insert 19256281921171231436539772929755616779376090302545657856 4388198026658691190080068967.356245517730712890625
i insert 120351762007320196478373580821943095487931553512274526208 10970495066646727975200172418.390613555908203125
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 16 ::== 493672277999102758884007758827577618864421700671515918336
            ----->  | *2 987344555998205517768015517655155237728843401343031836672
            ----->  /2 246836138999551379442003879413788809432210850335757959168
                 --> 123418069499775689721001939706894404716105425167878979584
                 --> 61709034749887844860500969853447202358052712583939489792
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929359147482600461824531431520374691698049024 9873445559982055177680155176.55154895782470703125
i insert 609280795162058494671766252935770494395288981705618096128 24683613899955137944200387941.378871917724609375
i insert 0 0
i insert 6092807951620584946717662528864033214470023418231128064 2468361389995513794420038794.1378872394561767578125
i insert 3808004969762865591698539080910274736196136594918468485120 61709034749887844860500969853.44718170166015625
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 / 246 ::== 2006797878045133166195153491169014667638606155344773120
            ----->  | *2 4013595756090266332390306982338029335277212310689546240
            ----->  /2 1003398939022566583097576745584507333819303077672386560
                 --> 501699469511283291548788372792253666909651538836193280
                 --> 250849734755641645774394186396126833454825769418096640
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1610895089330579667319099089015609283019711540504393940992 40135957560902663323903069823.38031005859375
i insert 100680943083161229207443693048424585960791358406498713600 10033989390225665830975767455.8450775146484375
i insert 0 0
i insert 1006809430831612292074436929480846874060737108349288448 1003398939022566583097576745.5845077037811279296875
i insert 629255894269757682546523081627908586170984225719294361600 25084973475564164577439418639.61269378662109375
removals 
reporing rt 4
section_temp 0
section h inf
315950257919425765685764965649649665495128966801764909056 - 2006797878045133166195153491169014667638606155344773120 ::== 313943460041380632519569812158480644334236446700657967104
            ----->  | *2 627886920082761265039139624316961288668472893401315934208
            ----->  /2 156971730020690316259784906079240322167118223350328983552
                 --> 78485865010345158129892453039620161083559111675164491776
                 --> 39242932505172579064946226519810080541779555837582245888
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3942419844110158316083075433068047535553854162500279336960 62788692008276126503913962431.69611358642578125
i insert 246401240256884894755192214543207213909595971163617492992 15697173002069031625978490607.9240283966064453125
i insert 0 0
i insert 2464012402568848947551922143234468036405549805363789824 1569717300206903162597849060.792402744293212890625
i insert 1540007751605530592219951341012773928915972184171601723392 39242932505172579064946226519.810070037841796875
section_temp 0
section h inf
26329188159952147140480413804137470550471919610265337856 - 2006797878045133166195153491169014667638606155344773120 ::== 24322390281907013974285260312968456473129123813626216448
            ----->  | *2 48644780563814027948570520625936912946258247627252432896
            ----->  /2 12161195140953506987142630156484228236564561906813108224
                 --> 6080597570476753493571315078242114118282280953406554112
                 --> 3040298785238376746785657539121057059141140476703277056
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2366314676101619018830386692168635090849282860438639345664 48644780563814027948570520625.93691253662109375
i insert 147894667256351188676899168254459098536873497685936570368 12161195140953506987142630156.4842281341552734375
i insert 0 0
i insert 1478946672563511886768991681085247580833033395218939904 1216119514095350698714263015.64842283725738525390625
i insert 924341670352194929230619801651175279210960791364370956288 30402987852383767467856575391.2105712890625
section_temp 0
section h inf
8776396053317382380160137934712490183490639870088445952 - 2006797878045133166195153491169014667638606155344773120 ::== 6769598175272249213964984443543476106147844073449324544
            ----->  | *2 13539196350544498427929968887086952212295688146898649088
            ----->  /2 3384799087636124606982492221771738053073922036724662272
                 --> 1692399543818062303491246110885869026536961018362331136
                 --> 846199771909031151745623055442934513268480509181165568
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 183309837818597464756316824158986136935708844486633193472 13539196350544498427929968887.086956024169921875
i insert 1145686486366234154726980150959815265177166014572027445248 33847990876361246069824922217.717388153076171875
i insert 0 0
i insert 11456864863662341547269801504859434361047436012417974272 3384799087636124606982492221.77173900604248046875
i insert 7160540539788963467043625943752705397924388068127695437824 84619977190903115174562305544.2934722900390625
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 - 2006797878045133166195153491169014667638606155344773120 ::== 491665480121057625717812605336408597703529180570408976384
            ----->  | *2 983330960242115251435625210672817195407058361140817952768
            ----->  /2 245832740060528812858906302668204298851764590285204488192
                 --> 122916370030264406429453151334102149425882295142602244096
                 --> 61458185015132203214726575667051074712941147571301122048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 96693977737068044530828922805673636635152398283433836544 9833309602421152514356252106.7281665802001953125
i insert 604337360856675278317680767584626807595713033799401996288 24583274006052881285890630266.820415496826171875
i insert 0 0
i insert 6043373608566752783176807672896274657047280455470022656 2458327400605288128589063026.682041645050048828125
i insert 3777108505354220489485504797649749873919281239528539422720 61458185015132203214726575667.0510406494140625
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 63190051583885153137152993129.9299163818359375 ^2 ::== 3992982619174066550680887315362443915940224340376397283328 as intpart 3992982619174066550680887315244921214700937201730273148928  diafora 3905773828811577591463236825996320687129810009013981544448 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15797512895971288284288248282.482479095458984375 ^2 ::== 249561413698379159417555457210152744746264021273524830208 as intpart 249561413698379159417555457194908794623833354695067303936  diafora 7649195034287264982726568684046332918312254541263378841600 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1579751289597128828428824828.2482478618621826171875 ^2 ::== 2495614136983791594175554572101527246762064690775326720 as intpart 2495614136983791594175554571317187626734814241115602944  diafora 7896260833848660350549948586669924185594114220282227982336 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 39493782239928220710720620706.206195831298828125 ^2 ::== 1559758835614869746359721607563454475214223783913012068352 as intpart 1559758835614869746359721607547167524340920596014076788736  diafora 6338997612370774395784402533694073773026916807415590551552 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 52658376319904294280960827608.27494049072265625 ^2 ::== 2772904596648657326861727302335031454246985209065039200256 as intpart 2772904596648657326861727302306075565247030514729770549248  diafora 5125851851336986815282396838935166034352261792357190467584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 13164594079976073570240206902.0687351226806640625 ^2 ::== 173306537290541082928857956395939465890436575566564950016 as intpart 173306537290541082928857956394129722827939407170610659328  diafora 7725449910695103059215266184847111706766159516609122664448 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1316459407997607357024020690.206873416900634765625 ^2 ::== 1733065372905410829288579563959394552651119891098632192 as intpart 1733065372905410829288579563414713555889978039269851136  diafora 7897023382612738731314835561677827425573772996904656830464 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 32911485199940183925600517255.17183685302734375 ^2 ::== 1083165858065881768305362227474621557923165974158836236288 as intpart 1083165858065881768305362227463310847954851503600285253632  diafora 6815590589919762373838761913777931204991623158972616278016 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 17552792106634764760320275869.4249820709228515625 ^2 ::== 308100510738739702984636366926114689980624718689808154624 as intpart 308100510738739702984636366911195449777556168916244365312  diafora 7590655937246904439159487774330046716505714082528142295040 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 43881980266586911900800689673.5624542236328125 ^2 ::== 1925628192117123143653977293288216774599972628854139256832 as intpart 1925628192117123143653977293238853613302013186735243001856  diafora 5973128255868520998490146848002387986297279120351718014976 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 4388198026658691190080068967.356245517730712890625 ^2 ::== 19256281921171231436539772932882168123789044918113009664 as intpart 19256281921171231436539772929755616779376090302545657856  diafora 7879500166064472910707584368311486100879078288525545701376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10970495066646727975200172418.390613555908203125 ^2 ::== 120351762007320196478373580830513548412498289303383703552 as intpart 120351762007320196478373580821943095487931553512274526208  diafora 7778404685978323945665750560419298352995633301746039652352 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9873445559982055177680155176.55154895782470703125 ^2 ::== 97484927225929359147482600472715904700888986494563254272 as intpart 97484927225929359147482600461824531431520374691698049024  diafora 7801271520759714782996641540779417417622891664749008781312 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24683613899955137944200387941.378871917724609375 ^2 ::== 609280795162058494671766252954474390213456716982084698112 as intpart 609280795162058494671766252935770494395288981705618096128  diafora 7289475652823585647472357888305471482993321954952960016384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2468361389995513794420038794.1378872394561767578125 ^2 ::== 6092807951620584946717662529544744043805561655910203392 as intpart 6092807951620584946717662528864033214470023418231128064  diafora 7892663640034023557197406478712377947125619965033875243008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61709034749887844860500969853.44718170166015625 ^2 ::== 3808004969762865591698539080965465222176093453316742184960 as intpart 3808004969762865591698539080910274736196136594918468485120  diafora 4090751478222778550445585060330967165634610615825786208256 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 40135957560902663323903069823.38031005859375 ^2 ::== 1610895089330579667319099089046137380048075060081367973888 as intpart 1610895089330579667319099089015609283019711540504393940992  diafora 6287861358655064474825025052225632316579580766582567075840 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10033989390225665830975767455.8450775146484375 ^2 ::== 100680943083161229207443693065383586253004691255085498368 as intpart 100680943083161229207443693048424585960791358406498713600  diafora 7798075504902482912936680448192817731438206344866534785024 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1003398939022566583097576745.5845077037811279296875 ^2 ::== 1006809430831612292074436930653835779888633462332063744 as intpart 1006809430831612292074436929480846874060737108349288448  diafora 7897749638554812529852049704311760790504163432935773437952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 25084973475564164577439418639.61269378662109375 ^2 ::== 629255894269757682546523081658647414081279320344284364800 as intpart 629255894269757682546523081627908586170984225719294361600  diafora 7269500553715886459597601059613333088986171807281990074368 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 62788692008276126503913962431.69611358642578125 ^2 ::== 3942419844110158316083075433155463752644368383494108217344 as intpart 3942419844110158316083075433068047535553854162500279336960  diafora 3956336603875485826061048708173194366276893048243975356416 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15697173002069031625978490607.9240283966064453125 ^2 ::== 246401240256884894755192214572216484540273023968381763584 as intpart 246401240256884894755192214543207213909595971163617492992  diafora 7652355207728759247388931926698034612363287513666313781248 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1569717300206903162597849060.792402744293212890625 ^2 ::== 2464012402568848947551922145722164656508070924898009088 as intpart 2464012402568848947551922143234468036405549805363789824  diafora 7896292435583075293196572219098007087880996790737379000320 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 39242932505172579064946226519.810070037841796875 ^2 ::== 1540007751605530592219951341076353000042507502584514740224 as intpart 1540007751605530592219951341012773928915972184171601723392  diafora 6358748696380113549924172800228467821799047574744006131712 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 48644780563814027948570520625.93691253662109375 ^2 ::== 2366314676101619018830386692259786888722406285582310309888 as intpart 2366314676101619018830386692168635090849282860438639345664  diafora 5532441771884025123313737449072606508750009446648321671168 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12161195140953506987142630156.4842281341552734375 ^2 ::== 147894667256351188676899168266236680545150392848894394368 as intpart 147894667256351188676899168254459098536873497685936570368  diafora 7750861780729292953467224972986783388867317588894324621312 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1216119514095350698714263015.64842283725738525390625 ^2 ::== 1478946672563511886768991682662366870384043067946565632 as intpart 1478946672563511886768991681085247580833033395218939904  diafora 7897277501313080630257355149560156659415002517987710205952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 30402987852383767467856575391.2105712890625 ^2 ::== 924341670352194929230619801663979314797954232610977742848 as intpart 924341670352194929230619801651175279210960791364370956288  diafora 6974414777633449212913504339590066622619786419379883737088 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 13539196350544498427929968887.086956024169921875 ^2 ::== 183309837818597464756316824161340765532465444025924583424 as intpart 183309837818597464756316824158986136935708844486633193472  diafora 7715446610167046677387807317082256293800084447657885433856 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 33847990876361246069824922217.717388153076171875 ^2 ::== 1145686486366234154726980151008379628739815090463736594432 as intpart 1145686486366234154726980150959815265177166014572027445248  diafora 6753069961619409987417143990281426334422126292514933571584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3384799087636124606982492221.77173900604248046875 ^2 ::== 11456864863662341547269801510083797845779090251620286464 as intpart 11456864863662341547269801504859434361047436012417974272  diafora 7887299583121981800596854339736382034192574971441888362496 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 84619977190903115174562305544.2934722900390625 ^2 ::== 7160540539788963467043625943802372906297435493141323972608 as intpart 7160540539788963467043625943752705397924388068127695437824  diafora 738215908196680675100498197488536503906359142616559255552 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9833309602421152514356252106.7281665802001953125 ^2 ::== 96693977737068044530828922819994212994454597393966956544 as intpart 96693977737068044530828922805673636635152398283433836544  diafora 7802062470248576097613295218435568491869185990203791114240 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24583274006052881285890630266.820415496826171875 ^2 ::== 604337360856675278317680767624963750935111024928324845568 as intpart 604337360856675278317680767584626807595713033799401996288  diafora 7294419087128968863826443373656614565329988095544588763136 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2458327400605288128589063026.682041645050048828125 ^2 ::== 6043373608566752783176807676249638312153412337122934784 as intpart 6043373608566752783176807672896274657047280455470022656  diafora 7892713074377077389360947333568345891035927160630210985984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61458185015132203214726575667.0510406494140625 ^2 ::== 3777108505354220489485504797656023594460171357630677123072 as intpart 3777108505354220489485504797649749873919281239528539422720  diafora 4121647942631423652658619343591492027911465971215715270656 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 84619977190903115174562305544.2934722900390625 ^2 ::== 7160540539788963467043625943802372906297435493141323972608 as intpart 7160540539788963467043625943752705397924388068127695437824  diafora 738215908196680675100498197488536503906359142616559255552 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

9 26 |35 17| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 35 ::== 225678755656732689775546404035464046782234976286974935040
            ----->  | *2 451357511313465379551092808070928093564469952573949870080
            ----->  /2 112839377828366344887773202017732023391117488143487467520
                 --> 56419688914183172443886601008866011695558744071743733760
                 --> 28209844457091586221943300504433005847779372035871866880
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2037236030190850280959636385380625135044965476926106894336 45135751131346537955109280807.09281158447265625
i insert 127327251886928142559977274069363164992408959932952477696 11283937782836634488777320201.7732028961181640625
i insert 0 0
i insert 1273272518869281425599772740467952807537088809075212288 1128393778283663448877732020.1773202419281005859375
i insert 795795324293300890999857963018149325109162360064534642688 28209844457091586221943300504.43300628662109375
CDIS Start 
section_temp 0
section h inf
225678755656732689775546404035464046782234976286974935040 / 12 ::== 18806562971394390814628867002955336444791834212307042304
            ----->  | *2 37613125942788781629257734005910672889583668424614084608
            ----->  /2 9403281485697195407314433501477668222395917106153521152
                 --> 4701640742848597703657216750738834111197958553076760576
                 --> 2350820371424298851828608375369417055598979276538380288
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1414747243188090472888636378673856543805043962274534916096 37613125942788781629257734005.91068267822265625
i insert 88421702699255654555539773662414398693805400170950557696 9403281485697195407314433501.4776706695556640625
i insert 0 0
i insert 884217026992556545555397736436078350865252166553042944 940328148569719540731443350.14776706695556640625
i insert 552635641870347840972123585413598215529997817120932495360 23508203714242988518286083753.69417572021484375
section_temp 0
section h inf
18806562971394390814628867002955336444791834212307042304 / 3 ::== 6268854323798130271542955667651779208461151643239448576
            ----->  | *2 12537708647596260543085911335303558416922303286478897152
            ----->  /2 3134427161899065135771477833825889604230575821619724288
                 --> 1567213580949532567885738916912944802115287910809862144
                 --> 783606790474766283942869458456472401057643955404931072
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 157194138132010052543181819852650739682426616794002227200 12537708647596260543085911335.3035564422607421875
i insert 982463363325062828394886374110411329974366440886028468224 31344271618990651357714778338.258892059326171875
i insert 0 0
i insert 9824633633250628283948863736089030033183712491360747520 3134427161899065135771477833.825889110565185546875
i insert 6140396020781642677468039838190071152350177022152133312512 78360679047476628394286945845.6472320556640625
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 17 ::== 464632732234449655420242596543602500370215118709343649792
            ----->  | *2 929265464468899310840485193087205000740430237418687299584
            ----->  /2 232316366117224827710121298271801250185107559354671824896
                 --> 116158183058612413855060649135900625092553779677335912448
                 --> 58079091529306206927530324567950312546276889838667956224
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 86353430345459916753479396942323101790520456542509072384 9292654644688993108404851930.87205219268798828125
i insert 539708939659124479709246230982445955641384555772676931584 23231636611722482771012129827.1801300048828125
i insert 0 0
i insert 5397089396591244797092462306572030393026289440674283520 2323163661172248277101212982.7180130481719970703125
i insert 3373180872869527998182788943582208216316852705032386117632 58079091529306206927530324567.95032501220703125
section_temp 0
section h inf
464632732234449655420242596543602500370215118709343649792 / 246 ::== 1888750944042478274066026815217896244585719081310617600
            ----->  | *2 3777501888084956548132053630435792489171438162621235200
            ----->  /2 944375472021239137033013407608948122292859540655308800
                 --> 472187736010619568516506703804474061146429770327654400
                 --> 236093868005309784258253351902237030573214885163827200
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1426952051448541158594080853937702225108894074446345666560 37775018880849565481320536304.357921600341796875
i insert 89184503215533822412130053371106389069305879652896604160 9443754720212391370330134076.08948040008544921875
i insert 0 0
i insert 891845032155338224121300532577813374155814809731334144 944375472021239137033013407.6089479923248291015625
i insert 557403145097086390075812833569414905710146092047555100672 23609386800530978425825335190.22370147705078125
removals 
reporing rt 4
section_temp 0
section h inf
225678755656732689775546404035464046782234976286974935040 - 1888750944042478274066026815217896244585719081310617600 ::== 223790004712690211501480377220246137846289334493492805632
            ----->  | *2 447580009425380423002960754440492275692578668986985611264
            ----->  /2 111895002356345105750740188610123068923144667246746402816
                 --> 55947501178172552875370094305061534461572333623373201408
                 --> 27973750589086276437685047152530767230786166811686600704
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2003278648372236282931264672719818119982395912273094770688 44758000942538042300296075444.04923248291015625
i insert 125204915523264767683204042044988632498899744517068423168 11189500235634510575074018861.0123081207275390625
i insert 0 0
i insert 1252049155232647676832040420226096246203443301803098112 1118950023563451057507401886.1012308597564697265625
i insert 782530722020404798020025262753205174675611109011501350912 27973750589086276437685047152.53076934814453125
section_temp 0
section h inf
18806562971394390814628867002955336444791834212307042304 - 1888750944042478274066026815217896244585719081310617600 ::== 16917812027351912540562840187737439314762399592937947136
            ----->  | *2 33835624054703825081125680375474878629524799185875894272
            ----->  /2 8458906013675956270281420093868719657381199796468973568
                 --> 4229453006837978135140710046934359828690599898234486784
                 --> 2114726503418989067570355023467179914345299949117243392
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1144849455171252116605984514331753017245757726934970662912 33835624054703825081125680375.474884033203125
i insert 7155309094820325728787403214658045804078786107669638807552 84589060136759562702814200938.6872100830078125
i insert 0 0
i insert 71553090948203257287874032133046207080230791515983577088 8458906013675956270281420093.86872100830078125
i insert 447206818426270358049212700894980576739587779062157803520 21147265034189890675703550234.671802520751953125
section_temp 0
section h inf
6268854323798130271542955667651779208461151643239448576 - 1888750944042478274066026815217896244585719081310617600 ::== 4380103379755651997476928852433883259023337741281656832
            ----->  | *2 8760206759511303994953857704867766518046675482563313664
            ----->  /2 2190051689877825998738464426216941629511668870640828416
                 --> 1095025844938912999369232213108470814755834435320414208
                 --> 547512922469456499684616106554235407377917217660207104
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 7674122246938754150625840409268215034822454663896258052096 87602067595113039949538577048.67767333984375
i insert 479632640433672134414115025579263439676403416493516128256 21900516898778259987384644262.1694183349609375
i insert 0 0
i insert 4796326404336721344141150254916613644082228948730118144 2190051689877825998738464426.21694183349609375
i insert 2997704002710450840088218909870396290193396106820086398976 54751292246945649968461610655.42354583740234375
section_temp 0
section h inf
464632732234449655420242596543602500370215118709343649792 - 1888750944042478274066026815217896244585719081310617600 ::== 462743981290407177146176569728384629213201339873023229952
            ----->  | *2 925487962580814354292353139456769258426402679746046459904
            ----->  /2 231371990645203588573088284864192314606600669936511614976
                 --> 115685995322601794286544142432096157303300334968255807488
                 --> 57842997661300897143272071216048078651650167484127903744
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 85652796888198683044609703248725887974886031108601806848 9254879625808143542923531394.56769275665283203125
i insert 535329980551241769028810645350811235952111967790251900928 23137199064520358857308828486.419231414794921875
i insert 0 0
i insert 5353299805512417690288106450731648081923256424071168000 2313719906452035885730882848.6419231891632080078125
i insert 3345812378445261056430066533558256378725333000833011286016 57842997661300897143272071216.0480804443359375
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 45135751131346537955109280807.09281158447265625 ^2 ::== 2037236030190850280959636385389003293206349760764114370560 as intpart 2037236030190850280959636385380625135044965476926106894336  diafora 5861520417794793861184487755860616464554326830160854122496 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11283937782836634488777320201.7732028961181640625 ^2 ::== 127327251886928142559977274086812705825396860047757148160 as intpart 127327251886928142559977274069363164992408959932952477696  diafora 7771429196098715999584146867171878680169940456375559651328 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1128393778283663448877732020.1773202419281005859375 ^2 ::== 1273272518869281425599772740868126881165225492865875968 as intpart 1273272518869281425599772740467952807537088809075212288  diafora 7897483175466774860718524368500773407869525975591773274112 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 28209844457091586221943300504.43300628662109375 ^2 ::== 795795324293300890999857963042579298071934786426997047296 as intpart 795795324293300890999857963018149325109162360064534642688  diafora 7102961123692343251144266178223093030068767206165660565504 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37613125942788781629257734005.91068267822265625 ^2 ::== 1414747243188090472888636378742363801035238316518137659392 as intpart 1414747243188090472888636378673856543805043962274534916096  diafora 6484009204797553669255487762567384904678520892983779262464 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9403281485697195407314433501.4776706695556640625 ^2 ::== 88421702699255654555539773671397737564702394782383603712 as intpart 88421702699255654555539773662414398693805400170950557696  diafora 7810334745286388487588584367578826974231895729173040201728 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 940328148569719540731443350.14776706695556640625 ^2 ::== 884217026992556545555397736713977369744065844236779520 as intpart 884217026992556545555397736436078350865252166553042944  diafora 7897872230958651585598568743504806018572647282129919541248 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23508203714242988518286083753.69417572021484375 ^2 ::== 552635641870347840972123585446235812555725138693445386240 as intpart 552635641870347840972123585413598215529997817120932495360  diafora 7346120806115296301172000555827643761858613119537645617152 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12537708647596260543085911335.3035564422607421875 ^2 ::== 157194138132010052543181819860262533321504883128150261760 as intpart 157194138132010052543181819852650739682426616794002227200  diafora 7741562309853634089600942321388591124369388730993090756608 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 31344271618990651357714778338.258892059326171875 ^2 ::== 982463363325062828394886374126640856871237933899165204480 as intpart 982463363325062828394886374110411329974366440886028468224  diafora 6916293084660581313749237767130830420740653318029579386880 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3134427161899065135771477833.825889110565185546875 ^2 ::== 9824633633250628283948863741266408332594055195509391360 as intpart 9824633633250628283948863736089030033183712491360747520  diafora 7888931814352393513860175277505152967425484776363209523200 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 78360679047476628394286945845.6472320556640625 ^2 ::== 6140396020781642677468039838291506073244942483055855009792 as intpart 6140396020781642677468039838190071152350177022152133312512  diafora 1758360427204001464676084303051170749480570188592121380864 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9292654644688993108404851930.87205219268798828125 ^2 ::== 86353430345459916753479396958530461899121359441012719616 as intpart 86353430345459916753479396942323101790520456542509072384  diafora 7812403017640184225390644744298918752816561925505293484032 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23231636611722482771012129827.1801300048828125 ^2 ::== 539708939659124479709246230990815424648440359463491207168 as intpart 539708939659124479709246230982445955641384555772676931584  diafora 7359047508326519662434877910258795719515771477228607504384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2323163661172248277101212982.7180130481719970703125 ^2 ::== 5397089396591244797092462309908153868695084965063294976 as intpart 5397089396591244797092462306572030393026289440674283520  diafora 7893359358589052897347031678934669958211205044033311211520 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 58079091529306206927530324567.95032501220703125 ^2 ::== 3373180872869527998182788943692596441831684109603981754368 as intpart 3373180872869527998182788943582208216316852705032386117632  diafora 4525575575116116143961335197659033685513894505711868575744 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37775018880849565481320536304.357921600341796875 ^2 ::== 1426952051448541158594080853964743175610579196168879734784 as intpart 1426952051448541158594080853937702225108894074446345666560  diafora 6471804396537102983550043287303540130069035491783849541632 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9443754720212391370330134076.08948040008544921875 ^2 ::== 89184503215533822412130053372796448475661199760554983424 as intpart 89184503215533822412130053371106389069305879652896604160  diafora 7809571944770110319731994087870134936632730420994642018304 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 944375472021239137033013407.6089479923248291015625 ^2 ::== 891845032155338224121300533727964472950695790431436800 as intpart 891845032155338224121300532577813374155814809731334144  diafora 7897864602953488803920002840708664466098336072916464041984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23609386800530978425825335190.22370147705078125 ^2 ::== 557403145097086390075812833579977819501165188547226894336 as intpart 557403145097086390075812833569414905710146092047555100672  diafora 7341353302888557752068311307671826996120601118696699592704 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 44758000942538042300296075444.04923248291015625 ^2 ::== 2003278648372236282931264672724225259057801042929486135296 as intpart 2003278648372236282931264672719818119982395912273094770688  diafora 5895477799613407859212859468521423781848351298471159922688 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11189500235634510575074018861.0123081207275390625 ^2 ::== 125204915523264767683204042045264078691112565183092883456 as intpart 125204915523264767683204042044988632498899744517068423168  diafora 7773551532462379374460920099196253836015825410584611913728 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1118950023563451057507401886.1012308597564697265625 ^2 ::== 1252049155232647676832040420452640857746622894875607040 as intpart 1252049155232647676832040420226096246203443301803098112  diafora 7897504398830411494467292100821015648270710306847395414016 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 27973750589086276437685047152.53076934814453125 ^2 ::== 782530722020404798020025262782900397372123875001426247680 as intpart 782530722020404798020025262753205174675611109011501350912  diafora 7116225725965239344124098878488036802712999827647076761600 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 33835624054703825081125680375.474884033203125 ^2 ::== 1144849455171252116605984514363888985614208703314303909888 as intpart 1144849455171252116605984514331753017245757726934970662912  diafora 6753906992814392025538139626909488884584989483809284030464 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 84589060136759562702814200938.6872100830078125 ^2 ::== 7155309094820325728787403214774306991225305380771957047296 as intpart 7155309094820325728787403214658045804078786107669638807552  diafora 743447353165318413356720926583196097751961103074615885824 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 8458906013675956270281420093.86872100830078125 ^2 ::== 71553090948203257287874032147743061600888043957143994368 as intpart 71553090948203257287874032133046207080230791515983577088  diafora 7827203357037440884856250109108195996981971322885564792832 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 21147265034189890675703550234.671802520751953125 ^2 ::== 447206818426270358049212700923394186951581586298247315456 as intpart 447206818426270358049212700894980576739587779062157803520  diafora 7451549629559373784094911440346261173975431979853450051584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 87602067595113039949538577048.67767333984375 ^2 ::== 7674122246938754150625840409386946057418446624402501009408 as intpart 7674122246938754150625840409268215034822454663896258052096  diafora 224634201046889991518283731973026867008292546847996641280 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 21900516898778259987384644262.1694183349609375 ^2 ::== 479632640433672134414115025586684128588652914025156313088 as intpart 479632640433672134414115025579263439676403416493516128256  diafora 7419123807551972007730009115661978688827934971993708822528 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2190051689877825998738464426.21694183349609375 ^2 ::== 4796326404336721344141150255866841144215534654162206720 as intpart 4796326404336721344141150254916613644082228948730118144  diafora 7893960121581307420799982990986325414509968398558534041600 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 54751292246945649968461610655.42354583740234375 ^2 ::== 2997704002710450840088218909916775822568546644135807811584 as intpart 2997704002710450840088218909870396290193396106820086398976  diafora 4901052445275193302055905231370845913868806007581461970944 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9254879625808143542923531394.56769275665283203125 ^2 ::== 85652796888198683044609703259233748417447833284372332544 as intpart 85652796888198683044609703248725887974886031108601806848  diafora 7813103651097445459099514437992515541619212892671131516928 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23137199064520358857308828486.419231414794921875 ^2 ::== 535329980551241769028810645370210868579467922156761907200 as intpart 535329980551241769028810645350811235952111967790251900928  diafora 7363426467434402373115313495890430212531452887468062277632 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2313719906452035885730882848.6419231891632080078125 ^2 ::== 5353299805512417690288106453702109276090489580273270784 as intpart 5353299805512417690288106450731648081923256424071168000  diafora 7893403148180131724453836034790510010546950086533455020032 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 57842997661300897143272071216.0480804443359375 ^2 ::== 3345812378445261056430066533563818646421379909665834401792 as intpart 3345812378445261056430066533558256378725333000833011286016  diafora 4552944069540383085714057607682985523105414209911243407360 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 87602067595113039949538577048.67767333984375 ^2 ::== 7674122246938754150625840409386946057418446624402501009408 as intpart 7674122246938754150625840409268215034822454663896258052096  diafora 224634201046889991518283731973026867008292546847996641280 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

9 |26| 35 |17| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 26 ::== 303798324922524774697850928509278520155439560814332215296
            ----->  | *2 607596649845049549395701857018557040310879121628664430592
            ----->  /2 151899162461262387348925464254639260077719780407166107648
                 --> 75949581230631193674462732127319630038859890203583053824
                 --> 37974790615315596837231366063659815019429945101791526912
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3691736889029277506176855875785850688734058572414757896192 60759664984504954939570185701.855712890625
i insert 230733555564329844136053492229020704920945341857315946496 15189916246126238734892546425.46392822265625
i insert 0 0
i insert 2307335555643298441360534920771215616620326559437291520 1518991624612623873489254642.546392917633056640625
i insert 1442084722277061525850334326469354164712177186765514211328 37974790615315596837231366063.659820556640625
CDIS Start 
section_temp 0
section h inf
303798324922524774697850928509278520155439560814332215296 / 12 ::== 25316527076877064558154244042439878253742124357742755840
            ----->  | *2 50633054153754129116308488084879756507484248715485511680
            ----->  /2 12658263538438532279077122021219939126871062178871377920
                 --> 6329131769219266139538561010609969563435531089435688960
                 --> 3164565884609633069769280505304984781717765544717844480
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2563706172936998268178372135945518548625143321322835673088 50633054153754129116308488084.87976837158203125
i insert 160231635808562391761148258496594909289071457582677229568 12658263538438532279077122021.2199420928955078125
i insert 0 0
i insert 1602316358085623917611482584712783828546374983760216064 1265826353843853227907712202.1219942569732666015625
i insert 1001447723803514948507176615635363927282927371271077363712 31645658846096330697692805053.049854278564453125
section_temp 0
section h inf
25316527076877064558154244042439878253742124357742755840 / 3 ::== 8438842358959021519384748014146626084580708119247585280
            ----->  | *2 16877684717918043038769496028293252169161416238495170560
            ----->  /2 4219421179479510759692374007073313042290354059623792640
                 --> 2109710589739755379846187003536656521145177029811896320
                 --> 1054855294869877689923093501768328260572588514905948160
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 284856241437444252019819126216168752810970499896200658944 16877684717918043038769496028.293254852294921875
i insert 1780351508984026575123869538851054572842304104001188134912 42194211794795107596923740070.7331390380859375
i insert 0 0
i insert 17803515089840265751238695388510547050685656243512541184 4219421179479510759692374007.07331371307373046875
i insert 111271969311501660945241846167642353005732833721852100608 10548552948698776899230935017.683284759521484375
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 17 ::== 464632732234449655420242596543602500370215118709343649792
            ----->  | *2 929265464468899310840485193087205000740430237418687299584
            ----->  /2 232316366117224827710121298271801250185107559354671824896
                 --> 116158183058612413855060649135900625092553779677335912448
                 --> 58079091529306206927530324567950312546276889838667956224
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 86353430345459916753479396942323101790520456542509072384 9292654644688993108404851930.87205219268798828125
i insert 539708939659124479709246230982445955641384555772676931584 23231636611722482771012129827.1801300048828125
i insert 0 0
i insert 5397089396591244797092462306572030393026289440674283520 2323163661172248277101212982.7180130481719970703125
i insert 3373180872869527998182788943582208216316852705032386117632 58079091529306206927530324567.95032501220703125
section_temp 0
section h inf
464632732234449655420242596543602500370215118709343649792 / 246 ::== 1888750944042478274066026815217896244585719081310617600
            ----->  | *2 3777501888084956548132053630435792489171438162621235200
            ----->  /2 944375472021239137033013407608948122292859540655308800
                 --> 472187736010619568516506703804474061146429770327654400
                 --> 236093868005309784258253351902237030573214885163827200
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1426952051448541158594080853937702225108894074446345666560 37775018880849565481320536304.357921600341796875
i insert 89184503215533822412130053371106389069305879652896604160 9443754720212391370330134076.08948040008544921875
i insert 0 0
i insert 891845032155338224121300532577813374155814809731334144 944375472021239137033013407.6089479923248291015625
i insert 557403145097086390075812833569414905710146092047555100672 23609386800530978425825335190.22370147705078125
removals 
reporing rt 4
section_temp 0
section h inf
303798324922524774697850928509278520155439560814332215296 - 1888750944042478274066026815217896244585719081310617600 ::== 301909573978482296423784901694060611219493919020850085888
            ----->  | *2 603819147956964592847569803388121222438987838041700171776
            ----->  /2 150954786989241148211892450847030305609746959510425042944
                 --> 75477393494620574105946225423515152804873479755212521472
                 --> 37738696747310287052973112711757576402436739877606260736
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3645975634394746982406250313636536765158803547762303434752 60381914795696459284756980338.81212615966796875
i insert 227873477149671686400390644587188068902215976802205040640 15095478698924114821189245084.7030315399169921875
i insert 0 0
i insert 2278734771496716864003906444664242481658666037953953792 1509547869892411482118924508.470303058624267578125
i insert 1424209232185448040002441528745402778016231250982023987200 37738696747310287052973112711.757579803466796875
section_temp 0
section h inf
25316527076877064558154244042439878253742124357742755840 - 1888750944042478274066026815217896244585719081310617600 ::== 23427776132834586284088217227221981123712689738373660672
            ----->  | *2 46855552265669172568176434454443962247425379476747321344
            ----->  /2 11713888066417293142044108613610990561856344869186830336
                 --> 5856944033208646571022054306805495280928172434593415168
                 --> 2928472016604323285511027153402747640464086217296707584
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2195442778120855530710438192527487178737963050807720935424 46855552265669172568176434454.4439544677734375
i insert 137215173632553470669402387021254061941966741287167066112 11713888066417293142044108613.610988616943359375
i insert 0 0
i insert 1372151736325534706694023869509707415670310449572741120 1171388806641729314204410861.36109888553619384765625
i insert 857594835203459191683764918970692108441458996501838561280 29284720166043232855110271534.02747344970703125
section_temp 0
section h inf
8438842358959021519384748014146626084580708119247585280 - 1888750944042478274066026815217896244585719081310617600 ::== 6550091414916543245318721198928730135142894217289793536
            ----->  | *2 13100182829833086490637442397857460270285788434579587072
            ----->  /2 3275045707458271622659360599464365067571447108644896768
                 --> 1637522853729135811329680299732182533785723554322448384
                 --> 818761426864567905664840149866091266892861777161224192
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 171614790175053613921135017408194607758967305084759703552 13100182829833086490637442397.8574581146240234375
i insert 1072592438594085087007093858899467749360680135234141814784 32750457074582716226593605994.643646240234375
i insert 0 0
i insert 10725924385940850870070938586374639905702061263141470208 3275045707458271622659360599.464364528656005859375
i insert 6703702741213031793794336618285425533643465129414598066176 81876142686456790566484014986.6091156005859375
section_temp 0
section h inf
464632732234449655420242596543602500370215118709343649792 - 1888750944042478274066026815217896244585719081310617600 ::== 462743981290407177146176569728384629213201339873023229952
            ----->  | *2 925487962580814354292353139456769258426402679746046459904
            ----->  /2 231371990645203588573088284864192314606600669936511614976
                 --> 115685995322601794286544142432096157303300334968255807488
                 --> 57842997661300897143272071216048078651650167484127903744
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 85652796888198683044609703248725887974886031108601806848 9254879625808143542923531394.56769275665283203125
i insert 535329980551241769028810645350811235952111967790251900928 23137199064520358857308828486.419231414794921875
i insert 0 0
i insert 5353299805512417690288106450731648081923256424071168000 2313719906452035885730882848.6419231891632080078125
i insert 3345812378445261056430066533558256378725333000833011286016 57842997661300897143272071216.0480804443359375
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 60759664984504954939570185701.855712890625 ^2 ::== 3691736889029277506176855875889836443108210900877109624832 as intpart 3691736889029277506176855875785850688734058572414757896192  diafora 4207019558956366635967268265455391213096688638329496797184 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15189916246126238734892546425.46392822265625 ^2 ::== 230733555564329844136053492243114777694263181304819351552 as intpart 230733555564329844136053492229020704920945341857315946496  diafora 7668022892421314298008070649012220668004755787486674812928 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1518991624612623873489254642.546392917633056640625 ^2 ::== 2307335555643298441360534922431148095702369406749245440 as intpart 2307335555643298441360534920771215616620326559437291520  diafora 7896449112430000843702763606320470680606316685777113710592 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37974790615315596837231366063.659820556640625 ^2 ::== 1442084722277061525850334326519467313365480054458668810240 as intpart 1442084722277061525850334326469354164712177186765514211328  diafora 6456671725708582616293789814771888039350024927636034158592 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 50633054153754129116308488084.87976837158203125 ^2 ::== 2563706172936998268178372136034609430207278707380926283776 as intpart 2563706172936998268178372135945518548625143321322835673088  diafora 5335050275048645873965752005295723655437058793078712696832 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12658263538438532279077122021.2199420928955078125 ^2 ::== 160231635808562391761148258502163089387954919211307892736 as intpart 160231635808562391761148258496594909289071457582677229568  diafora 7738524812177081750382975882744647162546869136468805156864 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1265826353843853227907712202.1219942569732666015625 ^2 ::== 1602316358085623917611482585021631023744627471028322304 as intpart 1602316358085623917611482584712783828546374983760216064  diafora 7897154131627558518226512658656529369468216048569102106624 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 31645658846096330697692805053.049854278564453125 ^2 ::== 1001447723803514948507176615638519223672121553417060483072 as intpart 1001447723803514948507176615635363927282927371271077363712  diafora 6897308724182129193636947525605878125663547291301824167936 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 16877684717918043038769496028.293254852294921875 ^2 ::== 284856241437444252019819126226067664095566261321665085440 as intpart 284856241437444252019819126216168752810970499896200658944  diafora 7613900206548199890124305015025073073461912984933730615296 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 42194211794795107596923740070.7331390380859375 ^2 ::== 1780351508984026575123869538912923165049812173960538750976 as intpart 1780351508984026575123869538851054572842304104001188134912  diafora 6118404939001617567020254602390187631219898010400360235008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 4219421179479510759692374007.07331371307373046875 ^2 ::== 17803515089840265751238695389129229005972891332604067840 as intpart 17803515089840265751238695388510547050685656243512541184  diafora 7880952932895803876392885445852730972268376442059479842816 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10548552948698776899230935017.683284759521484375 ^2 ::== 111271969311501660945241846182057697815613260872533671936 as intpart 111271969311501660945241846167642353005732833721852100608  diafora 7787484478674142481198882295073599189925161678929366351872 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9292654644688993108404851930.87205219268798828125 ^2 ::== 86353430345459916753479396958530461899121359441012719616 as intpart 86353430345459916753479396942323101790520456542509072384  diafora 7812403017640184225390644744298918752816561925505293484032 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23231636611722482771012129827.1801300048828125 ^2 ::== 539708939659124479709246230990815424648440359463491207168 as intpart 539708939659124479709246230982445955641384555772676931584  diafora 7359047508326519662434877910258795719515771477228607504384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2323163661172248277101212982.7180130481719970703125 ^2 ::== 5397089396591244797092462309908153868695084965063294976 as intpart 5397089396591244797092462306572030393026289440674283520  diafora 7893359358589052897347031678934669958211205044033311211520 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 58079091529306206927530324567.95032501220703125 ^2 ::== 3373180872869527998182788943692596441831684109603981754368 as intpart 3373180872869527998182788943582208216316852705032386117632  diafora 4525575575116116143961335197659033685513894505711868575744 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37775018880849565481320536304.357921600341796875 ^2 ::== 1426952051448541158594080853964743175610579196168879734784 as intpart 1426952051448541158594080853937702225108894074446345666560  diafora 6471804396537102983550043287303540130069035491783849541632 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9443754720212391370330134076.08948040008544921875 ^2 ::== 89184503215533822412130053372796448475661199760554983424 as intpart 89184503215533822412130053371106389069305879652896604160  diafora 7809571944770110319731994087870134936632730420994642018304 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 944375472021239137033013407.6089479923248291015625 ^2 ::== 891845032155338224121300533727964472950695790431436800 as intpart 891845032155338224121300532577813374155814809731334144  diafora 7897864602953488803920002840708664466098336072916464041984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23609386800530978425825335190.22370147705078125 ^2 ::== 557403145097086390075812833579977819501165188547226894336 as intpart 557403145097086390075812833569414905710146092047555100672  diafora 7341353302888557752068311307671826996120601118696699592704 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 60381914795696459284756980338.81212615966796875 ^2 ::== 3645975634394746982406250313734612081200859954189516668928 as intpart 3645975634394746982406250313636536765158803547762303434752  diafora 4252780813590897159737873827604705136671943662981951258624 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15095478698924114821189245084.7030315399169921875 ^2 ::== 227873477149671686400390644608413255075053747136844791808 as intpart 227873477149671686400390644587188068902215976802205040640  diafora 7670882970835972455743733496654054021823190548727858200576 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1509547869892411482118924508.470303058624267578125 ^2 ::== 2278734771496716864003906446084132350049961949408526336 as intpart 2278734771496716864003906444664242481658666037953953792  diafora 7896477713214147425280120234796577739924466658669622198272 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37738696747310287052973112711.757579803466796875 ^2 ::== 1424209232185448040002441528802583004779546337173217214464 as intpart 1424209232185448040002441528745402778016231250982023987200  diafora 6474547215800196102141682612495839577161698315248171220992 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 46855552265669172568176434454.4439544677734375 ^2 ::== 2195442778120855530710438192569090849662725995568765599744 as intpart 2195442778120855530710438192527487178737963050807720935424  diafora 5703313669864788611433685948713755025324239063593827434496 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11713888066417293142044108613.610988616943359375 ^2 ::== 137215173632553470669402387035568178103920374723047849984 as intpart 137215173632553470669402387021254061941966741287167066112  diafora 7761541274353090671474721754219987707662518949107021643776 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1171388806641729314204410861.36109888553619384765625 ^2 ::== 1372151736325534706694023870355681739718497022121082880 as intpart 1372151736325534706694023869509707415670310449572741120  diafora 7897384296249318607437430117371732048021715931335680327680 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 29284720166043232855110271534.02747344970703125 ^2 ::== 857594835203459191683764918972301188707366067933372481536 as intpart 857594835203459191683764918970692108441458996501838561280  diafora 7041161612782184950460359222270549642273560762413769293824 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 13100182829833086490637442397.8574581146240234375 ^2 ::== 171614790175053613921135017430660321827923068259875684352 as intpart 171614790175053613921135017408194607758967305084759703552  diafora 7727141657810590528222989123833047256292848042702333280256 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 32750457074582716226593605994.643646240234375 ^2 ::== 1072592438594085087007093858941627072815283453929610805248 as intpart 1072592438594085087007093858899467749360680135234141814784  diafora 6826164009391559055137030282341773850238612171852819202048 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3275045707458271622659360599.464364528656005859375 ^2 ::== 10725924385940850870070938589416270114245191766242230272 as intpart 10725924385940850870070938586374639905702061263141470208  diafora 7888030523599703291274053202654867302065160253873097539584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 81876142686456790566484014986.6091156005859375 ^2 ::== 6703702741213031793794336618385169167316589724102905823232 as intpart 6703702741213031793794336618285425533643465129414598066176  diafora 1195053706772612348349787522955816368187282081329656627200 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9254879625808143542923531394.56769275665283203125 ^2 ::== 85652796888198683044609703259233748417447833284372332544 as intpart 85652796888198683044609703248725887974886031108601806848  diafora 7813103651097445459099514437992515541619212892671131516928 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23137199064520358857308828486.419231414794921875 ^2 ::== 535329980551241769028810645370210868579467922156761907200 as intpart 535329980551241769028810645350811235952111967790251900928  diafora 7363426467434402373115313495890430212531452887468062277632 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2313719906452035885730882848.6419231891632080078125 ^2 ::== 5353299805512417690288106453702109276090489580273270784 as intpart 5353299805512417690288106450731648081923256424071168000  diafora 7893403148180131724453836034790510010546950086533455020032 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 57842997661300897143272071216.0480804443359375 ^2 ::== 3345812378445261056430066533563818646421379909665834401792 as intpart 3345812378445261056430066533558256378725333000833011286016  diafora 4552944069540383085714057607682985523105414209911243407360 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 81876142686456790566484014986.6091156005859375 ^2 ::== 6703702741213031793794336618385169167316589724102905823232 as intpart 6703702741213031793794336618285425533643465129414598066176  diafora 1195053706772612348349787522955816368187282081329656627200 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

10 25 |35 15| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 35 ::== 225678755656732689775546404035464046782234976286974935040
            ----->  | *2 451357511313465379551092808070928093564469952573949870080
            ----->  /2 112839377828366344887773202017732023391117488143487467520
                 --> 56419688914183172443886601008866011695558744071743733760
                 --> 28209844457091586221943300504433005847779372035871866880
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2037236030190850280959636385380625135044965476926106894336 45135751131346537955109280807.09281158447265625
i insert 127327251886928142559977274069363164992408959932952477696 11283937782836634488777320201.7732028961181640625
i insert 0 0
i insert 1273272518869281425599772740467952807537088809075212288 1128393778283663448877732020.1773202419281005859375
i insert 795795324293300890999857963018149325109162360064534642688 28209844457091586221943300504.43300628662109375
CDIS Start 
section_temp 0
section h inf
225678755656732689775546404035464046782234976286974935040 / 12 ::== 18806562971394390814628867002955336444791834212307042304
            ----->  | *2 37613125942788781629257734005910672889583668424614084608
            ----->  /2 9403281485697195407314433501477668222395917106153521152
                 --> 4701640742848597703657216750738834111197958553076760576
                 --> 2350820371424298851828608375369417055598979276538380288
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1414747243188090472888636378673856543805043962274534916096 37613125942788781629257734005.91068267822265625
i insert 88421702699255654555539773662414398693805400170950557696 9403281485697195407314433501.4776706695556640625
i insert 0 0
i insert 884217026992556545555397736436078350865252166553042944 940328148569719540731443350.14776706695556640625
i insert 552635641870347840972123585413598215529997817120932495360 23508203714242988518286083753.69417572021484375
section_temp 0
section h inf
18806562971394390814628867002955336444791834212307042304 / 3 ::== 6268854323798130271542955667651779208461151643239448576
            ----->  | *2 12537708647596260543085911335303558416922303286478897152
            ----->  /2 3134427161899065135771477833825889604230575821619724288
                 --> 1567213580949532567885738916912944802115287910809862144
                 --> 783606790474766283942869458456472401057643955404931072
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 157194138132010052543181819852650739682426616794002227200 12537708647596260543085911335.3035564422607421875
i insert 982463363325062828394886374110411329974366440886028468224 31344271618990651357714778338.258892059326171875
i insert 0 0
i insert 9824633633250628283948863736089030033183712491360747520 3134427161899065135771477833.825889110565185546875
i insert 6140396020781642677468039838190071152350177022152133312512 78360679047476628394286945845.6472320556640625
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 15 ::== 526583763199042942809608276082749429898904323683887611904
            ----->  | *2 1053167526398085885619216552165498859797808647367775223808
            ----->  /2 263291881599521471404804138041374714949452161841943805952
                 --> 131645940799760735702402069020687357474726080920971902976
                 --> 65822970399880367851201034510343678737363040460485951488
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 110916183865946293074469092079605008805695456367146434560 10531675263980858856192165521.654987335205078125
i insert 693226149162164331715431825576518891311757628682442637312 26329188159952147140480413804.137470245361328125
i insert 0 0
i insert 6932261491621643317154318253658854223559912157079404544 2632918815995214714048041380.41374683380126953125
i insert 4332663432263527073221448909853243391819406014401141014528 65822970399880367851201034510.3436737060546875
section_temp 0
section h inf
526583763199042942809608276082749429898904323683887611904 / 246 ::== 2140584403248142043941497057246948782049243112799207424
            ----->  | *2 4281168806496284087882994114493897564098486225598414848
            ----->  /2 1070292201624071021970748528623474391024621556399603712
                 --> 535146100812035510985374264311737195512310778199801856
                 --> 267573050406017755492687132155868597756155389099900928
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1832840634971681754816397185678760688101226477173153464320 42811688064962840878829941144.9389801025390625
i insert 114552539685730109676024824104922543006326654823322091520 10702922016240710219707485286.234745025634765625
i insert 0 0
i insert 1145525396857301096760248239764874799398377902361804800 1070292201624071021970748528.62347447872161865234375
i insert 715953373035813185475155150655765879622442144036827430912 26757305040601775549268713215.58686065673828125
removals 
reporing rt 4
section_temp 0
section h inf
225678755656732689775546404035464046782234976286974935040 - 2140584403248142043941497057246948782049243112799207424 ::== 223538171253484547731604906978217100951664784967703986176
            ----->  | *2 447076342506969095463209813956434201903329569935407972352
            ----->  /2 111769085626742273865802453489108550475832392483851993088
                 --> 55884542813371136932901226744554275237916196241925996544
                 --> 27942271406685568466450613372277137618958098120962998272
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1998772560294087416704989421533182976661844108422361907200 44707634250696909546320981395.6434173583984375
i insert 124923285018380463544061838829058571664415510860153225216 11176908562674227386580245348.910854339599609375
i insert 0 0
i insert 1249232850183804635440618386502280320838537961233448960 1117690856267422738658024534.8910853862762451171875
i insert 780770531364877897150386492793385094765187017359811936256 27942271406685568466450613372.277133941650390625
section_temp 0
section h inf
18806562971394390814628867002955336444791834212307042304 - 2140584403248142043941497057246948782049243112799207424 ::== 16665978568146248770687369945708388253038401458213486592
            ----->  | *2 33331957136292497541374739891416776506076802916426973184
            ----->  /2 8332989284073124385343684972854194126519200729106743296
                 --> 4166494642036562192671842486427097063259600364553371648
                 --> 2083247321018281096335921243213548531629800182276685824
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1111019366535640353519061987931632840374376759388928999424 33331957136292497541374739891.416767120361328125
i insert 6943871040847752209494137424656035224602207794649804832768 83329892840731243853436849728.5419158935546875
i insert 0 0
i insert 69438710408477522094941374233227571795618335374322958336 8332989284073124385343684972.85419178009033203125
i insert 433991940052984513093383589041002201537637987165612802048 20832473210182810963359212432.135478973388671875
section_temp 0
section h inf
6268854323798130271542955667651779208461151643239448576 - 2140584403248142043941497057246948782049243112799207424 ::== 4128269920549988227601458610404830426411908530440241152
            ----->  | *2 8256539841099976455202917220809660852823817060880482304
            ----->  /2 2064134960274994113800729305202415213205954265220120576
                 --> 1032067480137497056900364652601207606602977132610060288
                 --> 516033740068748528450182326300603803301488566305030144
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 6817045014767122445209967083751533438204382793419129356288 82565398410999764552029172208.096588134765625
i insert 426065313422945152825622942734470839887773924588695584768 20641349602749941138007293052.02414703369140625
i insert 0 0
i insert 4260653134229451528256229426519054187589974716797943808 2064134960274994113800729305.2024147510528564453125
i insert 2662908208893407205160143392090442522624995850936377147392 51603374006874852845018232630.06037139892578125
section_temp 0
section h inf
526583763199042942809608276082749429898904323683887611904 - 2140584403248142043941497057246948782049243112799207424 ::== 524443178795794800765666779025502484068334132364616663040
            ----->  | *2 1048886357591589601531333558051004968136668264729233326080
            ----->  /2 262221589397897400382833389512751242034167066182308331520
                 --> 131110794698948700191416694756375621017083533091154165760
                 --> 65555397349474350095708347378187810508541766545577082880
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 110016259114175197332854241064493839031299495726663335936 10488863575915896015313335580.510051727294921875
i insert 687601619463594983330339006705530838813193316344541478912 26222158939789740038283338951.275127410888671875
i insert 0 0
i insert 6876016194635949833303390066530864939456218482916458496 2622215893978974003828333895.12751293182373046875
i insert 4297510121647468645814618791975122991855812971738163052544 65555397349474350095708347378.1878204345703125
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 45135751131346537955109280807.09281158447265625 ^2 ::== 2037236030190850280959636385389003293206349760764114370560 as intpart 2037236030190850280959636385380625135044965476926106894336  diafora 5861520417794793861184487755860616464554326830160854122496 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11283937782836634488777320201.7732028961181640625 ^2 ::== 127327251886928142559977274086812705825396860047757148160 as intpart 127327251886928142559977274069363164992408959932952477696  diafora 7771429196098715999584146867171878680169940456375559651328 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1128393778283663448877732020.1773202419281005859375 ^2 ::== 1273272518869281425599772740868126881165225492865875968 as intpart 1273272518869281425599772740467952807537088809075212288  diafora 7897483175466774860718524368500773407869525975591773274112 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 28209844457091586221943300504.43300628662109375 ^2 ::== 795795324293300890999857963042579298071934786426997047296 as intpart 795795324293300890999857963018149325109162360064534642688  diafora 7102961123692343251144266178223093030068767206165660565504 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37613125942788781629257734005.91068267822265625 ^2 ::== 1414747243188090472888636378742363801035238316518137659392 as intpart 1414747243188090472888636378673856543805043962274534916096  diafora 6484009204797553669255487762567384904678520892983779262464 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9403281485697195407314433501.4776706695556640625 ^2 ::== 88421702699255654555539773671397737564702394782383603712 as intpart 88421702699255654555539773662414398693805400170950557696  diafora 7810334745286388487588584367578826974231895729173040201728 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 940328148569719540731443350.14776706695556640625 ^2 ::== 884217026992556545555397736713977369744065844236779520 as intpart 884217026992556545555397736436078350865252166553042944  diafora 7897872230958651585598568743504806018572647282129919541248 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 23508203714242988518286083753.69417572021484375 ^2 ::== 552635641870347840972123585446235812555725138693445386240 as intpart 552635641870347840972123585413598215529997817120932495360  diafora 7346120806115296301172000555827643761858613119537645617152 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12537708647596260543085911335.3035564422607421875 ^2 ::== 157194138132010052543181819860262533321504883128150261760 as intpart 157194138132010052543181819852650739682426616794002227200  diafora 7741562309853634089600942321388591124369388730993090756608 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 31344271618990651357714778338.258892059326171875 ^2 ::== 982463363325062828394886374126640856871237933899165204480 as intpart 982463363325062828394886374110411329974366440886028468224  diafora 6916293084660581313749237767130830420740653318029579386880 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3134427161899065135771477833.825889110565185546875 ^2 ::== 9824633633250628283948863741266408332594055195509391360 as intpart 9824633633250628283948863736089030033183712491360747520  diafora 7888931814352393513860175277505152967425484776363209523200 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 78360679047476628394286945845.6472320556640625 ^2 ::== 6140396020781642677468039838291506073244942483055855009792 as intpart 6140396020781642677468039838190071152350177022152133312512  diafora 1758360427204001464676084303051170749480570188592121380864 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10531675263980858856192165521.654987335205078125 ^2 ::== 110916183865946293074469092093401251369671673030312460288 as intpart 110916183865946293074469092079605008805695456367146434560  diafora 7787840264119697849069655049161636590793596850719814582272 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 26329188159952147140480413804.137470245361328125 ^2 ::== 693226149162164331715431825583757863561746302266259800064 as intpart 693226149162164331715431825576518891311757628682442637312  diafora 7205530298823479810428692315664723539424035663462075990016 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2632918815995214714048041380.41374683380126953125 ^2 ::== 6932261491621643317154318255837578210604479564394528768 as intpart 6932261491621643317154318253658854223559912157079404544  diafora 7891824186494022498826969822987582787877030740756688535552 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 65822970399880367851201034510.3436737060546875 ^2 ::== 4332663432263527073221448909898486231692663896635344945152 as intpart 4332663432263527073221448909853243391819406014401141014528  diafora 3566093015722117068922675231387998510011341196343113678848 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 42811688064962840878829941144.9389801025390625 ^2 ::== 1832840634971681754816397185759159393040332679465106669568 as intpart 1832840634971681754816397185678760688101226477173153464320  diafora 6065915813013962387327726955562480911498065829913807552512 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10702922016240710219707485286.234745025634765625 ^2 ::== 114552539685730109676024824109947462065020792466569166848 as intpart 114552539685730109676024824104922543006326654823322091520  diafora 7784203908299914032468099317136318962145635994870734651392 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1070292201624071021970748528.62347447872161865234375 ^2 ::== 1145525396857301096760248241099474449464422920641052672 as intpart 1145525396857301096760248239764874799398377902361804800  diafora 7897610922588786841047363893001476962689105503742976851968 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 26757305040601775549268713215.58686065673828125 ^2 ::== 715953373035813185475155150687171505680118432565991309312 as intpart 715953373035813185475155150655765879622442144036827430912  diafora 7182803074949830956668968990585476551113351148107691196416 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 44707634250696909546320981395.6434173583984375 ^2 ::== 1998772560294087416704989421590714245260029792560160440320 as intpart 1998772560294087416704989421533182976661844108422361907200  diafora 5899983887691556725439134719708058925168903102321892786176 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11176908562674227386580245348.910854339599609375 ^2 ::== 124923285018380463544061838849419640328751862035010027520 as intpart 124923285018380463544061838829058571664415510860153225216  diafora 7773833162967263678600062302412183877960843712762946256896 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1117690856267422738658024534.8910853862762451171875 ^2 ::== 1249232850183804635440618388494196344257937584479535104 as intpart 1249232850183804635440618386502280320838537961233448960  diafora 7897507215135460337508683522854739685557004096702584455168 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 27942271406685568466450613372.277133941650390625 ^2 ::== 780770531364877897150386492808872643440270031716972756992 as intpart 780770531364877897150386492793385094765187017359811936256  diafora 7117985916620766244993737648447857411528470000699030110208 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 33331957136292497541374739891.416767120361328125 ^2 ::== 1111019366535640353519061987959416222445032715253379497984 as intpart 1111019366535640353519061987931632840374376759388928999424  diafora 6787737081450003788625062153309609363687825355012619370496 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 83329892840731243853436849728.5419158935546875 ^2 ::== 6943871040847752209494137424746351654733977511033753829376 as intpart 6943871040847752209494137424656035224602207794649804832768  diafora 954885407137891932649986716585206677228539416094449860608 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 8332989284073124385343684972.85419178009033203125 ^2 ::== 69438710408477522094941374247463513902814544703336218624 as intpart 69438710408477522094941374233227571795618335374322958336  diafora 7829317737577166620049182767008013801130082793969667801088 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 20832473210182810963359212432.135478973388671875 ^2 ::== 433991940052984513093383589046646978420873594439609614336 as intpart 433991940052984513093383589041002201537637987165612802048  diafora 7464764507932659629050740552200239851408836675407288729600 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 82565398410999764552029172208.096588134765625 ^2 ::== 6817045014767122445209967083767482796542558596121027936256 as intpart 6817045014767122445209967083751533438204382793419129356288  diafora 1081711433218521696934157057489708463626364417325125337088 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 20641349602749941138007293052.02414703369140625 ^2 ::== 426065313422945152825622942735467674783909912257564246016 as intpart 426065313422945152825622942734470839887773924588695584768  diafora 7472691134562698989318501198506770759711518382498265432064 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2064134960274994113800729305.2024147510528564453125 ^2 ::== 4260653134229451528256229427354676936733758437361451008 as intpart 4260653134229451528256229426519054187589974716797943808  diafora 7894495794851414690615867911814723334046904971600913760256 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 51603374006874852845018232630.06037139892578125 ^2 ::== 2662908208893407205160143392096673326299289649702812778496 as intpart 2662908208893407205160143392090442522624995850936377147392  diafora 5235848239092236936983980749150799379205751359807877545984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10488863575915896015313335580.510051727294921875 ^2 ::== 110016259114175197332854241075193569224060291587466330112 as intpart 110016259114175197332854241064493839031299495726663335936  diafora 7788740188871468944811269900176748629483425659375017000960 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 26222158939789740038283338951.275127410888671875 ^2 ::== 687601619463594983330339006719959670701748819201953366016 as intpart 687601619463594983330339006705530838813193316344541478912  diafora 7211154828522049158813785134535710911901826442571066376192 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2622215893978974003828333895.12751293182373046875 ^2 ::== 6876016194635949833303390067199598076503768224216645632 as intpart 6876016194635949833303390066530864939456218482916458496  diafora 7891880431791008192310820751174710770077584710126383661056 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 65555397349474350095708347378.1878204345703125 ^2 ::== 4297510121647468645814618791999748206338453160712340504576 as intpart 4297510121647468645814618791975122991855812971738163052544  diafora 3601246326338175496329505349266118909974934239006091640832 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 83329892840731243853436849728.5419158935546875 ^2 ::== 6943871040847752209494137424746351654733977511033753829376 as intpart 6943871040847752209494137424656035224602207794649804832768  diafora 954885407137891932649986716585206677228539416094449860608 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

10 |25| 35 |15| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 25 ::== 315950257919425765685764965649649665495128966801764909056
            ----->  | *2 631900515838851531371529931299299330990257933603529818112
            ----->  /2 157975128959712882842882482824824832747564483400882454528
                 --> 78987564479856441421441241412412416373782241700441227264
                 --> 39493782239928220710720620706206208186891120850220613632
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3992982619174066550680887315244921214700937201730273148928 63190051583885153137152993129.9299163818359375
i insert 249561413698379159417555457194908794623833354695067303936 15797512895971288284288248282.482479095458984375
i insert 0 0
i insert 2495614136983791594175554571317187626734814241115602944 1579751289597128828428824828.2482478618621826171875
i insert 1559758835614869746359721607547167524340920596014076788736 39493782239928220710720620706.206195831298828125
CDIS Start 
section_temp 0
section h inf
315950257919425765685764965649649665495128966801764909056 / 12 ::== 26329188159952147140480413804137470550471919610265337856
            ----->  | *2 52658376319904294280960827608274941100943839220530675712
            ----->  /2 13164594079976073570240206902068735275235959805132668928
                 --> 6582297039988036785120103451034367637617979902566334464
                 --> 3291148519994018392560051725517183818808989951283167232
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2772904596648657326861727302306075565247030514729770549248 52658376319904294280960827608.27494049072265625
i insert 173306537290541082928857956394129722827939407170610659328 13164594079976073570240206902.0687351226806640625
i insert 0 0
i insert 1733065372905410829288579563414713555889978039269851136 1316459407997607357024020690.206873416900634765625
i insert 1083165858065881768305362227463310847954851503600285253632 32911485199940183925600517255.17183685302734375
section_temp 0
section h inf
26329188159952147140480413804137470550471919610265337856 / 3 ::== 8776396053317382380160137934712490183490639870088445952
            ----->  | *2 17552792106634764760320275869424980366981279740176891904
            ----->  /2 4388198026658691190080068967356245091745319935044222976
                 --> 2194099013329345595040034483678122545872659967522111488
                 --> 1097049506664672797520017241839061272936329983761055744
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 308100510738739702984636366911195449777556168916244365312 17552792106634764760320275869.4249820709228515625
i insert 1925628192117123143653977293238853613302013186735243001856 43881980266586911900800689673.5624542236328125
i insert 0 0
i insert 19256281921171231436539772929755616779376090302545657856 4388198026658691190080068967.356245517730712890625
i insert 120351762007320196478373580821943095487931553512274526208 10970495066646727975200172418.390613555908203125
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 15 ::== 526583763199042942809608276082749429898904323683887611904
            ----->  | *2 1053167526398085885619216552165498859797808647367775223808
            ----->  /2 263291881599521471404804138041374714949452161841943805952
                 --> 131645940799760735702402069020687357474726080920971902976
                 --> 65822970399880367851201034510343678737363040460485951488
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 110916183865946293074469092079605008805695456367146434560 10531675263980858856192165521.654987335205078125
i insert 693226149162164331715431825576518891311757628682442637312 26329188159952147140480413804.137470245361328125
i insert 0 0
i insert 6932261491621643317154318253658854223559912157079404544 2632918815995214714048041380.41374683380126953125
i insert 4332663432263527073221448909853243391819406014401141014528 65822970399880367851201034510.3436737060546875
section_temp 0
section h inf
526583763199042942809608276082749429898904323683887611904 / 246 ::== 2140584403248142043941497057246948782049243112799207424
            ----->  | *2 4281168806496284087882994114493897564098486225598414848
            ----->  /2 1070292201624071021970748528623474391024621556399603712
                 --> 535146100812035510985374264311737195512310778199801856
                 --> 267573050406017755492687132155868597756155389099900928
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1832840634971681754816397185678760688101226477173153464320 42811688064962840878829941144.9389801025390625
i insert 114552539685730109676024824104922543006326654823322091520 10702922016240710219707485286.234745025634765625
i insert 0 0
i insert 1145525396857301096760248239764874799398377902361804800 1070292201624071021970748528.62347447872161865234375
i insert 715953373035813185475155150655765879622442144036827430912 26757305040601775549268713215.58686065673828125
removals 
reporing rt 4
section_temp 0
section h inf
315950257919425765685764965649649665495128966801764909056 - 2140584403248142043941497057246948782049243112799207424 ::== 313809673516177623641823468592402719664558775482493960192
            ----->  | *2 627619347032355247283646937184805439329117550964987920384
            ----->  /2 156904836758088811820911734296201359832279387741246980096
                 --> 78452418379044405910455867148100679916139693870623490048
                 --> 39226209189522202955227933574050339958069846935311745024
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3939060447693199673454188910097091839797650722590604394496 62761934703235524728364693718.48053741455078125
i insert 246191277980824979590886806865377742890302349932048154624 15690483675808881182091173429.6201343536376953125
i insert 0 0
i insert 2461912779808249795908868065829490584153190057772056576 1569048367580888118209117342.9620134830474853515625
i insert 1538695487380156122443042543026289649626469736017156898816 39226209189522202955227933574.050334930419921875
section_temp 0
section h inf
26329188159952147140480413804137470550471919610265337856 - 2140584403248142043941497057246948782049243112799207424 ::== 24188603756704005096538916746890522358718486856171782144
            ----->  | *2 48377207513408010193077833493781044717436973712343564288
            ----->  /2 12094301878352002548269458373445261179359243428085891072
                 --> 6047150939176001274134729186722630589679621714042945536
                 --> 3023575469588000637067364593361315294839810857021472768
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2340354206795340432725057566420300667889287337280096174080 48377207513408010193077833493.78104400634765625
i insert 146272137924708777045316097895221650346038426055221444608 12094301878352002548269458373.4452610015869140625
i insert 0 0
i insert 1462721379247087770453160978226558284388222397122084864 1209430187835200254826945837.3445260524749755859375
i insert 914200862029429856533225611875371026370316808338702073856 30235754695880006370673645933.61315155029296875
section_temp 0
section h inf
8776396053317382380160137934712490183490639870088445952 - 2140584403248142043941497057246948782049243112799207424 ::== 6635811650069240336218640877465541991737207115994890240
            ----->  | *2 13271623300138480672437281754931083983474414231989780480
            ----->  /2 3317905825034620168109320438732770995868603557997445120
                 --> 1658952912517310084054660219366385497934301778998722560
                 --> 829476456258655042027330109683192748967150889499361280
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 176135985020778616637855769526741221429285721597041180672 13271623300138480672437281754.93108367919921875
i insert 1100849906379866353986598559674848859865449483134497193984 33179058250346201681093204387.327709197998046875
i insert 0 0
i insert 11008499063798663539865985592103419982665042090543546368 3317905825034620168109320438.7327709197998046875
i insert 6880311914874164712416240998050753212525618506368913768448 82947645625865504202733010968.31927490234375
section_temp 0
section h inf
526583763199042942809608276082749429898904323683887611904 - 2140584403248142043941497057246948782049243112799207424 ::== 524443178795794800765666779025502484068334132364616663040
            ----->  | *2 1048886357591589601531333558051004968136668264729233326080
            ----->  /2 262221589397897400382833389512751242034167066182308331520
                 --> 131110794698948700191416694756375621017083533091154165760
                 --> 65555397349474350095708347378187810508541766545577082880
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 110016259114175197332854241064493839031299495726663335936 10488863575915896015313335580.510051727294921875
i insert 687601619463594983330339006705530838813193316344541478912 26222158939789740038283338951.275127410888671875
i insert 0 0
i insert 6876016194635949833303390066530864939456218482916458496 2622215893978974003828333895.12751293182373046875
i insert 4297510121647468645814618791975122991855812971738163052544 65555397349474350095708347378.1878204345703125
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 63190051583885153137152993129.9299163818359375 ^2 ::== 3992982619174066550680887315362443915940224340376397283328 as intpart 3992982619174066550680887315244921214700937201730273148928  diafora 3905773828811577591463236825996320687129810009013981544448 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15797512895971288284288248282.482479095458984375 ^2 ::== 249561413698379159417555457210152744746264021273524830208 as intpart 249561413698379159417555457194908794623833354695067303936  diafora 7649195034287264982726568684046332918312254541263378841600 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1579751289597128828428824828.2482478618621826171875 ^2 ::== 2495614136983791594175554572101527246762064690775326720 as intpart 2495614136983791594175554571317187626734814241115602944  diafora 7896260833848660350549948586669924185594114220282227982336 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 39493782239928220710720620706.206195831298828125 ^2 ::== 1559758835614869746359721607563454475214223783913012068352 as intpart 1559758835614869746359721607547167524340920596014076788736  diafora 6338997612370774395784402533694073773026916807415590551552 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 52658376319904294280960827608.27494049072265625 ^2 ::== 2772904596648657326861727302335031454246985209065039200256 as intpart 2772904596648657326861727302306075565247030514729770549248  diafora 5125851851336986815282396838935166034352261792357190467584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 13164594079976073570240206902.0687351226806640625 ^2 ::== 173306537290541082928857956395939465890436575566564950016 as intpart 173306537290541082928857956394129722827939407170610659328  diafora 7725449910695103059215266184847111706766159516609122664448 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1316459407997607357024020690.206873416900634765625 ^2 ::== 1733065372905410829288579563959394552651119891098632192 as intpart 1733065372905410829288579563414713555889978039269851136  diafora 7897023382612738731314835561677827425573772996904656830464 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 32911485199940183925600517255.17183685302734375 ^2 ::== 1083165858065881768305362227474621557923165974158836236288 as intpart 1083165858065881768305362227463310847954851503600285253632  diafora 6815590589919762373838761913777931204991623158972616278016 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 17552792106634764760320275869.4249820709228515625 ^2 ::== 308100510738739702984636366926114689980624718689808154624 as intpart 308100510738739702984636366911195449777556168916244365312  diafora 7590655937246904439159487774330046716505714082528142295040 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 43881980266586911900800689673.5624542236328125 ^2 ::== 1925628192117123143653977293288216774599972628854139256832 as intpart 1925628192117123143653977293238853613302013186735243001856  diafora 5973128255868520998490146848002387986297279120351718014976 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 4388198026658691190080068967.356245517730712890625 ^2 ::== 19256281921171231436539772932882168123789044918113009664 as intpart 19256281921171231436539772929755616779376090302545657856  diafora 7879500166064472910707584368311486100879078288525545701376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10970495066646727975200172418.390613555908203125 ^2 ::== 120351762007320196478373580830513548412498289303383703552 as intpart 120351762007320196478373580821943095487931553512274526208  diafora 7778404685978323945665750560419298352995633301746039652352 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10531675263980858856192165521.654987335205078125 ^2 ::== 110916183865946293074469092093401251369671673030312460288 as intpart 110916183865946293074469092079605008805695456367146434560  diafora 7787840264119697849069655049161636590793596850719814582272 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 26329188159952147140480413804.137470245361328125 ^2 ::== 693226149162164331715431825583757863561746302266259800064 as intpart 693226149162164331715431825576518891311757628682442637312  diafora 7205530298823479810428692315664723539424035663462075990016 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2632918815995214714048041380.41374683380126953125 ^2 ::== 6932261491621643317154318255837578210604479564394528768 as intpart 6932261491621643317154318253658854223559912157079404544  diafora 7891824186494022498826969822987582787877030740756688535552 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 65822970399880367851201034510.3436737060546875 ^2 ::== 4332663432263527073221448909898486231692663896635344945152 as intpart 4332663432263527073221448909853243391819406014401141014528  diafora 3566093015722117068922675231387998510011341196343113678848 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 42811688064962840878829941144.9389801025390625 ^2 ::== 1832840634971681754816397185759159393040332679465106669568 as intpart 1832840634971681754816397185678760688101226477173153464320  diafora 6065915813013962387327726955562480911498065829913807552512 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10702922016240710219707485286.234745025634765625 ^2 ::== 114552539685730109676024824109947462065020792466569166848 as intpart 114552539685730109676024824104922543006326654823322091520  diafora 7784203908299914032468099317136318962145635994870734651392 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1070292201624071021970748528.62347447872161865234375 ^2 ::== 1145525396857301096760248241099474449464422920641052672 as intpart 1145525396857301096760248239764874799398377902361804800  diafora 7897610922588786841047363893001476962689105503742976851968 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 26757305040601775549268713215.58686065673828125 ^2 ::== 715953373035813185475155150687171505680118432565991309312 as intpart 715953373035813185475155150655765879622442144036827430912  diafora 7182803074949830956668968990585476551113351148107691196416 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 62761934703235524728364693718.48053741455078125 ^2 ::== 3939060447693199673454188910157410589104412837947981692928 as intpart 3939060447693199673454188910097091839797650722590604394496  diafora 3959696000292444468689935231144150062033096488153650298880 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15690483675808881182091173429.6201343536376953125 ^2 ::== 246191277980824979590886806884838161819025802371748855808 as intpart 246191277980824979590886806865377742890302349932048154624  diafora 7652565170004819162553237334375864045603649271940721410048 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1569048367580888118209117342.9620134830474853515625 ^2 ::== 2461912779808249795908868068848382007785492860463218688 as intpart 2461912779808249795908868065829490584153190057772056576  diafora 7896294535205835892348215273175411908019415689889914552320 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 39226209189522202955227933574.050334930419921875 ^2 ::== 1538695487380156122443042543030238454700513470387687784448 as intpart 1538695487380156122443042543026289649626469736017156898816  diafora 6360060960605488019701081598214952856667187282041685147648 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 48377207513408010193077833493.78104400634765625 ^2 ::== 2340354206795340432725057566495870016410487999676391882752 as intpart 2340354206795340432725057566420300667889287337280096174080  diafora 5558402241190303709419066574820941233941459873464158519296 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12094301878352002548269458373.4452610015869140625 ^2 ::== 146272137924708777045316097905991876025655499979774492672 as intpart 146272137924708777045316097895221650346038426055221444608  diafora 7752484310060935365098808043346020005921651675467482136576 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1209430187835200254826945837.3445260524749755859375 ^2 ::== 1462721379247087770453160979059918724838806378275405824 as intpart 1462721379247087770453160978226558284388222397122084864  diafora 7897293726606397054373670980263015340594879936553604349952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 30235754695880006370673645933.61315155029296875 ^2 ::== 914200862029429856533225611912449234605079840612881006592 as intpart 914200862029429856533225611875371026370316808338702073856  diafora 6984555585956214285610898529365871328807612757891493134336 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 13271623300138480672437281754.93108367919921875 ^2 ::== 176135985020778616637855769551455197512337928422655262720 as intpart 176135985020778616637855769526741221429285721597041180672  diafora 7722620462964865525506268371714500793738257078018698641408 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 33179058250346201681093204387.327709197998046875 ^2 ::== 1100849906379866353986598559696595017508677432729111887872 as intpart 1100849906379866353986598559674848859865449483134497193984  diafora 6797906541605777788157525581566392588618115372123816984576 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3317905825034620168109320438.7327709197998046875 ^2 ::== 11008499063798663539865985596965949844521120526415953920 as intpart 11008499063798663539865985592103419982665042090543546368  diafora 7887747948921845478604258155649138706160490104961858797568 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 82947645625865504202733010968.31927490234375 ^2 ::== 6880311914874164712416240998103718670534574639771140751360 as intpart 6880311914874164712416240998050753212525618506368913768448  diafora 1018444533111479429727883143190488689305128704375340924928 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10488863575915896015313335580.510051727294921875 ^2 ::== 110016259114175197332854241075193569224060291587466330112 as intpart 110016259114175197332854241064493839031299495726663335936  diafora 7788740188871468944811269900176748629483425659375017000960 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 26222158939789740038283338951.275127410888671875 ^2 ::== 687601619463594983330339006719959670701748819201953366016 as intpart 687601619463594983330339006705530838813193316344541478912  diafora 7211154828522049158813785134535710911901826442571066376192 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2622215893978974003828333895.12751293182373046875 ^2 ::== 6876016194635949833303390067199598076503768224216645632 as intpart 6876016194635949833303390066530864939456218482916458496  diafora 7891880431791008192310820751174710770077584710126383661056 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 65555397349474350095708347378.1878204345703125 ^2 ::== 4297510121647468645814618791999748206338453160712340504576 as intpart 4297510121647468645814618791975122991855812971738163052544  diafora 3601246326338175496329505349266118909974934239006091640832 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 82947645625865504202733010968.31927490234375 ^2 ::== 6880311914874164712416240998103718670534574639771140751360 as intpart 6880311914874164712416240998050753212525618506368913768448  diafora 1018444533111479429727883143190488689305128704375340924928 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

10 26 |36 16| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 36 ::== 219409901332934559504003448367812287643831376839727644672
            ----->  | *2 438819802665869119008006896735624575287662753679455289344
            ----->  /2 109704950666467279752001724183906143821915688419863822336
                 --> 54852475333233639876000862091953071910957844209931911168
                 --> 27426237666616819938000431045976535955478922104965955584
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1925628192117123143653977293238853613302013186735243001856 43881980266586911900800689673.56246185302734375
i insert 120351762007320196478373580821943095487931553512274526208 10970495066646727975200172418.3906154632568359375
i insert 0 0
i insert 1203517620073201964783735806464151777346175363192979456 1097049506664672797520017241.8390614986419677734375
i insert 752198512545751227989834880137144309020640346494554079232 27426237666616819938000431045.97653961181640625
CDIS Start 
section_temp 0
section h inf
219409901332934559504003448367812287643831376839727644672 / 12 ::== 18284158444411213292000287363984358090713695214918172672
            ----->  | *2 36568316888822426584000574727968716181427390429836345344
            ----->  /2 9142079222205606646000143681992179045356847607459086336
                 --> 4571039611102803323000071840996089522678423803729543168
                 --> 2285519805551401661500035920498044761339211901864771584
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1337241800081335516426373120268191051144385697101920600064 36568316888822426584000574727.96871185302734375
i insert 83577612505083469776648320003048821227379360900755488768 9142079222205606646000143681.9921779632568359375
i insert 0 0
i insert 835776125050834697766483199847646658704917697346404352 914207922220560664600014368.19921779632568359375
i insert 522360078156771686104052000087620692237912868513132838912 22855198055514016615000359204.98044586181640625
section_temp 0
section h inf
18284158444411213292000287363984358090713695214918172672 / 3 ::== 6094719481470404430666762454661452500139294952070840320
            ----->  | *2 12189438962940808861333524909322905000278589904141680640
            ----->  /2 3047359740735202215333381227330726250069647476035420160
                 --> 1523679870367601107666690613665363125034823738017710080
                 --> 761839935183800553833345306832681562517411869008855040
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 148582422231259501825152568918687894571598410789102288896 12189438962940808861333524909.322906494140625
i insert 928640138945371886407203555772272998660039065738839851008 30473597407352022153333812273.3072662353515625
i insert 0 0
i insert 9286401389453718864072035555894313600885664624240754688 3047359740735202215333381227.33072662353515625
i insert 5804000868408574290045022223652889724462809054884795514880 76183993518380055383334530683.26816558837890625
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 16 ::== 493672277999102758884007758827577618864421700671515918336
            ----->  | *2 987344555998205517768015517655155237728843401343031836672
            ----->  /2 246836138999551379442003879413788809432210850335757959168
                 --> 123418069499775689721001939706894404716105425167878979584
                 --> 61709034749887844860500969853447202358052712583939489792
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929359147482600461824531431520374691698049024 9873445559982055177680155176.55154895782470703125
i insert 609280795162058494671766252935770494395288981705618096128 24683613899955137944200387941.378871917724609375
i insert 0 0
i insert 6092807951620584946717662528864033214470023418231128064 2468361389995513794420038794.1378872394561767578125
i insert 3808004969762865591698539080910274736196136594918468485120 61709034749887844860500969853.44718170166015625
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 / 246 ::== 2006797878045133166195153491169014667638606155344773120
            ----->  | *2 4013595756090266332390306982338029335277212310689546240
            ----->  /2 1003398939022566583097576745584507333819303077672386560
                 --> 501699469511283291548788372792253666909651538836193280
                 --> 250849734755641645774394186396126833454825769418096640
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1610895089330579667319099089015609283019711540504393940992 40135957560902663323903069823.38031005859375
i insert 100680943083161229207443693048424585960791358406498713600 10033989390225665830975767455.8450775146484375
i insert 0 0
i insert 1006809430831612292074436929480846874060737108349288448 1003398939022566583097576745.5845077037811279296875
i insert 629255894269757682546523081627908586170984225719294361600 25084973475564164577439418639.61269378662109375
removals 
reporing rt 4
section_temp 0
section h inf
219409901332934559504003448367812287643831376839727644672 - 2006797878045133166195153491169014667638606155344773120 ::== 217403103454889426337808294876643266482938856738620702720
            ----->  | *2 434806206909778852675616589753286532965877713477241405440
            ----->  /2 108701551727444713168904147438321633241469428369310351360
                 --> 54350775863722356584452073719160816620734714184655175680
                 --> 27175387931861178292226036859580408310367357092327587840
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1890564375672694192895331569754732550720041816879613870080 43480620690977885267561658975.3286590576171875
i insert 118160273479543387055958223093365548543677754389773156352 10870155172744471316890414743.832164764404296875
i insert 0 0
i insert 1181602734795433870559582230281446227472526284901318656 1087015517274447131689041474.38321650028228759765625
i insert 738501709247146169099738894415060834167777846413869711360 27175387931861178292226036859.580410003662109375
section_temp 0
section h inf
18284158444411213292000287363984358090713695214918172672 - 2006797878045133166195153491169014667638606155344773120 ::== 16277360566366080125805133872815344013370899418279051264
            ----->  | *2 32554721132732160251610267745630688026741798836558102528
            ----->  /2 8138680283183040062902566936407672006685449709139525632
                 --> 4069340141591520031451283468203836003342724854569762816
                 --> 2034670070795760015725641734101918001671362427284881408
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1059809868029957907054750499406696933627544580877602258944 32554721132732160251610267745.630687713623046875
i insert 6623811675187236919092190621536016953898872704283325759488 81386802831830400629025669364.07672119140625
i insert 0 0
i insert 66238116751872369190921906208849219595569037109884878848 8138680283183040062902566936.40767192840576171875
i insert 413988229699202307443261913846001059618679544017707859968 20346700707957600157256417341.0191802978515625
section_temp 0
section h inf
6094719481470404430666762454661452500139294952070840320 - 2006797878045133166195153491169014667638606155344773120 ::== 4087921603425271264471608963492437832500688796726067200
            ----->  | *2 8175843206850542528943217926984875665001377593452134400
            ----->  /2 2043960801712635632235804481746218916250344398363033600
                 --> 1021980400856317816117902240873109458125172199181516800
                 --> 510990200428158908058951120436554729062586099590758400
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 6684441214300416315007235588838666048392872270133624569856 81758432068505425289432179269.848724365234375
i insert 417777575893776019687952224292196822492714797326326038528 20439608017126356322358044817.46218109130859375
i insert 0 0
i insert 4177775758937760196879522240060423431590663756439355392 2043960801712635632235804481.746218204498291015625
i insert 2611109849336100123049701401877329451580655053253378048000 51099020042815890805895112043.65545654296875
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 - 2006797878045133166195153491169014667638606155344773120 ::== 491665480121057625717812605336408597703529180570408976384
            ----->  | *2 983330960242115251435625210672817195407058361140817952768
            ----->  /2 245832740060528812858906302668204298851764590285204488192
                 --> 122916370030264406429453151334102149425882295142602244096
                 --> 61458185015132203214726575667051074712941147571301122048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 96693977737068044530828922805673636635152398283433836544 9833309602421152514356252106.7281665802001953125
i insert 604337360856675278317680767584626807595713033799401996288 24583274006052881285890630266.820415496826171875
i insert 0 0
i insert 6043373608566752783176807672896274657047280455470022656 2458327400605288128589063026.682041645050048828125
i insert 3777108505354220489485504797649749873919281239528539422720 61458185015132203214726575667.0510406494140625
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 43881980266586911900800689673.56246185302734375 ^2 ::== 1925628192117123143653977293288217379062882436168726609920 as intpart 1925628192117123143653977293238853613302013186735243001856  diafora 5973128255868520998490146848002387986297279120351718014976 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10970495066646727975200172418.3906154632568359375 ^2 ::== 120351762007320196478373580830513586191430152260545413120 as intpart 120351762007320196478373580821943095487931553512274526208  diafora 7778404685978323945665750560419298352995633301746039652352 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1097049506664672797520017241.8390614986419677734375 ^2 ::== 1203517620073201964783735808305135802884720486734888960 as intpart 1203517620073201964783735806464151777346175363192979456  diafora 7897552930365570940179340405434777814543218317069654163456 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 27426237666616819938000431045.97653961181640625 ^2 ::== 752198512545751227989834880190709923141171417367699259392 as intpart 752198512545751227989834880137144309020640346494554079232  diafora 7146557935439892914154289261104098046157289219735641128960 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 36568316888822426584000574727.96871185302734375 ^2 ::== 1337241800081335516426373120339039393224263780742341853184 as intpart 1337241800081335516426373120268191051144385697101920600064  diafora 6561514647904308625717751020973051001802088965470980931584 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9142079222205606646000143681.9921779632568359375 ^2 ::== 83577612505083469776648320021189962076516486296396365824 as intpart 83577612505083469776648320003048821227379360900755488768  diafora 7815178835480560672367475821238192891708708535057690656768 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 914207922220560664600014368.19921779632568359375 ^2 ::== 835776125050834697766483200211899608959248655789850624 as intpart 835776125050834697766483199847646658704917697346404352  diafora 7897920671860593307446357658041394056242354202163103662080 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 22855198055514016615000359204.98044586181640625 ^2 ::== 522360078156771686104052000132437310201892868048929423360 as intpart 522360078156771686104052000087620692237912868513132838912  diafora 7376396369828872456040072141153621360708561794059768692736 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12189438962940808861333524909.322906494140625 ^2 ::== 148582422231259501825152568926559985051212451967429246976 as intpart 148582422231259501825152568918687894571598410789102288896  diafora 7750174025754384640318971572322554158374876251783799242752 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 30473597407352022153333812273.3072662353515625 ^2 ::== 928640138945371886407203555791000015184506930798272708608 as intpart 928640138945371886407203555772272998660039065738839851008  diafora 6970116309040272255736920585468968903170708145005414842368 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3047359740735202215333381227.33072662353515625 ^2 ::== 9286401389453718864072035557909999065700778247964327936 as intpart 9286401389453718864072035555894313600885664624240754688  diafora 7889470046596190423280052105685347164397469708569356009472 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 76183993518380055383334530683.26816558837890625 ^2 ::== 5804000868408574290045022223693749603777054099046102204416 as intpart 5804000868408574290045022223652889724462809054884795514880  diafora 2094755579577069852099101917588352177367938155859459178496 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9873445559982055177680155176.55154895782470703125 ^2 ::== 97484927225929359147482600472715904700888986494563254272 as intpart 97484927225929359147482600461824531431520374691698049024  diafora 7801271520759714782996641540779417417622891664749008781312 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24683613899955137944200387941.378871917724609375 ^2 ::== 609280795162058494671766252954474390213456716982084698112 as intpart 609280795162058494671766252935770494395288981705618096128  diafora 7289475652823585647472357888305471482993321954952960016384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2468361389995513794420038794.1378872394561767578125 ^2 ::== 6092807951620584946717662529544744043805561655910203392 as intpart 6092807951620584946717662528864033214470023418231128064  diafora 7892663640034023557197406478712377947125619965033875243008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61709034749887844860500969853.44718170166015625 ^2 ::== 3808004969762865591698539080965465222176093453316742184960 as intpart 3808004969762865591698539080910274736196136594918468485120  diafora 4090751478222778550445585060330967165634610615825786208256 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 40135957560902663323903069823.38031005859375 ^2 ::== 1610895089330579667319099089046137380048075060081367973888 as intpart 1610895089330579667319099089015609283019711540504393940992  diafora 6287861358655064474825025052225632316579580766582567075840 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10033989390225665830975767455.8450775146484375 ^2 ::== 100680943083161229207443693065383586253004691255085498368 as intpart 100680943083161229207443693048424585960791358406498713600  diafora 7798075504902482912936680448192817731438206344866534785024 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1003398939022566583097576745.5845077037811279296875 ^2 ::== 1006809430831612292074436930653835779888633462332063744 as intpart 1006809430831612292074436929480846874060737108349288448  diafora 7897749638554812529852049704311760790504163432935773437952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 25084973475564164577439418639.61269378662109375 ^2 ::== 629255894269757682546523081658647414081279320344284364800 as intpart 629255894269757682546523081627908586170984225719294361600  diafora 7269500553715886459597601059613333088986171807281990074368 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 43480620690977885267561658975.3286590576171875 ^2 ::== 1890564375672694192895331569783313068253006168856136253440 as intpart 1890564375672694192895331569754732550720041816879613870080  diafora 6008192072312949949248792571486509653342160297521934499840 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10870155172744471316890414743.832164764404296875 ^2 ::== 118160273479543387055958223111457066765812885553508515840 as intpart 118160273479543387055958223093365548543677754389773156352  diafora 7780596174506100755088165918147876296618671661918738972672 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1087015517274447131689041474.38321650028228759765625 ^2 ::== 1181602734795433870559582231114570697172919373470367744 as intpart 1181602734795433870559582230281446227472526284901318656  diafora 7897574845250848708273564559010960811846796235938214182912 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 27175387931861178292226036859.580410003662109375 ^2 ::== 738501709247146169099738894446606620062665706012976087040 as intpart 738501709247146169099738894415060834167777846413869711360  diafora 7160254738738497973044385246826181445452287993902002077696 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 32554721132732160251610267745.630687713623046875 ^2 ::== 1059809868029957907054750499447760668058122141883493777408 as intpart 1059809868029957907054750499406696933627544580877602258944  diafora 6838946579955686235089373641834544514856020274380711919616 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 81386802831830400629025669364.07672119140625 ^2 ::== 6623811675187236919092190621548505157615491823658040557568 as intpart 6623811675187236919092190621536016953898872704283325759488  diafora 1274944772798407223051933519705224947931874506460928933888 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 8138680283183040062902566936.40767192840576171875 ^2 ::== 66238116751872369190921906215485041753632633867718361088 as intpart 66238116751872369190921906208849219595569037109884878848  diafora 7832518331233771772953202235032392559453649619023594258432 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 20346700707957600157256417341.0191802978515625 ^2 ::== 413988229699202307443261913846781572350968238978627534848 as intpart 413988229699202307443261913846001059618679544017707859968  diafora 7484768218286441834700862227395240464422749037154929737728 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 81758432068505425289432179269.848724365234375 ^2 ::== 6684441214300416315007235588977447105707172855502369456128 as intpart 6684441214300416315007235588838666048392872270133624569856  diafora 1214315233685227827136888552402575853437874940610630123520 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 20439608017126356322358044817.46218109130859375 ^2 ::== 417777575893776019687952224311090444106698303468898091008 as intpart 417777575893776019687952224292196822492714797326326038528  diafora 7480978872091868122456171916949045154895896139332252073984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2043960801712635632235804481.746218204498291015625 ^2 ::== 4177775758937760196879522243110905125810123050787536896 as intpart 4177775758937760196879522240060423431590663756439355392  diafora 7894578672226706381947244619001181969525270765430917562368 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 51099020042815890805895112043.65545654296875 ^2 ::== 2611109849336100123049701401944315729014046752166553583616 as intpart 2611109849336100123049701401877329451580655053253378048000  diafora 5287646598649544019094422739363912752481547061148170321920 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9833309602421152514356252106.7281665802001953125 ^2 ::== 96693977737068044530828922819994212994454597393966956544 as intpart 96693977737068044530828922805673636635152398283433836544  diafora 7802062470248576097613295218435568491869185990203791114240 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24583274006052881285890630266.820415496826171875 ^2 ::== 604337360856675278317680767624963750935111024928324845568 as intpart 604337360856675278317680767584626807595713033799401996288  diafora 7294419087128968863826443373656614565329988095544588763136 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2458327400605288128589063026.682041645050048828125 ^2 ::== 6043373608566752783176807676249638312153412337122934784 as intpart 6043373608566752783176807672896274657047280455470022656  diafora 7892713074377077389360947333568345891035927160630210985984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61458185015132203214726575667.0510406494140625 ^2 ::== 3777108505354220489485504797656023594460171357630677123072 as intpart 3777108505354220489485504797649749873919281239528539422720  diafora 4121647942631423652658619343591492027911465971215715270656 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 81758432068505425289432179269.848724365234375 ^2 ::== 6684441214300416315007235588977447105707172855502369456128 as intpart 6684441214300416315007235588838666048392872270133624569856  diafora 1214315233685227827136888552402575853437874940610630123520 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------

10 |26| 36 |16| 88874948371212256598707572195.3532257080078125  and main 7898756447985644142144124141241241901830747210744254693376
-------------------------------------------------------------------------
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 26 ::== 303798324922524774697850928509278520155439560814332215296
            ----->  | *2 607596649845049549395701857018557040310879121628664430592
            ----->  /2 151899162461262387348925464254639260077719780407166107648
                 --> 75949581230631193674462732127319630038859890203583053824
                 --> 37974790615315596837231366063659815019429945101791526912
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3691736889029277506176855875785850688734058572414757896192 60759664984504954939570185701.855712890625
i insert 230733555564329844136053492229020704920945341857315946496 15189916246126238734892546425.46392822265625
i insert 0 0
i insert 2307335555643298441360534920771215616620326559437291520 1518991624612623873489254642.546392917633056640625
i insert 1442084722277061525850334326469354164712177186765514211328 37974790615315596837231366063.659820556640625
CDIS Start 
section_temp 0
section h inf
303798324922524774697850928509278520155439560814332215296 / 12 ::== 25316527076877064558154244042439878253742124357742755840
            ----->  | *2 50633054153754129116308488084879756507484248715485511680
            ----->  /2 12658263538438532279077122021219939126871062178871377920
                 --> 6329131769219266139538561010609969563435531089435688960
                 --> 3164565884609633069769280505304984781717765544717844480
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2563706172936998268178372135945518548625143321322835673088 50633054153754129116308488084.87976837158203125
i insert 160231635808562391761148258496594909289071457582677229568 12658263538438532279077122021.2199420928955078125
i insert 0 0
i insert 1602316358085623917611482584712783828546374983760216064 1265826353843853227907712202.1219942569732666015625
i insert 1001447723803514948507176615635363927282927371271077363712 31645658846096330697692805053.049854278564453125
section_temp 0
section h inf
25316527076877064558154244042439878253742124357742755840 / 3 ::== 8438842358959021519384748014146626084580708119247585280
            ----->  | *2 16877684717918043038769496028293252169161416238495170560
            ----->  /2 4219421179479510759692374007073313042290354059623792640
                 --> 2109710589739755379846187003536656521145177029811896320
                 --> 1054855294869877689923093501768328260572588514905948160
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 284856241437444252019819126216168752810970499896200658944 16877684717918043038769496028.293254852294921875
i insert 1780351508984026575123869538851054572842304104001188134912 42194211794795107596923740070.7331390380859375
i insert 0 0
i insert 17803515089840265751238695388510547050685656243512541184 4219421179479510759692374007.07331371307373046875
i insert 111271969311501660945241846167642353005732833721852100608 10548552948698776899230935017.683284759521484375
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241241901830747210744254693376 / 16 ::== 493672277999102758884007758827577618864421700671515918336
            ----->  | *2 987344555998205517768015517655155237728843401343031836672
            ----->  /2 246836138999551379442003879413788809432210850335757959168
                 --> 123418069499775689721001939706894404716105425167878979584
                 --> 61709034749887844860500969853447202358052712583939489792
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929359147482600461824531431520374691698049024 9873445559982055177680155176.55154895782470703125
i insert 609280795162058494671766252935770494395288981705618096128 24683613899955137944200387941.378871917724609375
i insert 0 0
i insert 6092807951620584946717662528864033214470023418231128064 2468361389995513794420038794.1378872394561767578125
i insert 3808004969762865591698539080910274736196136594918468485120 61709034749887844860500969853.44718170166015625
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 / 246 ::== 2006797878045133166195153491169014667638606155344773120
            ----->  | *2 4013595756090266332390306982338029335277212310689546240
            ----->  /2 1003398939022566583097576745584507333819303077672386560
                 --> 501699469511283291548788372792253666909651538836193280
                 --> 250849734755641645774394186396126833454825769418096640
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 1610895089330579667319099089015609283019711540504393940992 40135957560902663323903069823.38031005859375
i insert 100680943083161229207443693048424585960791358406498713600 10033989390225665830975767455.8450775146484375
i insert 0 0
i insert 1006809430831612292074436929480846874060737108349288448 1003398939022566583097576745.5845077037811279296875
i insert 629255894269757682546523081627908586170984225719294361600 25084973475564164577439418639.61269378662109375
removals 
reporing rt 4
section_temp 0
section h inf
303798324922524774697850928509278520155439560814332215296 - 2006797878045133166195153491169014667638606155344773120 ::== 301791527044479641531655775018109498994547040713225273344
            ----->  | *2 603583054088959283063311550036218997989094081426450546688
            ----->  /2 150895763522239820765827887509054749497273520356612636672
                 --> 75447881761119910382913943754527374748636760178306318336
                 --> 37723940880559955191456971877263687374318380089153159168
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 3643125031833555475139218754843007810254835126333008248832 60358305408895928306331155003.62189483642578125
i insert 227695314489597217196201172155053610030669259972244668416 15089576352223982076582788750.9054737091064453125
i insert 0 0
i insert 2276953144895972171962011721550536289201351914508255232 1508957635222398207658278875.0905473232269287109375
i insert 1423095715559982607476257326119980822312739453590747217920 37723940880559955191456971877.263683319091796875
section_temp 0
section h inf
25316527076877064558154244042439878253742124357742755840 - 2006797878045133166195153491169014667638606155344773120 ::== 23309729198831931391959090551270864176399328561103634432
            ----->  | *2 46619458397663862783918181102541728352798657122207268864
            ----->  /2 11654864599415965695979545275635432088199664280551817216
                 --> 5827432299707982847989772637817716044099832140275908608
                 --> 2913716149853991423994886318908858022049916070137954304
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 2173373901291511656481821202869072955999168782984745582592 46619458397663862783918181102.5417327880859375
i insert 135835868830719478530113825167662183712362038634821451776 11654864599415965695979545275.635433197021484375
i insert 0 0
i insert 1358358688307194785301138250511135455277346798696398848 1165486459941596569597954527.5635433197021484375
i insert 848974180191996740813211407385300100424995746989442334720 29137161498539914239948863189.08858489990234375
section_temp 0
section h inf
8438842358959021519384748014146626084580708119247585280 - 2006797878045133166195153491169014667638606155344773120 ::== 6432044480913888353189594522977612007237912322608463872
            ----->  | *2 12864088961827776706379189045955224014475824645216927744
            ----->  /2 3216022240456944176594797261488806003618956161304231936
                 --> 1608011120228472088297398630744403001809478080652115968
                 --> 804005560114236044148699315372201500904739040326057984
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 165484784817819245903096142423457233666110563657950691328 12864088961827776706379189045.9552211761474609375
i insert 1034279905111370286894350890243088439132076284799031967744 32160222404569441765947972614.88805389404296875
i insert 0 0
i insert 10342799051113702868943508899858066454233208771728900096 3216022240456944176594797261.488805294036865234375
i insert 6464249406946064293089693064340904591213228099193840599040 80400556011423604414869931537.2201385498046875
section_temp 0
section h inf
493672277999102758884007758827577618864421700671515918336 - 2006797878045133166195153491169014667638606155344773120 ::== 491665480121057625717812605336408597703529180570408976384
            ----->  | *2 983330960242115251435625210672817195407058361140817952768
            ----->  /2 245832740060528812858906302668204298851764590285204488192
                 --> 122916370030264406429453151334102149425882295142602244096
                 --> 61458185015132203214726575667051074712941147571301122048
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 96693977737068044530828922805673636635152398283433836544 9833309602421152514356252106.7281665802001953125
i insert 604337360856675278317680767584626807595713033799401996288 24583274006052881285890630266.820415496826171875
i insert 0 0
i insert 6043373608566752783176807672896274657047280455470022656 2458327400605288128589063026.682041645050048828125
i insert 3777108505354220489485504797649749873919281239528539422720 61458185015132203214726575667.0510406494140625
ending sqti reporting the results 
reporting size of xl vector 44 64
entering amfidromi loop of xl vector  with first 
 of 60759664984504954939570185701.855712890625 ^2 ::== 3691736889029277506176855875889836443108210900877109624832 as intpart 3691736889029277506176855875785850688734058572414757896192  diafora 4207019558956366635967268265455391213096688638329496797184 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15189916246126238734892546425.46392822265625 ^2 ::== 230733555564329844136053492243114777694263181304819351552 as intpart 230733555564329844136053492229020704920945341857315946496  diafora 7668022892421314298008070649012220668004755787486674812928 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1518991624612623873489254642.546392917633056640625 ^2 ::== 2307335555643298441360534922431148095702369406749245440 as intpart 2307335555643298441360534920771215616620326559437291520  diafora 7896449112430000843702763606320470680606316685777113710592 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37974790615315596837231366063.659820556640625 ^2 ::== 1442084722277061525850334326519467313365480054458668810240 as intpart 1442084722277061525850334326469354164712177186765514211328  diafora 6456671725708582616293789814771888039350024927636034158592 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 50633054153754129116308488084.87976837158203125 ^2 ::== 2563706172936998268178372136034609430207278707380926283776 as intpart 2563706172936998268178372135945518548625143321322835673088  diafora 5335050275048645873965752005295723655437058793078712696832 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12658263538438532279077122021.2199420928955078125 ^2 ::== 160231635808562391761148258502163089387954919211307892736 as intpart 160231635808562391761148258496594909289071457582677229568  diafora 7738524812177081750382975882744647162546869136468805156864 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1265826353843853227907712202.1219942569732666015625 ^2 ::== 1602316358085623917611482585021631023744627471028322304 as intpart 1602316358085623917611482584712783828546374983760216064  diafora 7897154131627558518226512658656529369468216048569102106624 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 31645658846096330697692805053.049854278564453125 ^2 ::== 1001447723803514948507176615638519223672121553417060483072 as intpart 1001447723803514948507176615635363927282927371271077363712  diafora 6897308724182129193636947525605878125663547291301824167936 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 16877684717918043038769496028.293254852294921875 ^2 ::== 284856241437444252019819126226067664095566261321665085440 as intpart 284856241437444252019819126216168752810970499896200658944  diafora 7613900206548199890124305015025073073461912984933730615296 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 42194211794795107596923740070.7331390380859375 ^2 ::== 1780351508984026575123869538912923165049812173960538750976 as intpart 1780351508984026575123869538851054572842304104001188134912  diafora 6118404939001617567020254602390187631219898010400360235008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 4219421179479510759692374007.07331371307373046875 ^2 ::== 17803515089840265751238695389129229005972891332604067840 as intpart 17803515089840265751238695388510547050685656243512541184  diafora 7880952932895803876392885445852730972268376442059479842816 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10548552948698776899230935017.683284759521484375 ^2 ::== 111271969311501660945241846182057697815613260872533671936 as intpart 111271969311501660945241846167642353005732833721852100608  diafora 7787484478674142481198882295073599189925161678929366351872 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9873445559982055177680155176.55154895782470703125 ^2 ::== 97484927225929359147482600472715904700888986494563254272 as intpart 97484927225929359147482600461824531431520374691698049024  diafora 7801271520759714782996641540779417417622891664749008781312 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24683613899955137944200387941.378871917724609375 ^2 ::== 609280795162058494671766252954474390213456716982084698112 as intpart 609280795162058494671766252935770494395288981705618096128  diafora 7289475652823585647472357888305471482993321954952960016384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2468361389995513794420038794.1378872394561767578125 ^2 ::== 6092807951620584946717662529544744043805561655910203392 as intpart 6092807951620584946717662528864033214470023418231128064  diafora 7892663640034023557197406478712377947125619965033875243008 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61709034749887844860500969853.44718170166015625 ^2 ::== 3808004969762865591698539080965465222176093453316742184960 as intpart 3808004969762865591698539080910274736196136594918468485120  diafora 4090751478222778550445585060330967165634610615825786208256 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 40135957560902663323903069823.38031005859375 ^2 ::== 1610895089330579667319099089046137380048075060081367973888 as intpart 1610895089330579667319099089015609283019711540504393940992  diafora 6287861358655064474825025052225632316579580766582567075840 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 10033989390225665830975767455.8450775146484375 ^2 ::== 100680943083161229207443693065383586253004691255085498368 as intpart 100680943083161229207443693048424585960791358406498713600  diafora 7798075504902482912936680448192817731438206344866534785024 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1003398939022566583097576745.5845077037811279296875 ^2 ::== 1006809430831612292074436930653835779888633462332063744 as intpart 1006809430831612292074436929480846874060737108349288448  diafora 7897749638554812529852049704311760790504163432935773437952 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 25084973475564164577439418639.61269378662109375 ^2 ::== 629255894269757682546523081658647414081279320344284364800 as intpart 629255894269757682546523081627908586170984225719294361600  diafora 7269500553715886459597601059613333088986171807281990074368 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 60358305408895928306331155003.62189483642578125 ^2 ::== 3643125031833555475139218754918080894727083983453087072256 as intpart 3643125031833555475139218754843007810254835126333008248832  diafora 4255631416152088667004905386398234091575912084411246444544 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 15089576352223982076582788750.9054737091064453125 ^2 ::== 227695314489597217196201172182380055920442748965817942016 as intpart 227695314489597217196201172155053610030669259972244668416  diafora 7671061133496046924947922969086188669589396580343627120640 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1508957635222398207658278875.0905473232269287109375 ^2 ::== 2276953144895972171962011721823800452951181625091162112 as intpart 2276953144895972171962011721550536289201351914508255232  diafora 7896479494840748169972162129519690898027264054734870282240 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 37723940880559955191456971877.263683319091796875 ^2 ::== 1423095715559982607476257326139875207831772694947005726720 as intpart 1423095715559982607476257326119980822312739453590747217920  diafora 6475660732425661534667866815121261381749462660810801152000 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 46619458397663862783918181102.5417327880859375 ^2 ::== 2173373901291511656481821202919583387899942508190437998592 as intpart 2173373901291511656481821202869072955999168782984745582592  diafora 5725382546694132485662302938372169248063033331416802787328 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 11654864599415965695979545275.635433197021484375 ^2 ::== 135835868830719478530113825182473961743746406761902374912 as intpart 135835868830719478530113825167662183712362038634821451776  diafora 7762920579154924663614010316073579585892123651759367258112 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 1165486459941596569597954527.5635433197021484375 ^2 ::== 1358358688307194785301138251824739611534505964031967232 as intpart 1358358688307194785301138250511135455277346798696398848  diafora 7897398089297336947358823002990730852411084223726907031552 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 29137161498539914239948863189.08858489990234375 ^2 ::== 848974180191996740813211407390462364790477665394084544512 as intpart 848974180191996740813211407385300100424995746989442334720  diafora 7049782267793647401330912733855941650290024011926165520384 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 12864088961827776706379189045.9552211761474609375 ^2 ::== 165484784817819245903096142448033335537328908321905704960 as intpart 165484784817819245903096142423457233666110563657950691328  diafora 7733271663167824896241027998817784573717306989693399728128 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 32160222404569441765947972614.88805389404296875 ^2 ::== 1034279905111370286894350890300208521835865543188783562752 as intpart 1034279905111370286894350890243088439132076284799031967744  diafora 6864476542874273855249773250998153160467216022287929049088 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 3216022240456944176594797261.488805294036865234375 ^2 ::== 10342799051113702868943508903002083471083056770119106560 as intpart 10342799051113702868943508899858066454233208771728900096  diafora 7888413648934530439275180632341384370184518186959846244352 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 80400556011423604414869931537.2201385498046875 ^2 ::== 6464249406946064293089693064376303148137364056058412138496 as intpart 6464249406946064293089693064340904591213228099193840599040  diafora 1434507041039579849054431076900337310617519111550414094336 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 9833309602421152514356252106.7281665802001953125 ^2 ::== 96693977737068044530828922819994212994454597393966956544 as intpart 96693977737068044530828922805673636635152398283433836544  diafora 7802062470248576097613295218435568491869185990203791114240 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 24583274006052881285890630266.820415496826171875 ^2 ::== 604337360856675278317680767624963750935111024928324845568 as intpart 604337360856675278317680767584626807595713033799401996288  diafora 7294419087128968863826443373656614565329988095544588763136 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241241901830747210744254693376 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 2458327400605288128589063026.682041645050048828125 ^2 ::== 6043373608566752783176807676249638312153412337122934784 as intpart 6043373608566752783176807672896274657047280455470022656  diafora 7892713074377077389360947333568345891035927160630210985984 from 7898756447985644142144124141241241901830747210744254693376
entering amfidromi loop of xl vector  with first 
 of 61458185015132203214726575667.0510406494140625 ^2 ::== 3777108505354220489485504797656023594460171357630677123072 as intpart 3777108505354220489485504797649749873919281239528539422720  diafora 4121647942631423652658619343591492027911465971215715270656 from 7898756447985644142144124141241241901830747210744254693376
the size of xpl vector is 44 64
 of 80400556011423604414869931537.2201385498046875 ^2 ::== 6464249406946064293089693064376303148137364056058412138496 as intpart 6464249406946064293089693064340904591213228099193840599040  diafora 1434507041039579849054431076900337310617519111550414094336 from 7898756447985644142144124141241241901830747210744254693376

-------------------------------------------------------------------------


 86764496491951345714908106824.072113 ^2 ::== 7528077851501837376967649700518590443290830278461659021312.000000 as intpart 7528077851501837376967649700506076852131999251874275393536.000000 diafora 370678596483806765176474440735165049698747958869979299840.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 84619977190903115174562305544.293472 ^2 ::== 7160540539788963467043625943802372906297435493141323972608.000000 as intpart 7160540539788963467043625943752705397924388068127695437824.000000 diafora 738215908196680675100498197488536503906359142616559255552.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 87602067595113039949538577048.677673 ^2 ::== 7674122246938754150625840409386946057418446624402501009408.000000 as intpart 7674122246938754150625840409268215034822454663896258052096.000000 diafora 224634201046889991518283731973026867008292546847996641280.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 81876142686456790566484014986.609116 ^2 ::== 6703702741213031793794336618385169167316589724102905823232.000000 as intpart 6703702741213031793794336618285425533643465129414598066176.000000 diafora 1195053706772612348349787522955816368187282081329656627200.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 83329892840731243853436849728.541916 ^2 ::== 6943871040847752209494137424746351654733977511033753829376.000000 as intpart 6943871040847752209494137424656035224602207794649804832768.000000 diafora 954885407137891932649986716585206677228539416094449860608.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 82947645625865504202733010968.319275 ^2 ::== 6880311914874164712416240998103718670534574639771140751360.000000 as intpart 6880311914874164712416240998050753212525618506368913768448.000000 diafora 1018444533111479429727883143190488689305128704375340924928.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 81758432068505425289432179269.848724 ^2 ::== 6684441214300416315007235588977447105707172855502369456128.000000 as intpart 6684441214300416315007235588838666048392872270133624569856.000000 diafora 1214315233685227827136888552402575853437874940610630123520.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 
 80400556011423604414869931537.220139 ^2 ::== 6464249406946064293089693064376303148137364056058412138496.000000 as intpart 6464249406946064293089693064340904591213228099193840599040.000000 diafora 1434507041039579849054431076900337310617519111550414094336.000000 from 7898756447985644142144124141241241901830747210744254693376.000000 

---------order of near approximation numbers--------
|----------bigger value is the nearest-------------|

the size of fnl_weirdo vector is 7 8
 87602067595113039949538577048  86764496491951345714908106824  84619977190903115174562305544  83329892840731243853436849728  82947645625865504202733010968  81876142686456790566484014986  81758432068505425289432179269 
----------------------------------------------------

auto value is 87602067595113039949538577048
lenght of 87602067595113039949538577048 29
lenght of 7898756447985644142144124141241241901830747210744254693376 is 58
moving with ps_ask 30
creating  vcc_part_one instance .... 
entered fill_vcc function @ vcc_part_one class 
-------------------------------------------------------
times 1 7 8
main 2.6457513110645905905016157536392604010093292773694126798306529343426463443678109 second 2.828427124746190097603377448419395968694492778317254832511024748099349480912057
main 7 second 7.9999999999999999999999999999999992296280222451056587776088229660290725847593407
times of 0.33071891388307382381270196920490759827441476935207291137828018141601375649851757
new times of 0.33071891388307382381270196920490759827441476935207291137828018141601375649851757
using 87602067595113039949538577048 * 0.33071891388307382381270196920490759827441476935207291137828018141601375649851757
28971660648967401489352234199.24185943603515625  with length of 46 and dot length 29 will move 17
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 28971660648967401489352234199.24185943603515625 ^2 ::== 839357120758926235224701294763711227217831225128042627072
 temp fract 0 temp int 839357120758926235224701294763711227217831225128042627072
before loop xstp is 0entering tens with lap of value 10
using t_rst as 289716606489674014893522341992.4185791015625
using for fract 83935712075892623522470129476371121512857302898175088001024
getting the part of 83935712075892623522470129476371121512857302898175088001024 :: ad 59 and mad 58
have to exit bigger lenght with ad 59 and mad 58
i push_back a near value of 289716606489674014893522341992
stopping with ad 59 and mad of 58
    -----------------> 289716606489674014893522341992.4185791015625 ^2 ::== 83935712075892623522470129476371121512857302898175088001024
t_ten increased 
breaking with xbrk of value 1

increasing the digits 2
-------------------------------------------------------
-------------------------------------------------------
times 2 78 87
main 8.8317608663278468547640427269592536887435252431404548810105985240772111244389464 second 9.327379053088815045554475542320557471527647726584875648712282054562071331726969
main 78 second 87.000000000000000000000000000000012325951644078309459558258832543534838643850549
times of 0.10151449271641203281337980145930174855086718883346349739113241579107775646242939
new times of 0.10151449271641203281337980145930174855086718883346349739113241579107775646242939
using 87602067595113039949538577048 * 0.10151449271641203281337980145930174855086718883346349739113241579107775646242939
8892879452826737257523152851.31406497955322265625  with length of 48 and dot length 28 will move 20
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 8892879452826737257523152851.31406497955322265625 ^2 ::== 79083304962507969843944451304389019965990194825647882240
 temp fract 0 temp int 79083304962507969843944451304389019965990194825647882240
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88928794528267372575231528513.140655517578125
using for fract 7908330496250796984394445130438902789956588604665184124928
getting the part of 7908330496250796984394445130438902789956588604665184124928 :: ad 58 and mad 58
i push_back a near value of 88928794528267372575231528513
stopping with ad 58 and mad of 58
    -----------------> 88928794528267372575231528513.140655517578125 ^2 ::== 7908330496250796984394445130438902789956588604665184124928
t_ten increased 
breaking with xbrk of value 1

increasing the digits 3
-------------------------------------------------------
-------------------------------------------------------
times 3 789 876
main 28.089143810376278537410115784911931636456534130939175851030208707942610601993039 second 29.597297173897484114168686058771675835415423875757900097948624313346811798286495
main 789 second 876
times of 0.03206523266024689330754579427501362182624672128853806300801118882644318182611326
new times of 0.03206523266024689330754579427501362182624672128853806300801118882644318182611326
using 87602067595113039949538577048 * 0.03206523266024689330754579427501362182624672128853806300801118882644318182611326
2808980678955974669198236835.134189605712890625  with length of 46 and dot length 28 will move 18
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 2808980678955974669198236835.134189605712890625 ^2 ::== 7890372454747968433784465611268298223991310730838147072
 temp fract 0 temp int 7890372454747968433784465611268298223991310730838147072
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28089806789559746691982368351.34189605712890625
using for fract 789037245474796843378446561126829926291193696216009408512
getting the part of 789037245474796843378446561126829926291193696216009408512 :: ad 57 and mad 58
i push_back a near value of 28089806789559746691982368351
stopping with ad 57 and mad of 58
    -----------------> 28089806789559746691982368351.34189605712890625 ^2 ::== 789037245474796843378446561126829926291193696216009408512
t_ten increased 
breaking with xbrk of value 1

increasing the digits 4
-------------------------------------------------------
-------------------------------------------------------
times 4 7898 8760
main 88.870692581975527214891528710888455274912094392527793889969262952459316817765966 second 93.594871654380722271554123512596911970141477291004150720403907052873104799317616
main 7898 second 8760
times of 0.010145056230819124111288987295763521780493718458014204969728372881564303791858406
new times of 0.010145056230819124111288987295763521780493718458014204969728372881564303791858406
using 87602067595113039949538577048 * 0.010145056230819124111288987295763521780493718458014204969728372881564303791858406
888727901688439629260229988.11692559719085693359375  with length of 50 and dot length 27 will move 23
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 888727901688439629260229988.11692559719085693359375 ^2 ::== 789837283239536814829273883368783362593378961228562432
 temp fract 0 temp int 789837283239536814829273883368783362593378961228562432
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887279016884396292602299881.1692562103271484375
using for fract 78983728323953681482927388336878339801112758275090153472
getting the part of 78983728323953681482927388336878339801112758275090153472 :: ad 56 and mad 58
    -----------------> 8887279016884396292602299881.1692562103271484375 ^2 ::== 78983728323953681482927388336878339801112758275090153472
t_ten increased 
using t_rst as 88872790168843962926022998811.69256591796875
using for fract 7898372832395368148292738833687835377931754756923998601216
getting the part of 7898372832395368148292738833687835377931754756923998601216 :: ad 58 and mad 58
i push_back a near value of 88872790168843962926022998811
stopping with ad 58 and mad of 58
    -----------------> 88872790168843962926022998811.69256591796875 ^2 ::== 7898372832395368148292738833687835377931754756923998601216
t_ten increased 
breaking with xbrk of value 1

increasing the digits 5
-------------------------------------------------------
-------------------------------------------------------
times 5 78987 87602
main 281.04625953746475720057820582362478720008386520340138708998789268851681288907685 second 295.97635040658231617946977886938884742806573109882550746950423121821305283418724
main 78987 second 87602.000000000000000000000000000012621774483536188886587657044524579674771302962
times of 0.0032082173870170173877374740967514981611652599101041026471542492581099349793446497
new times of 0.0032082173870170173877374740967514981611652599101041026471542492581099349793446497
using 87602067595113039949538577048 * 0.0032082173870170173877374740967514981611652599101041026471542492581099349793446497
281046476397281689347405719.0954701602458953857421875  with length of 52 and dot length 27 will move 25
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 281046476397281689347405719.0954701602458953857421875 ^2 ::== 78987121895327813698662974878784170792611177763438592
 temp fract 0 temp int 78987121895327813698662974878784170792611177763438592
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810464763972816893474057190.95470142364501953125
using for fract 7898712189532781369866297487878415972456473353770762240
getting the part of 7898712189532781369866297487878415972456473353770762240 :: ad 55 and mad 58
    -----------------> 2810464763972816893474057190.95470142364501953125 ^2 ::== 7898712189532781369866297487878415972456473353770762240
t_ten increased 
using t_rst as 28104647639728168934740571909.547016143798828125
using for fract 789871218953278136986629748787841724749542372857496993792
getting the part of 789871218953278136986629748787841724749542372857496993792 :: ad 57 and mad 58
i push_back a near value of 28104647639728168934740571909
stopping with ad 57 and mad of 58
    -----------------> 28104647639728168934740571909.547016143798828125 ^2 ::== 789871218953278136986629748787841724749542372857496993792
t_ten increased 
breaking with xbrk of value 1

increasing the digits 6
-------------------------------------------------------
-------------------------------------------------------
times 6 789875 876020
main 888.74912095596471537779495238918011938059874764077607985010836145339796487974127 second 935.95940082890347557432460648442925946425934695133868948338382249066413898219707
main 789875 second 876020
times of 0.0010145306282458901798792207396967878554546192707742696662729882117002639192379892
new times of 0.0010145306282458901798792207396967878554546192707742696662729882117002639192379892
using 87602067595113039949538577048 * 0.0010145306282458901798792207396967878554546192707742696662729882117002639192379892
88874980672908970309748460.47110331058502197265625  with length of 49 and dot length 26 will move 23
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 88874980672908970309748460.47110331058502197265625 ^2 ::== 7898762189609943009005458782126130208897499672870912
 temp fract 0 temp int 7898762189609943009005458782126130208897499672870912
before loop xstp is 0entering tens with lap of value 10
using t_rst as 888749806729089703097484604.7110331058502197265625
using for fract 789876218960994300900545878212612928656029598739333120
getting the part of 789876218960994300900545878212612928656029598739333120 :: ad 54 and mad 58
    -----------------> 888749806729089703097484604.7110331058502197265625 ^2 ::== 789876218960994300900545878212612928656029598739333120
t_ten increased 
using t_rst as 8887498067290897030974846047.1103305816650390625
using for fract 78987621896099430090054587821261288143236477004288098304
getting the part of 78987621896099430090054587821261288143236477004288098304 :: ad 56 and mad 58
    -----------------> 8887498067290897030974846047.1103305816650390625 ^2 ::== 78987621896099430090054587821261288143236477004288098304
t_ten increased 
using t_rst as 88874980672908970309748460471.1033172607421875
using for fract 7898762189609943009005458782126131005501695751944188985344
getting the part of 7898762189609943009005458782126131005501695751944188985344 :: ad 58 and mad 58
i push_back a near value of 88874980672908970309748460471
stopping with ad 58 and mad of 58
    -----------------> 88874980672908970309748460471.1033172607421875 ^2 ::== 7898762189609943009005458782126131005501695751944188985344
t_ten increased 
breaking with xbrk of value 1

increasing the digits 7
-------------------------------------------------------
-------------------------------------------------------
times 7 7898756 8760206
main 2810.4725581296822190823865219277240185453847638211927745916472731746438284972101 second 2959.7645176601465569505992093333600769924148349323828776709810906703213007062914
main 7898755.9999999999999999999999999991922064330536839112583899491504269008146366104 second 8760206
times of 0.0003208226562400110475806603773847012518970018514362539820273914150992629905529991
new times of 0.0003208226562400110475806603773847012518970018514362539820273914150992629905529991
using 87602067595113039949538577048 * 0.0003208226562400110475806603773847012518970018514362539820273914150992629905529991
28104728017981162110579974.6941000260412693023681640625  with length of 54 and dot length 26 will move 28
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 28104728017981162110579974.6941000260412693023681640625 ^2 ::== 789875736964695340806834412896085754816612855185408
 temp fract 0 temp int 789875736964695340806834412896085754816612855185408
before loop xstp is 0entering tens with lap of value 10
using t_rst as 281047280179811621105799746.9410002529621124267578125
using for fract 78987573696469534080683441289608569717053762484305920
getting the part of 78987573696469534080683441289608569717053762484305920 :: ad 53 and mad 58
    -----------------> 281047280179811621105799746.9410002529621124267578125 ^2 ::== 78987573696469534080683441289608569717053762484305920
t_ten increased 
using t_rst as 2810472801798116211057997469.41000270843505859375
using for fract 7898757369646953408068344128960858262977461408099205120
getting the part of 7898757369646953408068344128960858262977461408099205120 :: ad 55 and mad 58
    -----------------> 2810472801798116211057997469.41000270843505859375 ^2 ::== 7898757369646953408068344128960858262977461408099205120
t_ten increased 
using t_rst as 28104728017981162110579974694.100025177001953125
using for fract 789875736964695340806834412896085750739882414895597092864
getting the part of 789875736964695340806834412896085750739882414895597092864 :: ad 57 and mad 58
i push_back a near value of 28104728017981162110579974694
stopping with ad 57 and mad of 58
    -----------------> 28104728017981162110579974694.100025177001953125 ^2 ::== 789875736964695340806834412896085750739882414895597092864
t_ten increased 
breaking with xbrk of value 1

increasing the digits 8
-------------------------------------------------------
-------------------------------------------------------
times 8 78987564 87602067
main 8887.4948101250669591099518321822219325779964655976874180024231361652020666497265 second 9359.5975875034285578599929441139020187595715192433103130987062656664932092098752
main 78987563.999999999999999999999999987075302928858942580134239186406830413034185767 second 87602067
times of 0.00010145302633241595725258345596094464092596877776077522709344207622585490425737959
new times of 0.00010145302633241595725258345596094464092596877776077522709344207622585490425737959
using 87602067595113039949538577048 * 0.00010145302633241595725258345596094464092596877776077522709344207622585490425737959
8887494870501085871874598.625756775029003620147705078125  with length of 55 and dot length 25 will move 30
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 8887494870501085871874598.625756775029003620147705078125 ^2 ::== 78987565073183113131681032190437100774114738569216
 temp fract 0 temp int 78987565073183113131681032190437100774114738569216
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88874948705010858718745986.25756774842739105224609375
using for fract 7898756507318311313168103219043710221526661932777472
getting the part of 7898756507318311313168103219043710221526661932777472 :: ad 52 and mad 58
    -----------------> 88874948705010858718745986.25756774842739105224609375 ^2 ::== 7898756507318311313168103219043710221526661932777472
t_ten increased 
using t_rst as 888749487050108587187459862.57567751407623291015625
using for fract 789875650731831131316810321904371063657840359124238336
getting the part of 789875650731831131316810321904371063657840359124238336 :: ad 54 and mad 58
    -----------------> 888749487050108587187459862.57567751407623291015625 ^2 ::== 789875650731831131316810321904371063657840359124238336
t_ten increased 
using t_rst as 8887494870501085871874598625.75677490234375
using for fract 78987565073183113131681032190437098691938501249250361344
getting the part of 78987565073183113131681032190437098691938501249250361344 :: ad 56 and mad 58
    -----------------> 8887494870501085871874598625.75677490234375 ^2 ::== 78987565073183113131681032190437098691938501249250361344
t_ten increased 
using t_rst as 88874948705010858718745986257.5677490234375
using for fract 7898756507318311313168103219043709491404531495353419038720
getting the part of 7898756507318311313168103219043709491404531495353419038720 :: ad 58 and mad 58
i push_back a near value of 88874948705010858718745986257
stopping with ad 58 and mad of 58
    -----------------> 88874948705010858718745986257.5677490234375 ^2 ::== 7898756507318311313168103219043709491404531495353419038720
t_ten increased 
breaking with xbrk of value 1

increasing the digits 9
-------------------------------------------------------
-------------------------------------------------------
times 9 789875644 876020675
main 28104.726364083319428969642215740808823514810145160940641601531042592654330292135 second 29597.64644359412574946419050637592621188887059320160687121595115278704923866826
main 789875644 second 876020675
times of 3.2082263770867416375726111961616439392832184768356608873234364413325426102556958e-05
new times of 3.2082263770867416375726111961616439392832184768356608873234364413325426102556958e-05
using 87602067595113039949538577048 * 3.2082263770867416375726111961616439392832184768356608873234364413325426102556958e-05
2810472639459773578607110.94861580617725849151611328125  with length of 54 and dot length 25 will move 29
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 2810472639459773578607110.94861580617725849151611328125 ^2 ::== 7898756457151986446832193847429306155289169362944
 temp fract 0 temp int 7898756457151986446832193847429306155289169362944
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28104726394597735786071109.4861580617725849151611328125
using for fract 789875645715198644683219384742930574996520289959936
getting the part of 789875645715198644683219384742930574996520289959936 :: ad 51 and mad 58
    -----------------> 28104726394597735786071109.4861580617725849151611328125 ^2 ::== 789875645715198644683219384742930574996520289959936
t_ten increased 
using t_rst as 281047263945977357860711094.8615806102752685546875
using for fract 78987564571519864468321938474293054617348267478876160
getting the part of 78987564571519864468321938474293054617348267478876160 :: ad 53 and mad 58
    -----------------> 281047263945977357860711094.8615806102752685546875 ^2 ::== 78987564571519864468321938474293054617348267478876160
t_ten increased 
using t_rst as 2810472639459773578607110948.615806102752685546875
using for fract 7898756457151986446832193847429305129693433421115686912
getting the part of 7898756457151986446832193847429305129693433421115686912 :: ad 55 and mad 58
    -----------------> 2810472639459773578607110948.615806102752685546875 ^2 ::== 7898756457151986446832193847429305129693433421115686912
t_ten increased 
using t_rst as 28104726394597735786071109486.158061981201171875
using for fract 789875645715198644683219384742930522414076307850859118592
getting the part of 789875645715198644683219384742930522414076307850859118592 :: ad 57 and mad 58
i push_back a near value of 28104726394597735786071109486
stopping with ad 57 and mad of 58
    -----------------> 28104726394597735786071109486.158061981201171875 ^2 ::== 789875645715198644683219384742930522414076307850859118592
t_ten increased 
breaking with xbrk of value 1

increasing the digits 10
-------------------------------------------------------
-------------------------------------------------------
times 10 7898756447 8760206759
main 88874.94836566713865355816415734762982624416520717774940350992818327569011671585 second 93595.976190218775878873346558953299025969249429586473891604786468079169026168529
main 7898756447 second 8760206759
times of 1.0145302595096789844336385731800240838618524706282472756539420844098078764609157e-05
new times of 1.0145302595096789844336385731800240838618524706282472756539420844098078764609157e-05
using 87602067595113039949538577048 * 1.0145302595096789844336385731800240838618524706282472756539420844098078764609157e-05
888749483708544724004468.926691959728486835956573486328125  with length of 57 and dot length 24 will move 33
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 888749483708544724004468.926691959728486835956573486328125 ^2 ::== 789875644792204803784734522488657286917634654208
 temp fract 0 temp int 789875644792204803784734522488657286917634654208
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887494837085447240044689.266919597052037715911865234375
using for fract 78987564479220480378473452248865726439963651735552
getting the part of 78987564479220480378473452248865726439963651735552 :: ad 50 and mad 58
    -----------------> 8887494837085447240044689.266919597052037715911865234375 ^2 ::== 78987564479220480378473452248865726439963651735552
t_ten increased 
using t_rst as 88874948370854472400446892.6691959798336029052734375
using for fract 7898756447922048037847345224886573724860275742474240
getting the part of 7898756447922048037847345224886573724860275742474240 :: ad 52 and mad 58
    -----------------> 88874948370854472400446892.6691959798336029052734375 ^2 ::== 7898756447922048037847345224886573724860275742474240
t_ten increased 
using t_rst as 888749483708544724004468926.69195973873138427734375
using for fract 789875644792204803784734522488657229523761002998398976
getting the part of 789875644792204803784734522488657229523761002998398976 :: ad 54 and mad 58
    -----------------> 888749483708544724004468926.69195973873138427734375 ^2 ::== 789875644792204803784734522488657229523761002998398976
t_ten increased 
using t_rst as 8887494837085447240044689266.919597625732421875
using for fract 78987564479220480378473452248865729445630014245602066432
getting the part of 78987564479220480378473452248865729445630014245602066432 :: ad 56 and mad 58
    -----------------> 8887494837085447240044689266.919597625732421875 ^2 ::== 78987564479220480378473452248865729445630014245602066432
t_ten increased 
using t_rst as 88874948370854472400446892669.1959686279296875
using for fract 7898756447922048037847345224886571886752909261759678775296
getting the part of 7898756447922048037847345224886571886752909261759678775296 :: ad 58 and mad 58
i push_back a near value of 88874948370854472400446892669
stopping with ad 58 and mad of 58
    -----------------> 88874948370854472400446892669.1959686279296875 ^2 ::== 7898756447922048037847345224886571886752909261759678775296
t_ten increased 
breaking with xbrk of value 1

increasing the digits 11
-------------------------------------------------------
-------------------------------------------------------
times 11 78987564479 87602067595
main 281047.26378137894975594716408658462805741477098022500620772348711717825153755257 second 295976.46459642699097228697961562156195842128983421482219797957191609327765036141
main 78987564479.000000000000000000000013234889800848442797942539073119405657052993774 second 87602067594.999999999999999999999986765110199151557202057460926880594342947006226
times of 3.2082263752119485548764251639760018074580669930230163363306058816227225698238498e-06
new times of 3.2082263752119485548764251639760018074580669930230163363306058816227225698238498e-06
using 87602067595113039949538577048 * 3.2082263752119485548764251639760018074580669930230163363306058816227225698238498e-06
281047263781741607503509.4547058959142304956912994384765625  with length of 58 and dot length 24 will move 34
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 281047263781741607503509.4547058959142304956912994384765625 ^2 ::== 78987564479203847935283131181600066913278361600
 temp fract 0 temp int 78987564479203847935283131181600066913278361600
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810472637817416075035094.5470589590258896350860595703125
using for fract 7898756447920384793528313118160006163562254827520
getting the part of 7898756447920384793528313118160006163562254827520 :: ad 49 and mad 58
    -----------------> 2810472637817416075035094.5470589590258896350860595703125 ^2 ::== 7898756447920384793528313118160006163562254827520
t_ten increased 
using t_rst as 28104726378174160750350945.47058959305286407470703125
using for fract 789875644792038479352831311816000791996610950201344
getting the part of 789875644792038479352831311816000791996610950201344 :: ad 51 and mad 58
    -----------------> 28104726378174160750350945.47058959305286407470703125 ^2 ::== 789875644792038479352831311816000791996610950201344
t_ten increased 
using t_rst as 281047263781741607503509454.705895900726318359375
using for fract 78987564479203847935283131181600056141231002883194880
getting the part of 78987564479203847935283131181600056141231002883194880 :: ad 53 and mad 58
    -----------------> 281047263781741607503509454.705895900726318359375 ^2 ::== 78987564479203847935283131181600056141231002883194880
t_ten increased 
using t_rst as 2810472637817416075035094547.05895900726318359375
using for fract 7898756447920384793528313118160006056844958057348726784
getting the part of 7898756447920384793528313118160006056844958057348726784 :: ad 55 and mad 58
    -----------------> 2810472637817416075035094547.05895900726318359375 ^2 ::== 7898756447920384793528313118160006056844958057348726784
t_ten increased 
using t_rst as 28104726378174160750350945470.58959197998046875
using for fract 789875644792038479352831311816000629296328220083098746880
getting the part of 789875644792038479352831311816000629296328220083098746880 :: ad 57 and mad 58
i push_back a near value of 28104726378174160750350945470
stopping with ad 57 and mad of 58
    -----------------> 28104726378174160750350945470.58959197998046875 ^2 ::== 789875644792038479352831311816000629296328220083098746880
t_ten increased 
breaking with xbrk of value 1

increasing the digits 12
-------------------------------------------------------
-------------------------------------------------------
times 12 789875644798 876020675951
main 888749.48371180503319253891184641541469123799083606359537103325241247375743114389 second 935959.761929432519768419398532736041832368456902224967530051769060150945733767
main 789875644798 second 876020675951.0000000000000000000001058791184067875423835403125849552452564239502
times of 1.0145302595135517279830766762833643780000137930939825761076743644885391686948669e-06
new times of 1.0145302595135517279830766762833643780000137930939825761076743644885391686948669e-06
using 87602067595113039949538577048 * 1.0145302595135517279830766762833643780000137930939825761076743644885391686948669e-06
88874948371193732742643.30737625877372920513153076171875  with length of 55 and dot length 23 will move 32
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 88874948371193732742643.30737625877372920513153076171875 ^2 ::== 7898756447982351528641429878642936303845376000
 temp fract 0 temp int 7898756447982351528641429878642936303845376000
before loop xstp is 0entering tens with lap of value 10
using t_rst as 888749483711937327426433.0737625877372920513153076171875
using for fract 789875644798235152864142987864293647976723644416
getting the part of 789875644798235152864142987864293647976723644416 :: ad 48 and mad 58
    -----------------> 888749483711937327426433.0737625877372920513153076171875 ^2 ::== 789875644798235152864142987864293647976723644416
t_ten increased 
using t_rst as 8887494837119373274264330.737625877372920513153076171875
using for fract 78987564479823515286414298786429360294072737071104
getting the part of 78987564479823515286414298786429360294072737071104 :: ad 50 and mad 58
    -----------------> 8887494837119373274264330.737625877372920513153076171875 ^2 ::== 78987564479823515286414298786429360294072737071104
t_ten increased 
using t_rst as 88874948371193732742643307.37625877559185028076171875
using for fract 7898756447982351528641429878642936786012011105353728
getting the part of 7898756447982351528641429878642936786012011105353728 :: ad 52 and mad 58
    -----------------> 88874948371193732742643307.37625877559185028076171875 ^2 ::== 7898756447982351528641429878642936786012011105353728
t_ten increased 
using t_rst as 888749483711937327426433073.7625877857208251953125
using for fract 789875644798235152864142987864293710883003239527088128
getting the part of 789875644798235152864142987864293710883003239527088128 :: ad 54 and mad 58
    -----------------> 888749483711937327426433073.7625877857208251953125 ^2 ::== 789875644798235152864142987864293710883003239527088128
t_ten increased 
using t_rst as 8887494837119373274264330737.62587738037109375
using for fract 78987564479823515286414298786429364595046410006946643968
getting the part of 78987564479823515286414298786429364595046410006946643968 :: ad 56 and mad 58
    -----------------> 8887494837119373274264330737.62587738037109375 ^2 ::== 78987564479823515286414298786429364595046410006946643968
t_ten increased 
using t_rst as 88874948371193732742643307376.2587738037109375
using for fract 7898756447982351528641429878642935515031344426765621657600
getting the part of 7898756447982351528641429878642935515031344426765621657600 :: ad 58 and mad 58
i push_back a near value of 88874948371193732742643307376
stopping with ad 58 and mad of 58
    -----------------> 88874948371193732742643307376.2587738037109375 ^2 ::== 7898756447982351528641429878642935515031344426765621657600
t_ten increased 
breaking with xbrk of value 1

increasing the digits 13
-------------------------------------------------------
-------------------------------------------------------
times 13 7898756447985 8760206759511
main 2810472.6378289115092197401297600771195901241446945807668164607484584394114790484 second 2959764.6459661281655836855176141719735494079352743743865396253145405580653459765
main 7898756447984.9999999999999999999991529670527456996609316774993203580379486083984 second 8760206759510.9999999999999999999991529670527456996609316774993203580379486083984
times of 3.2082263752251822181514943378204984586480380495695229242332166201883163807483107e-07
new times of 3.2082263752251822181514943378204984586480380495695229242332166201883163807483107e-07
using 87602067595113039949538577048 * 3.2082263752251822181514943378204984586480380495695229242332166201883163807483107e-07
28104726378290090376826.30294839511407190002501010894775390625  with length of 61 and dot length 23 will move 38
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 28104726378290090376826.30294839511407190002501010894775390625 ^2 ::== 789875644798554820215272465222685930674978816
 temp fract 0 temp int 789875644798554820215272465222685930674978816
before loop xstp is 0entering tens with lap of value 10
using t_rst as 281047263782900903768263.02948395113344304263591766357421875
using for fract 78987564479855482021527246522268589768962998272
getting the part of 78987564479855482021527246522268589768962998272 :: ad 47 and mad 58
    -----------------> 281047263782900903768263.02948395113344304263591766357421875 ^2 ::== 78987564479855482021527246522268589768962998272
t_ten increased 
using t_rst as 2810472637829009037682630.294839511625468730926513671875
using for fract 7898756447985548202152724652226859962058718314496
getting the part of 7898756447985548202152724652226859962058718314496 :: ad 49 and mad 58
    -----------------> 2810472637829009037682630.294839511625468730926513671875 ^2 ::== 7898756447985548202152724652226859962058718314496
t_ten increased 
using t_rst as 28104726378290090376826302.9483951143920421600341796875
using for fract 789875644798554820215272465222685919644678166151168
getting the part of 789875644798554820215272465222685919644678166151168 :: ad 51 and mad 58
    -----------------> 28104726378290090376826302.9483951143920421600341796875 ^2 ::== 789875644798554820215272465222685919644678166151168
t_ten increased 
using t_rst as 281047263782900903768263029.483951151371002197265625
using for fract 78987564479855482021527246522268592540928568918540288
getting the part of 78987564479855482021527246522268592540928568918540288 :: ad 53 and mad 58
    -----------------> 281047263782900903768263029.483951151371002197265625 ^2 ::== 78987564479855482021527246522268592540928568918540288
t_ten increased 
using t_rst as 2810472637829009037682630294.839511394500732421875
using for fract 7898756447985548202152724652226859180305880597015822336
getting the part of 7898756447985548202152724652226859180305880597015822336 :: ad 55 and mad 58
    -----------------> 2810472637829009037682630294.839511394500732421875 ^2 ::== 7898756447985548202152724652226859180305880597015822336
t_ten increased 
using t_rst as 28104726378290090376826302948.395114898681640625
using for fract 789875644798554820215272465222685974698985854137324797952
getting the part of 789875644798554820215272465222685974698985854137324797952 :: ad 57 and mad 58
i push_back a near value of 28104726378290090376826302948
stopping with ad 57 and mad of 58
    -----------------> 28104726378290090376826302948.395114898681640625 ^2 ::== 789875644798554820215272465222685974698985854137324797952
t_ten increased 
breaking with xbrk of value 1

increasing the digits 14
-------------------------------------------------------
-------------------------------------------------------
times 14 78987564479856 87602067595113
main 8887494.8371212008260199741120689039865375105146172516733943380629057173791807145 second 9359597.6192950196719836660423180668055617564760776739326425532894404568651225418
main 78987564479856.000000000000000000013552527156068805425093160010874271392822265625 second 87602067595113.000000000000000000013552527156068805425093160010874271392822265625
times of 1.0145302595137608103492238829402433589412011357462291685236664702579968214099853e-07
new times of 1.0145302595137608103492238829402433589412011357462291685236664702579968214099853e-07
using 87602067595113039949538577048 * 1.0145302595137608103492238829402433589412011357462291685236664702579968214099853e-07
8887494837121204879021.5481148195240166387520730495452880859375  with length of 62 and dot length 22 will move 40
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 8887494837121204879021.5481148195240166387520730495452880859375 ^2 ::== 78987564479856072042061127587109832717500416
 temp fract 0 temp int 78987564479856072042061127587109832717500416
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88874948371212048790215.481148195234709419310092926025390625
using for fract 7898756447985607204206112758710982584555274240
getting the part of 7898756447985607204206112758710982584555274240 :: ad 46 and mad 58
    -----------------> 88874948371212048790215.481148195234709419310092926025390625 ^2 ::== 7898756447985607204206112758710982584555274240
t_ten increased 
using t_rst as 888749483712120487902154.81148195243440568447113037109375
using for fract 789875644798560720420611275871098399193015779328
getting the part of 789875644798560720420611275871098399193015779328 :: ad 48 and mad 58
    -----------------> 888749483712120487902154.81148195243440568447113037109375 ^2 ::== 789875644798560720420611275871098399193015779328
t_ten increased 
using t_rst as 8887494837121204879021548.114819523878395557403564453125
using for fract 78987564479856072042061127587109826971452649242624
getting the part of 78987564479856072042061127587109826971452649242624 :: ad 50 and mad 58
    -----------------> 8887494837121204879021548.114819523878395557403564453125 ^2 ::== 78987564479856072042061127587109826971452649242624
t_ten increased 
using t_rst as 88874948371212048790215481.1481952369213104248046875
using for fract 7898756447985607204206112758710982336857294734622720
getting the part of 7898756447985607204206112758710982336857294734622720 :: ad 52 and mad 58
    -----------------> 88874948371212048790215481.1481952369213104248046875 ^2 ::== 7898756447985607204206112758710982336857294734622720
t_ten increased 
using t_rst as 888749483712120487902154811.4819524288177490234375
using for fract 789875644798560720420611275871098325919449842010030080
getting the part of 789875644798560720420611275871098325919449842010030080 :: ad 54 and mad 58
    -----------------> 888749483712120487902154811.4819524288177490234375 ^2 ::== 789875644798560720420611275871098325919449842010030080
t_ten increased 
using t_rst as 8887494837121204879021548114.81952381134033203125
using for fract 78987564479856072042061127587109826098691070255240839168
getting the part of 78987564479856072042061127587109826098691070255240839168 :: ad 56 and mad 58
    -----------------> 8887494837121204879021548114.81952381134033203125 ^2 ::== 78987564479856072042061127587109826098691070255240839168
t_ten increased 
using t_rst as 88874948371212048790215481148.1952362060546875
using for fract 7898756447985607204206112758710982572090175162566922207232
getting the part of 7898756447985607204206112758710982572090175162566922207232 :: ad 58 and mad 58
i push_back a near value of 88874948371212048790215481148
stopping with ad 58 and mad of 58
    -----------------> 88874948371212048790215481148.1952362060546875 ^2 ::== 7898756447985607204206112758710982572090175162566922207232
t_ten increased 
breaking with xbrk of value 1

increasing the digits 15
-------------------------------------------------------
-------------------------------------------------------
times 15 789875644798564 876020675951130
main 28104726.378290253690722406662297340503371698124731193485503766282818105537444353 second 29597646.45966178845288980475492512168602397039520552832203570403635239927098155
main 789875644798564 second 876020675951130.000000000000000000108420217248550443400745280086994171142578125
times of 3.2082263752252023239112409988360549139711495987863695246493952083640458137529755e-08
new times of 3.2082263752252023239112409988360549139711495987863695246493952083640458137529755e-08
using 87602067595113039949538577048 * 3.2082263752252023239112409988360549139711495987863695246493952083640458137529755e-08
2810472637829026650743.874075850655572139658033847808837890625  with length of 61 and dot length 22 will move 39
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 2810472637829026650743.874075850655572139658033847808837890625 ^2 ::== 7898756447985647204206112758747465368207360
 temp fract 0 temp int 7898756447985647204206112758747465368207360
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28104726378290266507438.74075850655572139658033847808837890625
using for fract 789875644798564720420611275874746536820736000
getting the part of 789875644798564720420611275874746536820736000 :: ad 45 and mad 58
    -----------------> 28104726378290266507438.74075850655572139658033847808837890625 ^2 ::== 789875644798564720420611275874746536820736000
t_ten increased 
using t_rst as 281047263782902665074387.40758506554993800818920135498046875
using for fract 78987564479856472042061127587474645985492205568
getting the part of 78987564479856472042061127587474645985492205568 :: ad 47 and mad 58
    -----------------> 281047263782902665074387.40758506554993800818920135498046875 ^2 ::== 78987564479856472042061127587474645985492205568
t_ten increased 
using t_rst as 2810472637829026650743874.0758506557904183864593505859375
using for fract 7898756447985647204206112758747466181845964554240
getting the part of 7898756447985647204206112758747466181845964554240 :: ad 49 and mad 58
    -----------------> 2810472637829026650743874.0758506557904183864593505859375 ^2 ::== 7898756447985647204206112758747466181845964554240
t_ten increased 
using t_rst as 28104726378290266507438740.7585065551102161407470703125
using for fract 789875644798564720420611275874746568645000554348544
getting the part of 789875644798564720420611275874746568645000554348544 :: ad 51 and mad 58
    -----------------> 28104726378290266507438740.7585065551102161407470703125 ^2 ::== 789875644798564720420611275874746568645000554348544
t_ten increased 
using t_rst as 281047263782902665074387407.585065543651580810546875
using for fract 78987564479856472042061127587474641876520495545843712
getting the part of 78987564479856472042061127587474641876520495545843712 :: ad 53 and mad 58
    -----------------> 281047263782902665074387407.585065543651580810546875 ^2 ::== 78987564479856472042061127587474641876520495545843712
t_ten increased 
using t_rst as 2810472637829026650743874075.85065555572509765625
using for fract 7898756447985647204206112758747465331350182124576571392
getting the part of 7898756447985647204206112758747465331350182124576571392 :: ad 55 and mad 58
    -----------------> 2810472637829026650743874075.85065555572509765625 ^2 ::== 7898756447985647204206112758747465331350182124576571392
t_ten increased 
using t_rst as 28104726378290266507438740758.506557464599609375
using for fract 789875644798564720420611275874746570913950075414818848768
getting the part of 789875644798564720420611275874746570913950075414818848768 :: ad 57 and mad 58
i push_back a near value of 28104726378290266507438740758
stopping with ad 57 and mad of 58
    -----------------> 28104726378290266507438740758.506557464599609375 ^2 ::== 789875644798564720420611275874746570913950075414818848768
t_ten increased 
breaking with xbrk of value 1

increasing the digits 16
-------------------------------------------------------
-------------------------------------------------------
times 16 7898756447985644 8760206759511303
main 88874948.37121225579902145846882441760630588864933870896223311319772619754076004 second 93595976.192950212746166648239284509618950431659930048675088976040115085197612643
main 7898756447985644 second 8760206759511303.000000000000000000867361737988403547205962240695953369140625
times of 1.0145302595137632886344960452449701188408995760768376265682672727874525194386163e-08
new times of 1.0145302595137632886344960452449701188408995760768376265682672727874525194386163e-08
using 87602067595113039949538577048 * 1.0145302595137632886344960452449701188408995760768376265682672727874525194386163e-08
888749483712122658931.2941308353096019345684908330440521240234375  with length of 64 and dot length 21 will move 43
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 888749483712122658931.2941308353096019345684908330440521240234375 ^2 ::== 789875644798564579422664663965007744073728
 temp fract 0 temp int 789875644798564579422664663965007744073728
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887494837121226589312.9413083530962467193603515625
using for fract 78987564479856457942266466396500786755403776
getting the part of 78987564479856457942266466396500786755403776 :: ad 44 and mad 58
    -----------------> 8887494837121226589312.9413083530962467193603515625 ^2 ::== 78987564479856457942266466396500786755403776
t_ten increased 
using t_rst as 88874948371212265893129.413083530962467193603515625
using for fract 7898756447985645794226646639650078503741685760
getting the part of 7898756447985645794226646639650078503741685760 :: ad 46 and mad 58
    -----------------> 88874948371212265893129.413083530962467193603515625 ^2 ::== 7898756447985645794226646639650078503741685760
t_ten increased 
using t_rst as 888749483712122658931294.13083530962467193603515625
using for fract 789875644798564579422664663965007828383936020480
getting the part of 789875644798564579422664663965007828383936020480 :: ad 48 and mad 58
    -----------------> 888749483712122658931294.13083530962467193603515625 ^2 ::== 789875644798564579422664663965007828383936020480
t_ten increased 
using t_rst as 8887494837121226589312941.3083530962467193603515625
using for fract 78987564479856457942266466396500787341993229418496
getting the part of 78987564479856457942266466396500787341993229418496 :: ad 50 and mad 58
    -----------------> 8887494837121226589312941.3083530962467193603515625 ^2 ::== 78987564479856457942266466396500787341993229418496
t_ten increased 
using t_rst as 88874948371212265893129413.083530962467193603515625
using for fract 7898756447985645794226646639650078409940149771173888
getting the part of 7898756447985645794226646639650078409940149771173888 :: ad 52 and mad 58
    -----------------> 88874948371212265893129413.083530962467193603515625 ^2 ::== 7898756447985645794226646639650078409940149771173888
t_ten increased 
using t_rst as 888749483712122658931294130.83530962467193603515625
using for fract 789875644798564579422664663965007804100526829698285568
getting the part of 789875644798564579422664663965007804100526829698285568 :: ad 54 and mad 58
    -----------------> 888749483712122658931294130.83530962467193603515625 ^2 ::== 789875644798564579422664663965007804100526829698285568
t_ten increased 
using t_rst as 8887494837121226589312941308.35309600830078125
using for fract 78987564479856457942266466396500776277982010458888994816
getting the part of 78987564479856457942266466396500776277982010458888994816 :: ad 56 and mad 58
    -----------------> 8887494837121226589312941308.35309600830078125 ^2 ::== 78987564479856457942266466396500776277982010458888994816
t_ten increased 
using t_rst as 88874948371212265893129413083.5309600830078125
using for fract 7898756447985645794226646639650077778913928497717546319872
getting the part of 7898756447985645794226646639650077778913928497717546319872 :: ad 58 and mad 58
i push_back a near value of 88874948371212265893129413083
stopping with ad 58 and mad of 58
    -----------------> 88874948371212265893129413083.5309600830078125 ^2 ::== 7898756447985645794226646639650077778913928497717546319872
t_ten increased 
breaking with xbrk of value 1

increasing the digits 17
-------------------------------------------------------
-------------------------------------------------------
times 17 78987564479856441 87602067595113039
main 281047263.78290260984869207477766231261750329492035086614842853691698110196739435 second 295976464.59661795041251493099392164685832621402652303777003339746443089097738266
main 78987564479856441.00000000000000001387778780781445675529539585113525390625 second 87602067595113039
times of 3.2082263752252017282704980566103994036889944430510991972195277854554507743723437e-09
new times of 3.2082263752252017282704980566103994036889944430510991972195277854554507743723437e-09
using 87602067595113039949538577048 * 3.2082263752252017282704980566103994036889944430510991972195277854554507743723437e-09
281047263782902612895.026781956863288769454811699688434600830078125  with length of 66 and dot length 21 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 281047263782902612895.026781956863288769454811699688434600830078125 ^2 ::== 78987564479856442712328068039208574386176
 temp fract 0 temp int 78987564479856442712328068039208574386176
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810472637829026128950.267819568633058224804699420928955078125
using for fract 7898756447985644271232806803920858445250560
getting the part of 7898756447985644271232806803920858445250560 :: ad 43 and mad 58
    -----------------> 2810472637829026128950.267819568633058224804699420928955078125 ^2 ::== 7898756447985644271232806803920858445250560
t_ten increased 
using t_rst as 28104726378290261289502.67819568633058224804699420928955078125
using for fract 789875644798564427123280680392085827345186816
getting the part of 789875644798564427123280680392085827345186816 :: ad 45 and mad 58
    -----------------> 28104726378290261289502.67819568633058224804699420928955078125 ^2 ::== 789875644798564427123280680392085827345186816
t_ten increased 
using t_rst as 281047263782902612895026.7819568632985465228557586669921875
using for fract 78987564479856442712328068039208585483297751040
getting the part of 78987564479856442712328068039208585483297751040 :: ad 47 and mad 58
    -----------------> 281047263782902612895026.7819568632985465228557586669921875 ^2 ::== 78987564479856442712328068039208585483297751040
t_ten increased 
using t_rst as 2810472637829026128950267.819568633101880550384521484375
using for fract 7898756447985644271232806803920858618698519281664
getting the part of 7898756447985644271232806803920858618698519281664 :: ad 49 and mad 58
    -----------------> 2810472637829026128950267.819568633101880550384521484375 ^2 ::== 7898756447985644271232806803920858618698519281664
t_ten increased 
using t_rst as 28104726378290261289502678.1956863291561603546142578125
using for fract 789875644798564427123280680392085735769062361792512
getting the part of 789875644798564427123280680392085735769062361792512 :: ad 51 and mad 58
    -----------------> 28104726378290261289502678.1956863291561603546142578125 ^2 ::== 789875644798564427123280680392085735769062361792512
t_ten increased 
using t_rst as 281047263782902612895026781.95686328411102294921875
using for fract 78987564479856442712328068039208572423984731572404224
getting the part of 78987564479856442712328068039208572423984731572404224 :: ad 53 and mad 58
    -----------------> 281047263782902612895026781.95686328411102294921875 ^2 ::== 78987564479856442712328068039208572423984731572404224
t_ten increased 
using t_rst as 2810472637829026128950267819.56863307952880859375
using for fract 7898756447985644271232806803920859492901250149805719552
getting the part of 7898756447985644271232806803920859492901250149805719552 :: ad 55 and mad 58
    -----------------> 2810472637829026128950267819.56863307952880859375 ^2 ::== 7898756447985644271232806803920859492901250149805719552
t_ten increased 
using t_rst as 28104726378290261289502678195.686328887939453125
using for fract 789875644798564427123280680392085717894167354367956484096
getting the part of 789875644798564427123280680392085717894167354367956484096 :: ad 57 and mad 58
i push_back a near value of 28104726378290261289502678195
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261289502678195.686328887939453125 ^2 ::== 789875644798564427123280680392085717894167354367956484096
t_ten increased 
breaking with xbrk of value 1

increasing the digits 18
-------------------------------------------------------
-------------------------------------------------------
times 18 789875644798564414 876020675951130399
main 888749483.71212256586644982114931020597322991621288927610589070127389277331531048 second 935959761.92950218034855544218598170229517103563330986115698095773041131906211376
main 789875644798564414 second 876020675951130399
times of 1.0145302595137631829723090712868710166521484052662859371364224533006332694498255e-09
new times of 1.0145302595137631829723090712868710166521484052662859371364224533006332694498255e-09
using 87602067595113039949538577048 * 1.0145302595137631829723090712868710166521484052662859371364224533006332694498255e-09
88874948371212256636.9033675433810088861719123087823390960693359375  with length of 66 and dot length 20 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 88874948371212256636.9033675433810088861719123087823390960693359375 ^2 ::== 7898756447985644148933422820347958263808
 temp fract 0 temp int 7898756447985644148933422820347958263808
before loop xstp is 0entering tens with lap of value 10
using t_rst as 888749483712122566369.0336754338101172834285534918308258056640625
using for fract 789875644798564414893342282034795872518144
getting the part of 789875644798564414893342282034795872518144 :: ad 42 and mad 58
    -----------------> 888749483712122566369.0336754338101172834285534918308258056640625 ^2 ::== 789875644798564414893342282034795872518144
t_ten increased 
using t_rst as 8887494837121225663690.336754338100945460610091686248779296875
using for fract 78987564479856441489334228203479582956847104
getting the part of 78987564479856441489334228203479582956847104 :: ad 44 and mad 58
    -----------------> 8887494837121225663690.336754338100945460610091686248779296875 ^2 ::== 78987564479856441489334228203479582956847104
t_ten increased 
using t_rst as 88874948371212256636903.367543381013092584908008575439453125
using for fract 7898756447985644148933422820347958501843140608
getting the part of 7898756447985644148933422820347958501843140608 :: ad 46 and mad 58
    -----------------> 88874948371212256636903.367543381013092584908008575439453125 ^2 ::== 7898756447985644148933422820347958501843140608
t_ten increased 
using t_rst as 888749483712122566369033.67543381010182201862335205078125
using for fract 789875644798564414893342282034795880970639638528
getting the part of 789875644798564414893342282034795880970639638528 :: ad 48 and mad 58
    -----------------> 888749483712122566369033.67543381010182201862335205078125 ^2 ::== 789875644798564414893342282034795880970639638528
t_ten increased 
using t_rst as 8887494837121225663690336.75433810055255889892578125
using for fract 78987564479856441489334228203479578526914755690496
getting the part of 78987564479856441489334228203479578526914755690496 :: ad 50 and mad 58
    -----------------> 8887494837121225663690336.75433810055255889892578125 ^2 ::== 78987564479856441489334228203479578526914755690496
t_ten increased 
using t_rst as 88874948371212256636903367.5433810055255889892578125
using for fract 7898756447985644148933422820347957888720272588013568
getting the part of 7898756447985644148933422820347957888720272588013568 :: ad 52 and mad 58
    -----------------> 88874948371212256636903367.5433810055255889892578125 ^2 ::== 7898756447985644148933422820347957888720272588013568
t_ten increased 
using t_rst as 888749483712122566369033675.43381011486053466796875
using for fract 789875644798564414893342282034795788872027258801356800
getting the part of 789875644798564414893342282034795788872027258801356800 :: ad 54 and mad 58
    -----------------> 888749483712122566369033675.43381011486053466796875 ^2 ::== 789875644798564414893342282034795788872027258801356800
t_ten increased 
using t_rst as 8887494837121225663690336754.338100433349609375
using for fract 78987564479856441489334228203479572393948811934373511168
getting the part of 78987564479856441489334228203479572393948811934373511168 :: ad 56 and mad 58
    -----------------> 8887494837121225663690336754.338100433349609375 ^2 ::== 78987564479856441489334228203479572393948811934373511168
t_ten increased 
using t_rst as 88874948371212256636903367543.381011962890625
using for fract 7898756447985644148933422820347959090562542478338274885632
getting the part of 7898756447985644148933422820347959090562542478338274885632 :: ad 58 and mad 58
i push_back a near value of 88874948371212256636903367543
stopping with ad 58 and mad of 58
    -----------------> 88874948371212256636903367543.381011962890625 ^2 ::== 7898756447985644148933422820347959090562542478338274885632
t_ten increased 
breaking with xbrk of value 1

increasing the digits 19
-------------------------------------------------------
-------------------------------------------------------
times 19 7898756447985644142 8760206759511303994
main 2810472637.8290261059589735681241755814748804818796468207864336363854818046092987 second 2959764645.9661795200047903023592123907636091610477702129600174885126762092113495
main 7898756447985644142.00000000000000088817841970012523233890533447265625 second 8760206759511303994.00000000000000088817841970012523233890533447265625
times of 3.2082263752252017023746764972173623077675290922041092320053723754729665458194519e-10
new times of 3.2082263752252017023746764972173623077675290922041092320053723754729665458194519e-10
using 87602067595113039949538577048 * 3.2082263752252017023746764972173623077675290922041092320053723754729665458194519e-10
28104726378290261062.64992712799288909764072741381824016571044921875  with length of 67 and dot length 20 will move 47
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 28104726378290261062.64992712799288909764072741381824016571044921875 ^2 ::== 789875644798564414372011686552249696256
 temp fract 0 temp int 789875644798564414372011686552249696256
before loop xstp is 0entering tens with lap of value 10
using t_rst as 281047263782902610626.49927127992890518726198934018611907958984375
using for fract 78987564479856441437201168655224978538496
getting the part of 78987564479856441437201168655224978538496 :: ad 41 and mad 58
    -----------------> 281047263782902610626.49927127992890518726198934018611907958984375 ^2 ::== 78987564479856441437201168655224978538496
t_ten increased 
using t_rst as 2810472637829026106264.99271279928871081210672855377197265625
using for fract 7898756447985644143720116865522496511672320
getting the part of 7898756447985644143720116865522496511672320 :: ad 43 and mad 58
    -----------------> 2810472637829026106264.99271279928871081210672855377197265625 ^2 ::== 7898756447985644143720116865522496511672320
t_ten increased 
using t_rst as 28104726378290261062649.92712799289074609987437725067138671875
using for fract 789875644798564414372011686552249810081021952
getting the part of 789875644798564414372011686552249810081021952 :: ad 45 and mad 58
    -----------------> 28104726378290261062649.92712799289074609987437725067138671875 ^2 ::== 789875644798564414372011686552249810081021952
t_ten increased 
using t_rst as 281047263782902610626499.27127992888563312590122222900390625
using for fract 78987564479856441437201168655224972212009172992
getting the part of 78987564479856441437201168655224972212009172992 :: ad 47 and mad 58
    -----------------> 281047263782902610626499.27127992888563312590122222900390625 ^2 ::== 78987564479856441437201168655224972212009172992
t_ten increased 
using t_rst as 2810472637829026106264992.7127992887981235980987548828125
using for fract 7898756447985644143720116865522496869357196410880
getting the part of 7898756447985644143720116865522496869357196410880 :: ad 49 and mad 58
    -----------------> 2810472637829026106264992.7127992887981235980987548828125 ^2 ::== 7898756447985644143720116865522496869357196410880
t_ten increased 
using t_rst as 28104726378290261062649927.127992890775203704833984375
using for fract 789875644798564414372011686552249831050907716943872
getting the part of 789875644798564414372011686552249831050907716943872 :: ad 51 and mad 58
    -----------------> 28104726378290261062649927.127992890775203704833984375 ^2 ::== 789875644798564414372011686552249831050907716943872
t_ten increased 
using t_rst as 281047263782902610626499271.2799288928508758544921875
using for fract 78987564479856441437201168655224976764022496356728832
getting the part of 78987564479856441437201168655224976764022496356728832 :: ad 53 and mad 58
    -----------------> 281047263782902610626499271.2799288928508758544921875 ^2 ::== 78987564479856441437201168655224976764022496356728832
t_ten increased 
using t_rst as 2810472637829026106264992712.79928874969482421875
using for fract 7898756447985644143720116865522496680278069655357095936
getting the part of 7898756447985644143720116865522496680278069655357095936 :: ad 55 and mad 58
    -----------------> 2810472637829026106264992712.79928874969482421875 ^2 ::== 7898756447985644143720116865522496680278069655357095936
t_ten increased 
using t_rst as 28104726378290261062649927127.992889404296875
using for fract 789875644798564414372011686552249767197503105798259081216
getting the part of 789875644798564414372011686552249767197503105798259081216 :: ad 57 and mad 58
i push_back a near value of 28104726378290261062649927127
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261062649927127.992889404296875 ^2 ::== 789875644798564414372011686552249767197503105798259081216
t_ten increased 
breaking with xbrk of value 1

increasing the digits 20
-------------------------------------------------------
-------------------------------------------------------
times 20 78987564479856441421 87602067595113039949
main 8887494837.1212256598459334969622617315742775360477845314477463034563697874546051 second 9359597619.29502180610318831986978010372468035800441743532473992672748863697052
main 78987564479856441421 second 87602067595113039949
times of 1.0145302595137631825396979366200341304124264651413390189394695891730110653624854e-10
new times of 1.0145302595137631825396979366200341304124264651413390189394695891730110653624854e-10
using 87602067595113039949538577048 * 1.0145302595137631825396979366200341304124264651413390189394695891730110653624854e-10
8887494837121225659.90057376818982159960569333634339272975921630859375  with length of 69 and dot length 19 will move 50
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 8887494837121225659.90057376818982159960569333634339272975921630859375 ^2 ::== 78987564479856441421971230256867680256
 temp fract 0 temp int 78987564479856441421971230256867680256
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88874948371212256599.00573768189821066698641516268253326416015625
using for fract 7898756447985644142197123025686766813184
getting the part of 7898756447985644142197123025686766813184 :: ad 40 and mad 58
    -----------------> 88874948371212256599.00573768189821066698641516268253326416015625 ^2 ::== 7898756447985644142197123025686766813184
t_ten increased 
using t_rst as 888749483712122565990.0573768189821066698641516268253326416015625
using for fract 789875644798564414219712302568676735844352
getting the part of 789875644798564414219712302568676735844352 :: ad 42 and mad 58
    -----------------> 888749483712122565990.0573768189821066698641516268253326416015625 ^2 ::== 789875644798564414219712302568676735844352
t_ten increased 
using t_rst as 8887494837121225659900.5737681898217488196678459644317626953125
using for fract 78987564479856441421971230256867677879402496
getting the part of 78987564479856441421971230256867677879402496 :: ad 44 and mad 58
    -----------------> 8887494837121225659900.5737681898217488196678459644317626953125 ^2 ::== 78987564479856441421971230256867677879402496
t_ten increased 
using t_rst as 88874948371212256599005.737681898215669207274913787841796875
using for fract 7898756447985644142197123025686768200257110016
getting the part of 7898756447985644142197123025686768200257110016 :: ad 46 and mad 58
    -----------------> 88874948371212256599005.737681898215669207274913787841796875 ^2 ::== 7898756447985644142197123025686768200257110016
t_ten increased 
using t_rst as 888749483712122565990057.37681898218579590320587158203125
using for fract 789875644798564414219712302568676890394455179264
getting the part of 789875644798564414219712302568676890394455179264 :: ad 48 and mad 58
    -----------------> 888749483712122565990057.37681898218579590320587158203125 ^2 ::== 789875644798564414219712302568676890394455179264
t_ten increased 
using t_rst as 8887494837121225659900573.7681898213922977447509765625
using for fract 78987564479856441421971230256867672150946915287040
getting the part of 78987564479856441421971230256867672150946915287040 :: ad 50 and mad 58
    -----------------> 8887494837121225659900573.7681898213922977447509765625 ^2 ::== 78987564479856441421971230256867672150946915287040
t_ten increased 
using t_rst as 88874948371212256599005737.68189822137355804443359375
using for fract 7898756447985644142197123025686768692275369306226688
getting the part of 7898756447985644142197123025686768692275369306226688 :: ad 52 and mad 58
    -----------------> 88874948371212256599005737.68189822137355804443359375 ^2 ::== 7898756447985644142197123025686768692275369306226688
t_ten increased 
using t_rst as 888749483712122565990057376.81898212432861328125
using for fract 789875644798564414219712302568676753935386469937971200
getting the part of 789875644798564414219712302568676753935386469937971200 :: ad 54 and mad 58
    -----------------> 888749483712122565990057376.81898212432861328125 ^2 ::== 789875644798564414219712302568676753935386469937971200
t_ten increased 
using t_rst as 8887494837121225659900573768.1898212432861328125
using for fract 78987564479856441421971230256867667129397301971917996032
getting the part of 78987564479856441421971230256867667129397301971917996032 :: ad 56 and mad 58
    -----------------> 8887494837121225659900573768.1898212432861328125 ^2 ::== 78987564479856441421971230256867667129397301971917996032
t_ten increased 
using t_rst as 88874948371212256599005737681.8982086181640625
using for fract 7898756447985644142197123025686766297371479704663020797952
getting the part of 7898756447985644142197123025686766297371479704663020797952 :: ad 58 and mad 58
i push_back a near value of 88874948371212256599005737681
stopping with ad 58 and mad of 58
    -----------------> 88874948371212256599005737681.8982086181640625 ^2 ::== 7898756447985644142197123025686766297371479704663020797952
t_ten increased 
breaking with xbrk of value 1

increasing the digits 21
-------------------------------------------------------
-------------------------------------------------------
times 21 789875644798564414214 876020675951130399495
main 28104726378.290261059838804108586672399788361129645275493516010101302526891231537 second 29597646459.661795201652760357932440334506330988431632711410657066153362393379211
main 789875644798564414214 second 876020675951130399495
times of 3.208226375225201702055192413570556526624471895951801242778044765511272295005786e-11
new times of 3.208226375225201702055192413570556526624471895951801242778044765511272295005786e-11
using 87602067595113039949538577048 * 3.208226375225201702055192413570556526624471895951801242778044765511272295005786e-11
2810472637829026105.985118049887386604268613154999911785125732421875  with length of 67 and dot length 19 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 2810472637829026105.985118049887386604268613154999911785125732421875 ^2 ::== 7898756447985644142146956701251449856
 temp fract 0 temp int 7898756447985644142146956701251449856
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28104726378290261059.85118049887386604268613154999911785125732421875
using for fract 789875644798564414214695670125144965120
getting the part of 789875644798564414214695670125144965120 :: ad 39 and mad 58
    -----------------> 28104726378290261059.85118049887386604268613154999911785125732421875 ^2 ::== 789875644798564414214695670125144965120
t_ten increased 
using t_rst as 281047263782902610598.51180498873867463771603070199489593505859375
using for fract 78987564479856441421469567012514511716352
getting the part of 78987564479856441421469567012514511716352 :: ad 41 and mad 58
    -----------------> 281047263782902610598.51180498873867463771603070199489593505859375 ^2 ::== 78987564479856441421469567012514511716352
t_ten increased 
using t_rst as 2810472637829026105985.1180498873864053166471421718597412109375
using for fract 7898756447985644142146956701251449091260416
getting the part of 7898756447985644142146956701251449091260416 :: ad 43 and mad 58
    -----------------> 2810472637829026105985.1180498873864053166471421718597412109375 ^2 ::== 7898756447985644142146956701251449091260416
t_ten increased 
using t_rst as 28104726378290261059851.1804988738658721558749675750732421875
using for fract 789875644798564414214695670125145020795191296
getting the part of 789875644798564414214695670125145020795191296 :: ad 45 and mad 58
    -----------------> 28104726378290261059851.1804988738658721558749675750732421875 ^2 ::== 789875644798564414214695670125145020795191296
t_ten increased 
using t_rst as 281047263782902610598511.8049887386732734739780426025390625
using for fract 78987564479856441421469567012514505378054012928
getting the part of 78987564479856441421469567012514505378054012928 :: ad 47 and mad 58
    -----------------> 281047263782902610598511.8049887386732734739780426025390625 ^2 ::== 78987564479856441421469567012514505378054012928
t_ten increased 
using t_rst as 2810472637829026105985118.0498873866163194179534912109375
using for fract 7898756447985644142146956701251449798933587427328
getting the part of 7898756447985644142146956701251449798933587427328 :: ad 49 and mad 58
    -----------------> 2810472637829026105985118.0498873866163194179534912109375 ^2 ::== 7898756447985644142146956701251449798933587427328
t_ten increased 
using t_rst as 28104726378290261059851180.498873867094516754150390625
using for fract 789875644798564414214695670125145015922155761696768
getting the part of 789875644798564414214695670125145015922155761696768 :: ad 51 and mad 58
    -----------------> 28104726378290261059851180.498873867094516754150390625 ^2 ::== 789875644798564414214695670125145015922155761696768
t_ten increased 
using t_rst as 281047263782902610598511804.98873865604400634765625
using for fract 78987564479856441421469567012514499286372566955982848
getting the part of 78987564479856441421469567012514499286372566955982848 :: ad 53 and mad 58
    -----------------> 281047263782902610598511804.98873865604400634765625 ^2 ::== 78987564479856441421469567012514499286372566955982848
t_ten increased 
using t_rst as 2810472637829026105985118049.887386798858642578125
using for fract 7898756447985644142146956701251451109228877413009588224
getting the part of 7898756447985644142146956701251451109228877413009588224 :: ad 55 and mad 58
    -----------------> 2810472637829026105985118049.887386798858642578125 ^2 ::== 7898756447985644142146956701251451109228877413009588224
t_ten increased 
using t_rst as 28104726378290261059851180498.873867034912109375
using for fract 789875644798564414214695670125145073143955878343797112832
getting the part of 789875644798564414214695670125145073143955878343797112832 :: ad 57 and mad 58
i push_back a near value of 28104726378290261059851180498
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261059851180498.873867034912109375 ^2 ::== 789875644798564414214695670125145073143955878343797112832
t_ten increased 
breaking with xbrk of value 1

increasing the digits 22
-------------------------------------------------------
-------------------------------------------------------
times 22 7898756447985644142144 8760206759511303994953
main 88874948371.212256598706873791339964902890409450403330637868748453911393880844116 second 93595976192.95021806131501502848255221983888359899017572729462699498981237411499
main 7898756447985644142143.9999999999990905052982270717620849609375 second 8760206759511303994953
times of 1.0145302595137631825363856607367063288135897047955043541270724859171334414751748e-11
new times of 1.0145302595137631825363856607367063288135897047955043541270724859171334414751748e-11
using 87602067595113039949538577048 * 1.0145302595137631825363856607367063288135897047955043541270724859171334414751748e-11
888749483712122565.98715575466073268717792643656139262020587921142578125  with length of 71 and dot length 18 will move 53
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 888749483712122565.98715575466073268717792643656139262020587921142578125 ^2 ::== 789875644798564414214554672178532992
 temp fract 0 temp int 789875644798564414214554672178532992
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887494837121225659.87155754660732664973465944058261811733245849609375
using for fract 78987564479856441421455467217853300736
getting the part of 78987564479856441421455467217853300736 :: ad 38 and mad 58
    -----------------> 8887494837121225659.87155754660732664973465944058261811733245849609375 ^2 ::== 78987564479856441421455467217853300736
t_ten increased 
using t_rst as 88874948371212256598.7155754660732753791307914070785045623779296875
using for fract 7898756447985644142145546721785331843072
getting the part of 7898756447985644142145546721785331843072 :: ad 40 and mad 58
    -----------------> 88874948371212256598.7155754660732753791307914070785045623779296875 ^2 ::== 7898756447985644142145546721785331843072
t_ten increased 
using t_rst as 888749483712122565987.1557546607326685261796228587627410888671875
using for fract 789875644798564414214554672178532945231872
getting the part of 789875644798564414214554672178532945231872 :: ad 42 and mad 58
    -----------------> 888749483712122565987.1557546607326685261796228587627410888671875 ^2 ::== 789875644798564414214554672178532945231872
t_ten increased 
using t_rst as 8887494837121225659871.5575466073269126354716718196868896484375
using for fract 78987564479856441421455467217853306334347264
getting the part of 78987564479856441421455467217853306334347264 :: ad 44 and mad 58
    -----------------> 8887494837121225659871.5575466073269126354716718196868896484375 ^2 ::== 78987564479856441421455467217853306334347264
t_ten increased 
using t_rst as 88874948371212256598715.57546607326366938650608062744140625
using for fract 7898756447985644142145546721785329396484145152
getting the part of 7898756447985644142145546721785329396484145152 :: ad 46 and mad 58
    -----------------> 88874948371212256598715.57546607326366938650608062744140625 ^2 ::== 7898756447985644142145546721785329396484145152
t_ten increased 
using t_rst as 888749483712122565987155.754660732694901525974273681640625
using for fract 789875644798564414214554672178533102376135426048
getting the part of 789875644798564414214554672178533102376135426048 :: ad 48 and mad 58
    -----------------> 888749483712122565987155.754660732694901525974273681640625 ^2 ::== 789875644798564414214554672178533102376135426048
t_ten increased 
using t_rst as 8887494837121225659871557.5466073267161846160888671875
using for fract 78987564479856441421455467217853298978614474178560
getting the part of 78987564479856441421455467217853298978614474178560 :: ad 50 and mad 58
    -----------------> 8887494837121225659871557.5466073267161846160888671875 ^2 ::== 78987564479856441421455467217853298978614474178560
t_ten increased 
using t_rst as 88874948371212256598715575.4660732746124267578125
using for fract 7898756447985644142145546721785331086811749043666944
getting the part of 7898756447985644142145546721785331086811749043666944 :: ad 52 and mad 58
    -----------------> 88874948371212256598715575.4660732746124267578125 ^2 ::== 7898756447985644142145546721785331086811749043666944
t_ten increased 
using t_rst as 888749483712122565987155754.660732746124267578125
using for fract 789875644798564414214554672178533071787686756947591168
getting the part of 789875644798564414214554672178533071787686756947591168 :: ad 54 and mad 58
    -----------------> 888749483712122565987155754.660732746124267578125 ^2 ::== 789875644798564414214554672178533071787686756947591168
t_ten increased 
using t_rst as 8887494837121225659871557546.607326507568359375
using for fract 78987564479856441421455467217853297734035709955468689408
getting the part of 78987564479856441421455467217853297734035709955468689408 :: ad 56 and mad 58
    -----------------> 8887494837121225659871557546.607326507568359375 ^2 ::== 78987564479856441421455467217853297734035709955468689408
t_ten increased 
using t_rst as 88874948371212256598715575466.073272705078125
using for fract 7898756447985644142145546721785331435676572965661984161792
getting the part of 7898756447985644142145546721785331435676572965661984161792 :: ad 58 and mad 58
i push_back a near value of 88874948371212256598715575466
stopping with ad 58 and mad of 58
    -----------------> 88874948371212256598715575466.073272705078125 ^2 ::== 7898756447985644142145546721785331435676572965661984161792
t_ten increased 
breaking with xbrk of value 1

increasing the digits 23
-------------------------------------------------------
-------------------------------------------------------
times 23 78987564479856441421441 87602067595113039949538
main 281047263782.90261059846098255387485497958804415985500924080042750574648380279541 second 295976464596.61795201659179787269804525124457933449306779039034154266119003295898
main 78987564479856441421440.999999999985448084771633148193359375 second 87602067595113039949538.000000000014551915228366851806640625
times of 3.2082263752252017020546333955519771308722633500236945231883682257408596615299297e-12
new times of 3.2082263752252017020546333955519771308722633500236945231883682257408596615299297e-12
using 87602067595113039949538577048 * 3.2082263752252017020546333955519771308722633500236945231883682257408596615299297e-12
281047263782902610.59846283385448817426777168293483555316925048828125  with length of 68 and dot length 18 will move 50
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 281047263782902610.59846283385448817426777168293483555316925048828125 ^2 ::== 78987564479856441421442040605943616
 temp fract 0 temp int 78987564479856441421442040605943616
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810472637829026105.9846283385448817426777168293483555316925048828125
using for fract 7898756447985644142144204060594361344
getting the part of 7898756447985644142144204060594361344 :: ad 37 and mad 58
    -----------------> 2810472637829026105.9846283385448817426777168293483555316925048828125 ^2 ::== 7898756447985644142144204060594361344
t_ten increased 
using t_rst as 28104726378290261059.846283385448817426777168293483555316925048828125
using for fract 789875644798564414214420406059436081152
getting the part of 789875644798564414214420406059436081152 :: ad 39 and mad 58
    -----------------> 28104726378290261059.846283385448817426777168293483555316925048828125 ^2 ::== 789875644798564414214420406059436081152
t_ten increased 
using t_rst as 281047263782902610598.4628338544881671623443253338336944580078125
using for fract 78987564479856441421442040605943611260928
getting the part of 78987564479856441421442040605943611260928 :: ad 41 and mad 58
    -----------------> 281047263782902610598.4628338544881671623443253338336944580078125 ^2 ::== 78987564479856441421442040605943611260928
t_ten increased 
using t_rst as 2810472637829026105984.62833854488189899711869657039642333984375
using for fract 7898756447985644142144204060594362636042240
getting the part of 7898756447985644142144204060594362636042240 :: ad 43 and mad 58
    -----------------> 2810472637829026105984.62833854488189899711869657039642333984375 ^2 ::== 7898756447985644142144204060594362636042240
t_ten increased 
using t_rst as 28104726378290261059846.28338544881626148708164691925048828125
using for fract 789875644798564414214420406059436087510564864
getting the part of 789875644798564414214420406059436087510564864 :: ad 45 and mad 58
    -----------------> 28104726378290261059846.28338544881626148708164691925048828125 ^2 ::== 789875644798564414214420406059436087510564864
t_ten increased 
using t_rst as 281047263782902610598462.83385448818444274365901947021484375
using for fract 78987564479856441421442040605943615348126253056
getting the part of 78987564479856441421442040605943615348126253056 :: ad 47 and mad 58
    -----------------> 281047263782902610598462.83385448818444274365901947021484375 ^2 ::== 78987564479856441421442040605943615348126253056
t_ten increased 
using t_rst as 2810472637829026105984628.338544881902635097503662109375
using for fract 7898756447985644142144204060594362625528160059392
getting the part of 7898756447985644142144204060594362625528160059392 :: ad 49 and mad 58
    -----------------> 2810472637829026105984628.338544881902635097503662109375 ^2 ::== 7898756447985644142144204060594362625528160059392
t_ten increased 
using t_rst as 28104726378290261059846283.3854488171637058258056640625
using for fract 789875644798564414214420406059436145459225694306304
getting the part of 789875644798564414214420406059436145459225694306304 :: ad 51 and mad 58
    -----------------> 28104726378290261059846283.3854488171637058258056640625 ^2 ::== 789875644798564414214420406059436145459225694306304
t_ten increased 
using t_rst as 281047263782902610598462833.8544881641864776611328125
using for fract 78987564479856441421442040605943607628393541789548544
getting the part of 78987564479856441421442040605943607628393541789548544 :: ad 53 and mad 58
    -----------------> 281047263782902610598462833.8544881641864776611328125 ^2 ::== 78987564479856441421442040605943607628393541789548544
t_ten increased 
using t_rst as 2810472637829026105984628338.5448818206787109375
using for fract 7898756447985644142144204060594362238578880075718983680
getting the part of 7898756447985644142144204060594362238578880075718983680 :: ad 55 and mad 58
    -----------------> 2810472637829026105984628338.5448818206787109375 ^2 ::== 7898756447985644142144204060594362238578880075718983680
t_ten increased 
using t_rst as 28104726378290261059846283385.448818206787109375
using for fract 789875644798564414214420406059436233302620973311188795392
getting the part of 789875644798564414214420406059436233302620973311188795392 :: ad 57 and mad 58
i push_back a near value of 28104726378290261059846283385
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261059846283385.448818206787109375 ^2 ::== 789875644798564414214420406059436233302620973311188795392
t_ten increased 
breaking with xbrk of value 1

increasing the digits 24
-------------------------------------------------------
-------------------------------------------------------
times 24 789875644798564414214412 876020675951130399495385
main 888749483712.12256598707548897217384053479104569217561504501645686104893684387207 second 935959761929.50218061319555821979099004932160094094584223967103753238916397094727
main 789875644798564414214412.000000000116415321826934814453125 second 876020675951130399495384.999999999883584678173065185546875
times of 1.0145302595137631825362949277032673116156516933915443178428770747157865375787835e-12
new times of 1.0145302595137631825362949277032673116156516933915443178428770747157865375787835e-12
using 87602067595113039949538577048 * 1.0145302595137631825362949277032673116156516933915443178428770747157865375787835e-12
88874948371212256.598707627064744840605925446652690880000591278076171875  with length of 71 and dot length 17 will move 54
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 88874948371212256.598707627064744840605925446652690880000591278076171875 ^2 ::== 7898756447985644142144133894269935
 temp fract 0 temp int 7898756447985644142144133894269935
before loop xstp is 0entering tens with lap of value 10
using t_rst as 888749483712122565.98707627064744840605925446652690880000591278076171875
using for fract 789875644798564414214413389426993536
getting the part of 789875644798564414214413389426993536 :: ad 36 and mad 58
    -----------------> 888749483712122565.98707627064744840605925446652690880000591278076171875 ^2 ::== 789875644798564414214413389426993536
t_ten increased 
using t_rst as 8887494837121225659.87076270647448428263714959030039608478546142578125
using for fract 78987564479856441421441338942699356160
getting the part of 78987564479856441421441338942699356160 :: ad 38 and mad 58
    -----------------> 8887494837121225659.87076270647448428263714959030039608478546142578125 ^2 ::== 78987564479856441421441338942699356160
t_ten increased 
using t_rst as 88874948371212256598.7076270647448410500146565027534961700439453125
using for fract 7898756447985644142144133894269935026176
getting the part of 7898756447985644142144133894269935026176 :: ad 40 and mad 58
    -----------------> 88874948371212256598.7076270647448410500146565027534961700439453125 ^2 ::== 7898756447985644142144133894269935026176
t_ten increased 
using t_rst as 888749483712122565987.07627064744838207843713462352752685546875
using for fract 789875644798564414214413389426993473257472
getting the part of 789875644798564414214413389426993473257472 :: ad 42 and mad 58
    -----------------> 888749483712122565987.07627064744838207843713462352752685546875 ^2 ::== 789875644798564414214413389426993473257472
t_ten increased 
using t_rst as 8887494837121225659870.7627064744838207843713462352752685546875
using for fract 78987564479856441421441338942699344104521728
getting the part of 78987564479856441421441338942699344104521728 :: ad 44 and mad 58
    -----------------> 8887494837121225659870.7627064744838207843713462352752685546875 ^2 ::== 78987564479856441421441338942699344104521728
t_ten increased 
using t_rst as 88874948371212256598707.627064744840026833117008209228515625
using for fract 7898756447985644142144133894269935235085893632
getting the part of 7898756447985644142144133894269935235085893632 :: ad 46 and mad 58
    -----------------> 88874948371212256598707.627064744840026833117008209228515625 ^2 ::== 7898756447985644142144133894269935235085893632
t_ten increased 
using t_rst as 888749483712122565987076.270647448371164500713348388671875
using for fract 789875644798564414214413389426993448741798674432
getting the part of 789875644798564414214413389426993448741798674432 :: ad 48 and mad 58
    -----------------> 888749483712122565987076.270647448371164500713348388671875 ^2 ::== 789875644798564414214413389426993448741798674432
t_ten increased 
using t_rst as 8887494837121225659870762.706474483944475650787353515625
using for fract 78987564479856441421441338942699344311229914021888
getting the part of 78987564479856441421441338942699344311229914021888 :: ad 50 and mad 58
    -----------------> 8887494837121225659870762.706474483944475650787353515625 ^2 ::== 78987564479856441421441338942699344311229914021888
t_ten increased 
using t_rst as 88874948371212256598707627.06474484503269195556640625
using for fract 7898756447985644142144133894269935908303669179711488
getting the part of 7898756447985644142144133894269935908303669179711488 :: ad 52 and mad 58
    -----------------> 88874948371212256598707627.06474484503269195556640625 ^2 ::== 7898756447985644142144133894269935908303669179711488
t_ten increased 
using t_rst as 888749483712122565987076270.64744842052459716796875
using for fract 789875644798564414214413389426993512431704604705554432
getting the part of 789875644798564414214413389426993512431704604705554432 :: ad 54 and mad 58
    -----------------> 888749483712122565987076270.64744842052459716796875 ^2 ::== 789875644798564414214413389426993512431704604705554432
t_ten increased 
using t_rst as 8887494837121225659870762706.47448444366455078125
using for fract 78987564479856441421441338942699354784945322622789353472
getting the part of 78987564479856441421441338942699354784945322622789353472 :: ad 56 and mad 58
    -----------------> 8887494837121225659870762706.47448444366455078125 ^2 ::== 78987564479856441421441338942699354784945322622789353472
t_ten increased 
using t_rst as 88874948371212256598707627064.744842529296875
using for fract 7898756447985644142144133894269935478494532262278935347200
getting the part of 7898756447985644142144133894269935478494532262278935347200 :: ad 58 and mad 58
i push_back a near value of 88874948371212256598707627064
stopping with ad 58 and mad of 58
    -----------------> 88874948371212256598707627064.744842529296875 ^2 ::== 7898756447985644142144133894269935478494532262278935347200
t_ten increased 
breaking with xbrk of value 1

increasing the digits 25
-------------------------------------------------------
-------------------------------------------------------
times 25 7898756447985644142144124 8760206759511303994953857
main 2810472637829.0261059846140952832176930183735036328229739410744514316320419311523 second 2959764645966.1795201659276078709863128481712818418358779126720037311315536499023
main 7898756447985644142144124.000000000931322574615478515625 second 8760206759511303994953857
times of 3.2082263752252017020546173946215723479965839002863088128482518931512579768114719e-13
new times of 3.2082263752252017020546173946215723479965839002863088128482518931512579768114719e-13
using 87602067595113039949538577048 * 3.2082263752252017020546173946215723479965839002863088128482518931512579768114719e-13
28104726378290261.0598461432139901251814340099599576205946505069732666015625  with length of 75 and dot length 17 will move 58
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 28104726378290261.0598461432139901251814340099599576205946505069732666015625 ^2 ::== 789875644798564414214412527098451
 temp fract 0 temp int 789875644798564414214412527098451
before loop xstp is 0entering tens with lap of value 10
using t_rst as 281047263782902610.5984614321399012448754461956923478282988071441650390625
using for fract 78987564479856441421441252709845088
getting the part of 78987564479856441421441252709845088 :: ad 35 and mad 58
    -----------------> 281047263782902610.5984614321399012448754461956923478282988071441650390625 ^2 ::== 78987564479856441421441252709845088
t_ten increased 
using t_rst as 2810472637829026105.984614321399012393243310725665651261806488037109375
using for fract 7898756447985644142144125270984508416
getting the part of 7898756447985644142144125270984508416 :: ad 37 and mad 58
    -----------------> 2810472637829026105.984614321399012393243310725665651261806488037109375 ^2 ::== 7898756447985644142144125270984508416
t_ten increased 
using t_rst as 28104726378290261059.84614321399012482061152695678174495697021484375
using for fract 789875644798564414214412527098450935808
getting the part of 789875644798564414214412527098450935808 :: ad 39 and mad 58
    -----------------> 28104726378290261059.84614321399012482061152695678174495697021484375 ^2 ::== 789875644798564414214412527098450935808
t_ten increased 
using t_rst as 281047263782902610598.4614321399012624169699847698211669921875
using for fract 78987564479856441421441252709845103017984
getting the part of 78987564479856441421441252709845103017984 :: ad 41 and mad 58
    -----------------> 281047263782902610598.4614321399012624169699847698211669921875 ^2 ::== 78987564479856441421441252709845103017984
t_ten increased 
using t_rst as 2810472637829026105984.614321399012624169699847698211669921875
using for fract 7898756447985644142144125270984509899145216
getting the part of 7898756447985644142144125270984509899145216 :: ad 43 and mad 58
    -----------------> 2810472637829026105984.614321399012624169699847698211669921875 ^2 ::== 7898756447985644142144125270984509899145216
t_ten increased 
using t_rst as 28104726378290261059846.14321399012624169699847698211669921875
using for fract 789875644798564414214412527098451041454129152
getting the part of 789875644798564414214412527098451041454129152 :: ad 45 and mad 58
    -----------------> 28104726378290261059846.14321399012624169699847698211669921875 ^2 ::== 789875644798564414214412527098451041454129152
t_ten increased 
using t_rst as 281047263782902610598461.43213990124058909714221954345703125
using for fract 78987564479856441421441252709845086003471056896
getting the part of 78987564479856441421441252709845086003471056896 :: ad 47 and mad 58
    -----------------> 281047263782902610598461.43213990124058909714221954345703125 ^2 ::== 78987564479856441421441252709845086003471056896
t_ten increased 
using t_rst as 2810472637829026105984614.32139901258051395416259765625
using for fract 7898756447985644142144125270984509655878268354560
getting the part of 7898756447985644142144125270984509655878268354560 :: ad 49 and mad 58
    -----------------> 2810472637829026105984614.32139901258051395416259765625 ^2 ::== 7898756447985644142144125270984509655878268354560
t_ten increased 
using t_rst as 28104726378290261059846143.2139901258051395416259765625
using for fract 789875644798564414214412527098450992609424599678976
getting the part of 789875644798564414214412527098450992609424599678976 :: ad 51 and mad 58
    -----------------> 28104726378290261059846143.2139901258051395416259765625 ^2 ::== 789875644798564414214412527098450992609424599678976
t_ten increased 
using t_rst as 281047263782902610598461432.1399012506008148193359375
using for fract 78987564479856441421441252709845095225717193843933184
getting the part of 78987564479856441421441252709845095225717193843933184 :: ad 53 and mad 58
    -----------------> 281047263782902610598461432.1399012506008148193359375 ^2 ::== 78987564479856441421441252709845095225717193843933184
t_ten increased 
using t_rst as 2810472637829026105984614321.39901256561279296875
using for fract 7898756447985644142144125270984510186654506037937176576
getting the part of 7898756447985644142144125270984510186654506037937176576 :: ad 55 and mad 58
    -----------------> 2810472637829026105984614321.39901256561279296875 ^2 ::== 7898756447985644142144125270984510186654506037937176576
t_ten increased 
using t_rst as 28104726378290261059846143213.990123748779296875
using for fract 789875644798564414214412527098450905328655014922232528896
getting the part of 789875644798564414214412527098450905328655014922232528896 :: ad 57 and mad 58
i push_back a near value of 28104726378290261059846143213
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261059846143213.990123748779296875 ^2 ::== 789875644798564414214412527098450905328655014922232528896
t_ten increased 
breaking with xbrk of value 1

increasing the digits 26
-------------------------------------------------------
-------------------------------------------------------
times 26 78987564479856441421441241 87602067595113039949538577
main 8887494837121.2256598707571963334853998002851871440554987202631309628486633300781 second 9359597619295.0218061319596956226067054583628301855924291885457932949066162109375
main 78987564479856441421441241 second 87602067595113039949538576.99999998509883880615234375
times of 1.0145302595137631825362942992624778579893956103355189014643604036664479068928822e-13
new times of 1.0145302595137631825362942992624778579893956103355189014643604036664479068928822e-13
using 87602067595113039949538577048 * 1.0145302595137631825362942992624778579893956103355189014643604036664479068928822e-13
8887494837121225.659870757201203232515662744361861768993549048900604248046875  with length of 76 and dot length 16 will move 60
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 8887494837121225.659870757201203232515662744361861768993549048900604248046875 ^2 ::== 78987564479856441421441241086559.6953125
 temp fract 0.6953125 temp int 78987564479856441421441241086559
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88874948371212256.59870757201203232689135091959542478434741497039794921875
using for fract 7898756447985644142144124108655970
getting the part of 7898756447985644142144124108655970 :: ad 34 and mad 58
    -----------------> 88874948371212256.59870757201203232689135091959542478434741497039794921875 ^2 ::== 7898756447985644142144124108655970
t_ten increased 
using t_rst as 888749483712122565.98707572012032329666908481158316135406494140625
using for fract 789875644798564414214412410865597056
getting the part of 789875644798564414214412410865597056 :: ad 36 and mad 58
    -----------------> 888749483712122565.98707572012032329666908481158316135406494140625 ^2 ::== 789875644798564414214412410865597056
t_ten increased 
using t_rst as 8887494837121225659.87075720120323207851242841570638120174407958984375
using for fract 78987564479856441421441241086559690752
getting the part of 78987564479856441421441241086559690752 :: ad 38 and mad 58
    -----------------> 8887494837121225659.87075720120323207851242841570638120174407958984375 ^2 ::== 78987564479856441421441241086559690752
t_ten increased 
using t_rst as 88874948371212256598.707572012032329666908481158316135406494140625
using for fract 7898756447985644142144124108655970746368
getting the part of 7898756447985644142144124108655970746368 :: ad 40 and mad 58
    -----------------> 88874948371212256598.707572012032329666908481158316135406494140625 ^2 ::== 7898756447985644142144124108655970746368
t_ten increased 
using t_rst as 888749483712122565987.075720120323239825665950775146484375
using for fract 789875644798564414214412410865596927836160
getting the part of 789875644798564414214412410865596927836160 :: ad 42 and mad 58
    -----------------> 888749483712122565987.075720120323239825665950775146484375 ^2 ::== 789875644798564414214412410865596927836160
t_ten increased 
using t_rst as 8887494837121225659870.75720120323239825665950775146484375
using for fract 78987564479856441421441241086559694931099648
getting the part of 78987564479856441421441241086559694931099648 :: ad 44 and mad 58
    -----------------> 8887494837121225659870.75720120323239825665950775146484375 ^2 ::== 78987564479856441421441241086559694931099648
t_ten increased 
using t_rst as 88874948371212256598707.5720120323239825665950775146484375
using for fract 7898756447985644142144124108655969974146301952
getting the part of 7898756447985644142144124108655969974146301952 :: ad 46 and mad 58
    -----------------> 88874948371212256598707.5720120323239825665950775146484375 ^2 ::== 7898756447985644142144124108655969974146301952
t_ten increased 
using t_rst as 888749483712122565987075.720120323239825665950775146484375
using for fract 789875644798564414214412410865596918249792995328
getting the part of 789875644798564414214412410865596918249792995328 :: ad 48 and mad 58
    -----------------> 888749483712122565987075.720120323239825665950775146484375 ^2 ::== 789875644798564414214412410865596918249792995328
t_ten increased 
using t_rst as 8887494837121225659870757.20120323263108730316162109375
using for fract 78987564479856441421441241086559703646928321380352
getting the part of 78987564479856441421441241086559703646928321380352 :: ad 50 and mad 58
    -----------------> 8887494837121225659870757.20120323263108730316162109375 ^2 ::== 78987564479856441421441241086559703646928321380352
t_ten increased 
using t_rst as 88874948371212256598707572.012032330036163330078125
using for fract 7898756447985644142144124108655970869095990403530752
getting the part of 7898756447985644142144124108655970869095990403530752 :: ad 52 and mad 58
    -----------------> 88874948371212256598707572.012032330036163330078125 ^2 ::== 7898756447985644142144124108655970869095990403530752
t_ten increased 
using t_rst as 888749483712122565987075720.12032330036163330078125
using for fract 789875644798564414214412410865597008510936727087480832
getting the part of 789875644798564414214412410865597008510936727087480832 :: ad 54 and mad 58
    -----------------> 888749483712122565987075720.12032330036163330078125 ^2 ::== 789875644798564414214412410865597008510936727087480832
t_ten increased 
using t_rst as 8887494837121225659870757201.20323276519775390625
using for fract 78987564479856441421441241086559703212276914143570690048
getting the part of 78987564479856441421441241086559703212276914143570690048 :: ad 56 and mad 58
    -----------------> 8887494837121225659870757201.20323276519775390625 ^2 ::== 78987564479856441421441241086559703212276914143570690048
t_ten increased 
using t_rst as 88874948371212256598707572012.032318115234375
using for fract 7898756447985644142144124108655968998965076210856409169920
getting the part of 7898756447985644142144124108655968998965076210856409169920 :: ad 58 and mad 58
i push_back a near value of 88874948371212256598707572012
stopping with ad 58 and mad of 58
    -----------------> 88874948371212256598707572012.032318115234375 ^2 ::== 7898756447985644142144124108655968998965076210856409169920
t_ten increased 
breaking with xbrk of value 1

increasing the digits 27
-------------------------------------------------------
-------------------------------------------------------
times 27 789875644798564414214412414 876020675951130399495385770
main 28104726378290.261059846141201900603166612124805823214046540670096874237060546875 second 29597646459661.795201659277261236318933446814982701766894024331122636795043945312
main 789875644798564414214412414 second 876020675951130399495385770
times of 3.2082263752252017020546171666942993219054059966255614114249942127713182632346848e-14
new times of 3.2082263752252017020546171666942993219054059966255614114249942127713182632346848e-14
using 87602067595113039949538577048 * 3.2082263752252017020546171666942993219054059966255614114249942127713182632346848e-14
2810472637829026.1059846141217300088781250178016080099041573703289031982421875  with length of 77 and dot length 16 will move 61
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 2810472637829026.1059846141217300088781250178016080099041573703289031982421875 ^2 ::== 7898756447985644142144124148655.966796875
 temp fract 0.966796875 temp int 7898756447985644142144124148655
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28104726378290261.0598461412173000896486119160044836462475359439849853515625
using for fract 789875644798564414214412414865596.75
getting the part of 789875644798564414214412414865596.75 :: ad 33 and mad 58
    -----------------> 28104726378290261.0598461412173000896486119160044836462475359439849853515625 ^2 ::== 789875644798564414214412414865596.75
t_ten increased 
using t_rst as 281047263782902610.5984614121730008895472252561376080848276615142822265625
using for fract 78987564479856441421441241486559672
getting the part of 78987564479856441421441241486559672 :: ad 35 and mad 58
    -----------------> 281047263782902610.5984614121730008895472252561376080848276615142822265625 ^2 ::== 78987564479856441421441241486559672
t_ten increased 
using t_rst as 2810472637829026105.98461412173000883996110133011825382709503173828125
using for fract 7898756447985644142144124148655966208
getting the part of 7898756447985644142144124148655966208 :: ad 37 and mad 58
    -----------------> 2810472637829026105.98461412173000883996110133011825382709503173828125 ^2 ::== 7898756447985644142144124148655966208
t_ten increased 
using t_rst as 28104726378290261059.846141217300090175967852701433002948760986328125
using for fract 789875644798564414214412414865596743680
getting the part of 789875644798564414214412414865596743680 :: ad 39 and mad 58
    -----------------> 28104726378290261059.846141217300090175967852701433002948760986328125 ^2 ::== 789875644798564414214412414865596743680
t_ten increased 
using t_rst as 281047263782902610598.4614121730008946542511694133281707763671875
using for fract 78987564479856441421441241486559669125120
getting the part of 78987564479856441421441241486559669125120 :: ad 41 and mad 58
    -----------------> 281047263782902610598.4614121730008946542511694133281707763671875 ^2 ::== 78987564479856441421441241486559669125120
t_ten increased 
using t_rst as 2810472637829026105984.61412173000871916883625090122222900390625
using for fract 7898756447985644142144124148655966073651200
getting the part of 7898756447985644142144124148655966073651200 :: ad 43 and mad 58
    -----------------> 2810472637829026105984.61412173000871916883625090122222900390625 ^2 ::== 7898756447985644142144124148655966073651200
t_ten increased 
using t_rst as 28104726378290261059846.14121730008992017246782779693603515625
using for fract 789875644798564414214412414865596714739302400
getting the part of 789875644798564414214412414865596714739302400 :: ad 45 and mad 58
    -----------------> 28104726378290261059846.14121730008992017246782779693603515625 ^2 ::== 789875644798564414214412414865596714739302400
t_ten increased 
using t_rst as 281047263782902610598461.41217300089192576706409454345703125
using for fract 78987564479856441421441241486559668175395356672
getting the part of 78987564479856441421441241486559668175395356672 :: ad 47 and mad 58
    -----------------> 281047263782902610598461.41217300089192576706409454345703125 ^2 ::== 78987564479856441421441241486559668175395356672
t_ten increased 
using t_rst as 2810472637829026105984614.12173000909388065338134765625
using for fract 7898756447985644142144124148655967450858233266176
getting the part of 7898756447985644142144124148655967450858233266176 :: ad 49 and mad 58
    -----------------> 2810472637829026105984614.12173000909388065338134765625 ^2 ::== 7898756447985644142144124148655967450858233266176
t_ten increased 
using t_rst as 28104726378290261059846141.2173000872135162353515625
using for fract 789875644798564414214412414865596623488633387614208
getting the part of 789875644798564414214412414865596623488633387614208 :: ad 51 and mad 58
    -----------------> 28104726378290261059846141.2173000872135162353515625 ^2 ::== 789875644798564414214412414865596623488633387614208
t_ten increased 
using t_rst as 281047263782902610598461412.1730009019374847412109375
using for fract 78987564479856441421441241486559679642685907864125440
getting the part of 78987564479856441421441241486559679642685907864125440 :: ad 53 and mad 58
    -----------------> 281047263782902610598461412.1730009019374847412109375 ^2 ::== 78987564479856441421441241486559679642685907864125440
t_ten increased 
using t_rst as 2810472637829026105984614121.7300090789794921875
using for fract 7898756447985644142144124148655967853588126344155234304
getting the part of 7898756447985644142144124148655967853588126344155234304 :: ad 55 and mad 58
    -----------------> 2810472637829026105984614121.7300090789794921875 ^2 ::== 7898756447985644142144124148655967853588126344155234304
t_ten increased 
using t_rst as 28104726378290261059846141217.30008697509765625
using for fract 789875644798564414214412414865596506739190145106455822336
getting the part of 789875644798564414214412414865596506739190145106455822336 :: ad 57 and mad 58
i push_back a near value of 28104726378290261059846141217
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261059846141217.30008697509765625 ^2 ::== 789875644798564414214412414865596506739190145106455822336
t_ten increased 
breaking with xbrk of value 1

increasing the digits 28
-------------------------------------------------------
-------------------------------------------------------
times 28 7898756447985644142144124141 8760206759511303994953857704
main 88874948371212.25659870757219399603032798651280899093762855045497417449951171875 second 93595976192950.2180613195969775945128044103427100708358921110630035400390625
main 7898756447985644142144124141 second 8760206759511303994953857704
times of 1.0145302595137631825362943014322890706483405402617786761632940572660219521719329e-14
new times of 1.0145302595137631825362943014322890706483405402617786761632940572660219521719329e-14
using 87602067595113039949538577048 * 1.0145302595137631825362943014322890706483405402617786761632940572660219521719329e-14
888749483712122.565987075722021122647920066128790494985878467559814453125  with length of 72 and dot length 15 will move 57
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 888749483712122.565987075722021122647920066128790494985878467559814453125 ^2 ::== 789875644798564414214412414244.2659912109375
 temp fract 0.2659912109375 temp int 789875644798564414214412414244
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887494837121225.65987075722021122647920066128790494985878467559814453125
using for fract 78987564479856441421441241424426.59375
getting the part of 78987564479856441421441241424426.59375 :: ad 32 and mad 58
    -----------------> 8887494837121225.65987075722021122647920066128790494985878467559814453125 ^2 ::== 78987564479856441421441241424426.59375
t_ten increased 
using t_rst as 88874948371212256.5987075722021122647920066128790494985878467559814453125
using for fract 7898756447985644142144124142442660
getting the part of 7898756447985644142144124142442660 :: ad 34 and mad 58
    -----------------> 88874948371212256.5987075722021122647920066128790494985878467559814453125 ^2 ::== 7898756447985644142144124142442660
t_ten increased 
using t_rst as 888749483712122565.9870757220211225924089148975326679646968841552734375
using for fract 789875644798564414214412414244265856
getting the part of 789875644798564414214412414244265856 :: ad 36 and mad 58
    -----------------> 888749483712122565.9870757220211225924089148975326679646968841552734375 ^2 ::== 789875644798564414214412414244265856
t_ten increased 
using t_rst as 8887494837121225659.8707572202112263681783588253892958164215087890625
using for fract 78987564479856441421441241424426590208
getting the part of 78987564479856441421441241424426590208 :: ad 38 and mad 58
    -----------------> 8887494837121225659.8707572202112263681783588253892958164215087890625 ^2 ::== 78987564479856441421441241424426590208
t_ten increased 
using t_rst as 88874948371212256598.70757220211226012906990945339202880859375
using for fract 7898756447985644142144124142442659184640
getting the part of 7898756447985644142144124142442659184640 :: ad 40 and mad 58
    -----------------> 88874948371212256598.70757220211226012906990945339202880859375 ^2 ::== 7898756447985644142144124142442659184640
t_ten increased 
using t_rst as 888749483712122565987.0757220211226012906990945339202880859375
using for fract 789875644798564414214412414244265834577920
getting the part of 789875644798564414214412414244265834577920 :: ad 42 and mad 58
    -----------------> 888749483712122565987.0757220211226012906990945339202880859375 ^2 ::== 789875644798564414214412414244265834577920
t_ten increased 
using t_rst as 8887494837121225659870.7572202112269224016927182674407958984375
using for fract 78987564479856441421441241424426604395757568
getting the part of 78987564479856441421441241424426604395757568 :: ad 44 and mad 58
    -----------------> 8887494837121225659870.7572202112269224016927182674407958984375 ^2 ::== 78987564479856441421441241424426604395757568
t_ten increased 
using t_rst as 88874948371212256598707.57220211226376704871654510498046875
using for fract 7898756447985644142144124142442659374423867392
getting the part of 7898756447985644142144124142442659374423867392 :: ad 46 and mad 58
    -----------------> 88874948371212256598707.57220211226376704871654510498046875 ^2 ::== 7898756447985644142144124142442659374423867392
t_ten increased 
using t_rst as 888749483712122565987075.72202112269587814807891845703125
using for fract 789875644798564414214412414244266038597456494592
getting the part of 789875644798564414214412414244266038597456494592 :: ad 48 and mad 58
    -----------------> 888749483712122565987075.72202112269587814807891845703125 ^2 ::== 789875644798564414214412414244266038597456494592
t_ten increased 
using t_rst as 8887494837121225659870757.2202112264931201934814453125
using for fract 78987564479856441421441241424426593163696534454272
getting the part of 78987564479856441421441241424426593163696534454272 :: ad 50 and mad 58
    -----------------> 8887494837121225659870757.2202112264931201934814453125 ^2 ::== 78987564479856441421441241424426593163696534454272
t_ten increased 
using t_rst as 88874948371212256598707572.202112257480621337890625
using for fract 7898756447985644142144124142442658379620930952364032
getting the part of 7898756447985644142144124142442658379620930952364032 :: ad 52 and mad 58
    -----------------> 88874948371212256598707572.202112257480621337890625 ^2 ::== 7898756447985644142144124142442658379620930952364032
t_ten increased 
using t_rst as 888749483712122565987075722.0211226940155029296875
using for fract 789875644798564414214412414244266054711335961323634688
getting the part of 789875644798564414214412414244266054711335961323634688 :: ad 54 and mad 58
    -----------------> 888749483712122565987075722.0211226940155029296875 ^2 ::== 789875644798564414214412414244266054711335961323634688
t_ten increased 
using t_rst as 8887494837121225659870757220.21122646331787109375
using for fract 78987564479856441421441241424426598387583871827895648256
getting the part of 78987564479856441421441241424426598387583871827895648256 :: ad 56 and mad 58
    -----------------> 8887494837121225659870757220.21122646331787109375 ^2 ::== 78987564479856441421441241424426598387583871827895648256
t_ten increased 
using t_rst as 88874948371212256598707572202.1122589111328125
using for fract 7898756447985644142144124142442659083179749923646330634240
getting the part of 7898756447985644142144124142442659083179749923646330634240 :: ad 58 and mad 58
i push_back a near value of 88874948371212256598707572202
stopping with ad 58 and mad of 58
    -----------------> 88874948371212256598707572202.1122589111328125 ^2 ::== 7898756447985644142144124142442659083179749923646330634240
t_ten increased 
breaking with xbrk of value 1

increasing the digits 29
-------------------------------------------------------
-------------------------------------------------------
times 29 78987564479856441421441241412 87602067595113039949538577048
main 281047263782902.610598461412040354758488935882354553541517816483974456787109375 second 295976464596617.95201659277269345071047224049465285133919678628444671630859375
main 78987564479856441421441241412.00000762939453125 second 87602067595113039949538577047.9999847412109375
times of 3.2082263752252017020546171651801104606178353094307523935246231901131926603917455e-15
new times of 3.2082263752252017020546171651801104606178353094307523935246231901131926603917455e-15
using 87602067595113039949538577048 * 3.2082263752252017020546171651801104606178353094307523935246231901131926603917455e-15
281047263782902.6105984614120403548126990445066297752418904565274715423583984375  with length of 79 and dot length 15 will move 64
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241241901830747210744254693376  main number intpart lenght 58 
 fract 0 int 7898756447985644142144124141241241901830747210744254693376
    -----------------> 281047263782902.6105984614120403548126990445066297752418904565274715423583984375 ^2 ::== 78987564479856441421441241412.00003814697265625
 temp fract 3.814697265625e-05 temp int 78987564479856441421441241412
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810472637829026.1059846141204035482354106623148481958196498453617095947265625
using for fract 7898756447985644142144124141200.00390625
getting the part of 7898756447985644142144124141200.00390625 :: ad 31 and mad 58
    -----------------> 2810472637829026.1059846141204035482354106623148481958196498453617095947265625 ^2 ::== 7898756447985644142144124141200.00390625
t_ten increased 
using t_rst as 28104726378290261.059846141204035481486744885160078410990536212921142578125
using for fract 789875644798564414214412414120000.375
getting the part of 789875644798564414214412414120000.375 :: ad 33 and mad 58
    -----------------> 28104726378290261.059846141204035481486744885160078410990536212921142578125 ^2 ::== 789875644798564414214412414120000.375
t_ten increased 
using t_rst as 281047263782902610.598461412040354800989661043786327354609966278076171875
using for fract 78987564479856441421441241412000032
getting the part of 78987564479856441421441241412000032 :: ad 35 and mad 58
    -----------------> 281047263782902610.598461412040354800989661043786327354609966278076171875 ^2 ::== 78987564479856441421441241412000032
t_ten increased 
using t_rst as 2810472637829026105.98461412040354812091891290037892758846282958984375
using for fract 7898756447985644142144124141200003072
getting the part of 7898756447985644142144124141200003072 :: ad 37 and mad 58
    -----------------> 2810472637829026105.98461412040354812091891290037892758846282958984375 ^2 ::== 7898756447985644142144124141200003072
t_ten increased 
using t_rst as 28104726378290261059.84614120403548298554596840403974056243896484375
using for fract 789875644798564414214412414120000487424
getting the part of 789875644798564414214412414120000487424 :: ad 39 and mad 58
    -----------------> 28104726378290261059.84614120403548298554596840403974056243896484375 ^2 ::== 789875644798564414214412414120000487424
t_ten increased 
using t_rst as 281047263782902610598.461412040354815644604968838393688201904296875
using for fract 78987564479856441421441241412000035110912
getting the part of 78987564479856441421441241412000035110912 :: ad 41 and mad 58
    -----------------> 281047263782902610598.461412040354815644604968838393688201904296875 ^2 ::== 78987564479856441421441241412000035110912
t_ten increased 
using t_rst as 2810472637829026105984.61412040354798591579310595989227294921875
using for fract 7898756447985644142144124141200002705784832
getting the part of 7898756447985644142144124141200002705784832 :: ad 43 and mad 58
    -----------------> 2810472637829026105984.61412040354798591579310595989227294921875 ^2 ::== 7898756447985644142144124141200002705784832
t_ten increased 
using t_rst as 28104726378290261059846.14120403548076865263283252716064453125
using for fract 789875644798564414214412414120000287758352384
getting the part of 789875644798564414214412414120000287758352384 :: ad 45 and mad 58
    -----------------> 28104726378290261059846.14120403548076865263283252716064453125 ^2 ::== 789875644798564414214412414120000287758352384
t_ten increased 
using t_rst as 281047263782902610598461.412040354800410568714141845703125
using for fract 78987564479856441421441241412000025477300355072
getting the part of 78987564479856441421441241412000025477300355072 :: ad 47 and mad 58
    -----------------> 281047263782902610598461.412040354800410568714141845703125 ^2 ::== 78987564479856441421441241412000025477300355072
t_ten increased 
using t_rst as 2810472637829026105984614.1204035482369363307952880859375
using for fract 7898756447985644142144124141200003814367430705152
getting the part of 7898756447985644142144124141200003814367430705152 :: ad 49 and mad 58
    -----------------> 2810472637829026105984614.1204035482369363307952880859375 ^2 ::== 7898756447985644142144124141200003814367430705152
t_ten increased 
using t_rst as 28104726378290261059846141.2040354795753955841064453125
using for fract 789875644798564414214412414120000268846752386252800
getting the part of 789875644798564414214412414120000268846752386252800 :: ad 51 and mad 58
    -----------------> 28104726378290261059846141.2040354795753955841064453125 ^2 ::== 789875644798564414214412414120000268846752386252800
t_ten increased 
using t_rst as 281047263782902610598461412.0403548181056976318359375
using for fract 78987564479856441421441241412000033802204266266361856
getting the part of 78987564479856441421441241412000033802204266266361856 :: ad 53 and mad 58
    -----------------> 281047263782902610598461412.0403548181056976318359375 ^2 ::== 78987564479856441421441241412000033802204266266361856
t_ten increased 
using t_rst as 2810472637829026105984614120.40354824066162109375
using for fract 7898756447985644142144124141200004044303213280180043776
getting the part of 7898756447985644142144124141200004044303213280180043776 :: ad 55 and mad 58
    -----------------> 2810472637829026105984614120.40354824066162109375 ^2 ::== 7898756447985644142144124141200004044303213280180043776
t_ten increased 
using t_rst as 28104726378290261059846141204.035480499267578125
using for fract 789875644798564414214412414120000272204059807667938394112
getting the part of 789875644798564414214412414120000272204059807667938394112 :: ad 57 and mad 58
i push_back a near value of 28104726378290261059846141204
stopping with ad 57 and mad of 58
    -----------------> 28104726378290261059846141204.035480499267578125 ^2 ::== 789875644798564414214412414120000272204059807667938394112
t_ten increased 
breaking with xbrk of value 1

increasing the digits 30


Approximated with value : 87602067595113039949538577048
entered show_vcc function @ vcc_part_one class 
----------------- v_cc vector reports -------- 
u enter as approximation 87602067595113039949538577048 with main number to find the power 7898756447985644142144124141241241901830747210744254693376 with psifia 58
as of the entered 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409268215034822454663896258052096
with string of it 7674122246938754150625840409268215034822454663896258052096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
87602067595113039949538577048 ^2 ::== 7674122246938754150625840409268215034822454663896258052096               me idia psifia 1               me diafora 224634201046889991518283731973026867008292546847996641280
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789037245474796843378446561107622210637701564230984007680
with string of it 789037245474796843378446561107622210637701564230984007680
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28089806789559746691982368351 ^2 ::== 789037245474796843378446561107622210637701564230984007680            me idia psifia 3            me diafora 7109719202510847298765677580133619540077318194684623847424
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789871218953278136986629748757094358800646249913960628224
with string of it 789871218953278136986629748757094358800646249913960628224
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104647639728168934740571909 ^2 ::== 789871218953278136986629748757094358800646249913960628224            me idia psifia 5            me diafora 7108885229032366005157494392484147694145828412658940903424
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644792038479352831311782860043571777486859584667648
with string of it 789875644792038479352831311782860043571777486859584667648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378174160750350945470 ^2 ::== 789875644792038479352831311782860043571777486859584667648            me idia psifia 11            me diafora 7108880803193605662791292829458382009374697175713316864000
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798554820215272465200476798466845501568797638656
with string of it 789875644798554820215272465200476798466845501568797638656
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290090376826302948 ^2 ::== 789875644798554820215272465200476798466845501568797638656            me idia psifia 13            me diafora 7108880803187089321928851676040764650016719353689516539904
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564414214412414118005997948878025015613718528
with string of it 789875644798564414214412414118005997948878025015613718528
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261059846141204 ^2 ::== 789875644798564414214412414118005997948878025015613718528            me idia psifia 28            me diafora 7108880803187079727929711727123236206113324089385934651392
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564414214412414848728818125289579717721063424
with string of it 789875644798564414214412414848728818125289579717721063424
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261059846141217 ^2 ::== 789875644798564414214412414848728818125289579717721063424            me idia psifia 27            me diafora 7108880803187079727929711726392513083705457631026533629952
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564414214412527042796494065421042578165334016
with string of it 789875644798564414214412527042796494065421042578165334016
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261059846143213 ^2 ::== 789875644798564414214412527042796494065421042578165334016            me idia psifia 24            me diafora 7108880803187079727929711614198444954418143812680148844544
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564414214420406034208369298902891693420314624
with string of it 789875644798564414214420406034208369298902891693420314624
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261059846283385 ^2 ::== 789875644798564414214420406034208369298902891693420314624            me idia psifia 22            me diafora 7108880803187079727929703735207033532531844319050834378752
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564414214695670076025510398648784003604152320
with string of it 789875644798564414214695670076025510398648784003604152320
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261059851180498 ^2 ::== 789875644798564414214695670076025510398648784003604152320            me idia psifia 21            me diafora 7108880803187079727929428471165216542547825878569297379328
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564414372011686496440008966448653605242142720
with string of it 789875644798564414372011686496440008966448653605242142720
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261062649927127 ^2 ::== 789875644798564414372011686496440008966448653605242142720            me idia psifia 18            me diafora 7108880803187079727772112454744801590632843653481718874112
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564427123280680353507686064444922773907701760
with string of it 789875644798564427123280680353507686064444922773907701760
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290261289502678195 ^2 ::== 789875644798564427123280680353507686064444922773907701760            me idia psifia 16            me diafora 7108880803187079715020843460887734064650574836141700153344
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564720420611275846273345547476521777551638528
with string of it 789875644798564720420611275846273345547476521777551638528
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290266507438740758 ^2 ::== 789875644798564720420611275846273345547476521777551638528            me idia psifia 15            me diafora 7108880803187079421723512865394968556283270688966703054848
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875645715198644683219384734045975450000946217296592896
with string of it 789875645715198644683219384734045975450000946217296592896
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726394597735786071109486 ^2 ::== 789875645715198644683219384734045975450000946217296592896            me idia psifia 8            me diafora 7108880802270445497460904756507196530843656071841545453568
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875736964695340806834412890463338984309678261332344832
with string of it 789875736964695340806834412890463338984309678261332344832
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104728017981162110579974694 ^2 ::== 789875736964695340806834412890463338984309678261332344832            me idia psifia 6            me diafora 7108880711020948801337289728350778865077892436140216025088
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898372832395368148292738833564734088497855911951192817664
with string of it 7898372832395368148292738833564734088497855911951192817664
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88872790168843962926022998811 ^2 ::== 7898372832395368148292738833564734088497855911951192817664            me idia psifia 4            me diafora 383615590275993851385307676507813332891298793061875712
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447922048037847345224851737898186533336719695020032
with string of it 7898756447922048037847345224851737898186533336719695020032
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948370854472400446892669 ^2 ::== 7898756447922048037847345224851737898186533336719695020032            me idia psifia 11            me diafora 63596104296778916389504003644213874024559673344
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447982351528641429878596939514372466630555575779328
with string of it 7898756447982351528641429878596939514372466630555575779328
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371193732742643307376 ^2 ::== 7898756447982351528641429878596939514372466630555575779328            me idia psifia 12            me diafora 3292613502694262644302387458280580188678914048
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985607204206112758676279147512317617477806718976
with string of it 7898756447985607204206112758676279147512317617477806718976
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212048790215481148 ^2 ::== 7898756447985607204206112758676279147512317617477806718976            me idia psifia 14            me diafora 36937938011382564962754318429593266447974400
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124108650224183470267493018205421568
with string of it 7898756447985644142144124108650224183470267493018205421568
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212256598707572012 ^2 ::== 7898756447985644142144124108650224183470267493018205421568            me idia psifia 26            me diafora 32591017718360479717726049271808
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142422704553601190854488630493184
with string of it 7898756447985644142144124142422704553601190854488630493184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212256598707572202 ^2 ::== 7898756447985644142144124142422704553601190854488630493184            me idia psifia 27            me diafora 1181462651770443643744375799808
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144133894137539967359436148210988482560
with string of it 7898756447985644142144133894137539967359436148210988482560
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212256598707627064 ^2 ::== 7898756447985644142144133894137539967359436148210988482560            me idia psifia 23            me diafora 9752896298065528688937466733789184
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142145546721772306468896044950933699821568
with string of it 7898756447985644142145546721772306468896044950933699821568
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212256598715575466 ^2 ::== 7898756447985644142145546721772306468896044950933699821568            me idia psifia 21            me diafora 1422580531064567065297740189445128192
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142197123025527109509004073702705449664512
with string of it 7898756447985644142197123025527109509004073702705449664512
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212256599005737681 ^2 ::== 7898756447985644142197123025527109509004073702705449664512            me idia psifia 20            me diafora 52998884285867607173326491961194971136
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644148933422820280233857221911337342060199936
with string of it 7898756447985644148933422820280233857221911337342060199936
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212256636903367543 ^2 ::== 7898756447985644148933422820280233857221911337342060199936            me idia psifia 18            me diafora 6789298679038991955391164126597805506560
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645794226646639555699358028253627306584571904
with string of it 7898756447985645794226646639555699358028253627306584571904
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212265893129413083 ^2 ::== 7898756447985645794226646639555699358028253627306584571904            me idia psifia 15            me diafora 1652082522498314457456197506416562329878528
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756507318311313168103218942793199686380710365646290944
with string of it 7898756507318311313168103218942793199686380710365646290944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948705010858718745986257 ^2 ::== 7898756507318311313168103218942793199686380710365646290944            me idia psifia 7            me diafora 59332667171023979077701551297855633499621391597568
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898762189609943009005458782107766213375929920151227465728
with string of it 7898762189609943009005458782107766213375929920151227465728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874980672908970309748460471 ^2 ::== 7898762189609943009005458782107766213375929920151227465728            me idia psifia 5            me diafora 5741624298866861334640866524311545182709406972772352
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7908330496250796984394445130413886487971303083152989224960
with string of it 7908330496250796984394445130413886487971303083152989224960
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88928794528267372575231528513 ^2 ::== 7908330496250796984394445130413886487971303083152989224960            me idia psifia 1            me diafora 9574048265152842250320989172644586140555872408734531584
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 83935712075892623522470129476128581979222937534628836147200
with string of it 83935712075892623522470129476128581979222937534628836147200
leaving function fcnt @@ eql_digits_cnt.cpp/h 
289716606489674014893522341992 ^2 ::== 83935712075892623522470129476128581979222937534628836147200            me idia psifia 0            me diafora 76036955627906979380326005334887338868466370709255406747648


-------------------------Approximation Result Set-----------------------------------------------------

possible approximation < ::== 88874948371212256598707572202 ^2 7898756447985644142144124142422704553601190854488630493184               me idia psifia 27               me diafora 1181462651770443643744375799808


possible approximation > ::== 88874948371212256598707572202 ^2 7898756447985644142144124142422704553601190854488630493184               me idia psifia 27               me diafora 1181462651770443643744375799808

----removing using main number 7898756447985644142144124141241241901830747210744254693376

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142244954981417432312302406729728
with string of it 7898756447985644142144124142244954981417432312302406729728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572201 with ^2  7898756447985644142144124142244954981417432312302406729728             me idia psifia 27             me diafora 1003713079586685101558152036352

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142067204200307854155487008260096
with string of it 7898756447985644142144124142067204200307854155487008260096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572200 with ^2  7898756447985644142144124142067204200307854155487008260096             me idia psifia 27             me diafora 825962298477106944742753566720

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141889454628124095613300784496640
with string of it 7898756447985644142144124141889454628124095613300784496640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572199 with ^2  7898756447985644142144124141889454628124095613300784496640             me idia psifia 28             me diafora 648212726293348402556529803264

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141711705055940337071114560733184
with string of it 7898756447985644142144124141711705055940337071114560733184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572198 with ^2  7898756447985644142144124141711705055940337071114560733184             me idia psifia 28             me diafora 470463154109589860370306039808

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141533955483756578528928336969728
with string of it 7898756447985644142144124141533955483756578528928336969728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572197 with ^2  7898756447985644142144124141533955483756578528928336969728             me idia psifia 28             me diafora 292713581925831318184082276352

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141356204702647000372112938500096
with string of it 7898756447985644142144124141356204702647000372112938500096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572196 with ^2  7898756447985644142144124141356204702647000372112938500096             me idia psifia 28             me diafora 114962800816253161368683806720

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141178455130463241829926714736640
with string of it 7898756447985644142144124141178455130463241829926714736640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256598707572195 with ^2  7898756447985644142144124141178455130463241829926714736640             me idia psifia 28             me diafora 62786771367505380817539956736
will pass value of 88874948371212256598707572195



------------------------Bee-----------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 87602067595113039949538577048

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 87602067595113039949538577048 
     doted 0 
     makes 87602067595113039949538577048

result 90166324435318275154004106776 
     doted 0.8781890869140625 
     makes 90166324435318275154004106776.8781890869140625


for the integer string 90166324435318275154004106776.000000
the numbers are 29
the retrievable integer digit is 6

entering with number of 6.8781890869140625
recheck values of 87602067595113039949538577048 and result of 7674122246938754150625840409268215034822454663896258052096 with intpart 7674122246938754150625840409268215034822454663896258052096

     ----> using 6.8781890869140625 rst is 3.43909454345703125
     ----> using 3.43909454345703125 with intpart 3 and fract 0.43909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409345145029353631591428685561856
with string of it 7674122246938754150625840409345145029353631591428685561856
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.4390869140625 sq of rst 7674122246938754150625840409345145029353631591428685561856
                     with intpart 7674122246938754150625840409345145029353631591428685561856 and other part 0
                     the int string is 3.439095

     ----> using 3.43909454345703125 rst is 1.719547271728515625
     ----> using 1.719547271728515625 with intpart 1 and fract 0.719547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409394281819291868194234618085376
with string of it 7674122246938754150625840409394281819291868194234618085376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.71954345703125 sq of rst 7674122246938754150625840409394281819291868194234618085376
                     with intpart 7674122246938754150625840409394281819291868194234618085376 and other part 0
                     the int string is 1.719547

     ----> using 1.719547271728515625 rst is 0.8597736358642578125
     ----> using 0.8597736358642578125 with intpart 0 and fract 0.8597736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409418850818723896302952171700224
with string of it 7674122246938754150625840409418850818723896302952171700224
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.859771728515625 sq of rst 7674122246938754150625840409418850818723896302952171700224
                     with intpart 7674122246938754150625840409418850818723896302952171700224 and other part 0
                     the int string is 0.859774

     ----> using 0.8597736358642578125 rst is 0.42988681793212890625
     ----> using 0.42988681793212890625 with intpart 0 and fract 0.42988681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409343532322310265676109627523072
with string of it 7674122246938754150625840409343532322310265676109627523072
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.4298858642578125 sq of rst 7674122246938754150625840409343532322310265676109627523072
                     with intpart 7674122246938754150625840409343532322310265676109627523072 and other part 0
                     the int string is 0.429887

     ----> using 0.42988681793212890625 rst is 0.214943408966064453125
     ----> using 0.214943408966064453125 with intpart 0 and fract 0.214943408966064453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409305875491955089591946704846848
with string of it 7674122246938754150625840409305875491955089591946704846848
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.2149505615234375 sq of rst 7674122246938754150625840409305875491955089591946704846848
                     with intpart 7674122246938754150625840409305875491955089591946704846848 and other part 0
                     the int string is 0.214943

     ----> using 0.214943408966064453125 rst is 0.1074717044830322265625
     ----> using 0.1074717044830322265625 with intpart 0 and fract 0.1074717044830322265625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409287044054462952513292306743296
with string of it 7674122246938754150625840409287044054462952513292306743296
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.1074676513671875 sq of rst 7674122246938754150625840409287044054462952513292306743296
                     with intpart 7674122246938754150625840409287044054462952513292306743296 and other part 0
                     the int string is 0.107472

     ----> using 0.1074717044830322265625 rst is 0.05373585224151611328125
     ----> using 0.05373585224151611328125 with intpart 0 and fract 0.05373585224151611328125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409277630149105613395908869750784
with string of it 7674122246938754150625840409277630149105613395908869750784
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.053741455078125 sq of rst 7674122246938754150625840409277630149105613395908869750784
                     with intpart 7674122246938754150625840409277630149105613395908869750784 and other part 0
                     the int string is 0.053736

from new int t  of 6 ---> 5 with 5.8781890869140625
     ----> using 5.8781890869140625 rst is 2.93909454345703125
     ----> using 2.93909454345703125 with intpart 2 and fract 0.93909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409432746212094546850686244487168
with string of it 7674122246938754150625840409432746212094546850686244487168
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.9390869140625 sq of rst 7674122246938754150625840409432746212094546850686244487168
                     with intpart 7674122246938754150625840409432746212094546850686244487168 and other part 0
                     the int string is 2.939095

     ----> using 2.93909454345703125 rst is 1.469547271728515625
     ----> using 1.469547271728515625 with intpart 1 and fract 0.469547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409350481227921410564605838622720
with string of it 7674122246938754150625840409350481227921410564605838622720
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.46954345703125 sq of rst 7674122246938754150625840409350481227921410564605838622720
                     with intpart 7674122246938754150625840409350481227921410564605838622720 and other part 0
                     the int string is 1.469547

     ----> using 1.469547271728515625 rst is 0.7347736358642578125
     ----> using 0.7347736358642578125 with intpart 0 and fract 0.7347736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409396949918575757680823194615808
with string of it 7674122246938754150625840409396949918575757680823194615808
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.734771728515625 sq of rst 7674122246938754150625840409396949918575757680823194615808
                     with intpart 7674122246938754150625840409396949918575757680823194615808 and other part 0
                     the int string is 0.734774

     ----> using 0.7347736358642578125 rst is 0.36738681793212890625
     ----> using 0.36738681793212890625 with intpart 0 and fract 0.36738681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409332581872236196365045138980864
with string of it 7674122246938754150625840409332581872236196365045138980864
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.3673858642578125 sq of rst 7674122246938754150625840409332581872236196365045138980864
                     with intpart 7674122246938754150625840409332581872236196365045138980864 and other part 0
                     the int string is 0.367387

     ----> using 0.36738681793212890625 rst is 0.183693408966064453125
     ----> using 0.183693408966064453125 with intpart 0 and fract 0.183693408966064453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409300400266918054936414460575744
with string of it 7674122246938754150625840409300400266918054936414460575744
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.1837005615234375 sq of rst 7674122246938754150625840409300400266918054936414460575744
                     with intpart 7674122246938754150625840409300400266918054936414460575744 and other part 0
                     the int string is 0.183693

     ----> using 0.183693408966064453125 rst is 0.0918467044830322265625
     ----> using 0.0918467044830322265625 with intpart 0 and fract 0.0918467044830322265625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409284305837481525378211597254656
with string of it 7674122246938754150625840409284305837481525378211597254656
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.0918426513671875 sq of rst 7674122246938754150625840409284305837481525378211597254656
                     with intpart 7674122246938754150625840409284305837481525378211597254656 and other part 0
                     the int string is 0.091847

from new int t  of 5 ---> 4 with 4.8781890869140625
     ----> using 4.8781890869140625 rst is 2.43909454345703125
     ----> using 2.43909454345703125 with intpart 2 and fract 0.43909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409345145029353631591428685561856
with string of it 7674122246938754150625840409345145029353631591428685561856
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.4390869140625 sq of rst 7674122246938754150625840409345145029353631591428685561856
                     with intpart 7674122246938754150625840409345145029353631591428685561856 and other part 0
                     the int string is 2.439095

     ----> using 2.43909454345703125 rst is 1.219547271728515625
     ----> using 1.219547271728515625 with intpart 1 and fract 0.219547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409306679427625133320347884453888
with string of it 7674122246938754150625840409306679427625133320347884453888
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.21954345703125 sq of rst 7674122246938754150625840409306679427625133320347884453888
                     with intpart 7674122246938754150625840409306679427625133320347884453888 and other part 0
                     the int string is 1.219547

     ----> using 1.219547271728515625 rst is 0.6097736358642578125
     ----> using 0.6097736358642578125 with intpart 0 and fract 0.6097736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409375049018427619058694217531392
with string of it 7674122246938754150625840409375049018427619058694217531392
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.609771728515625 sq of rst 7674122246938754150625840409375049018427619058694217531392
                     with intpart 7674122246938754150625840409375049018427619058694217531392 and other part 0
                     the int string is 0.609774

     ----> using 0.6097736358642578125 rst is 0.30488681793212890625
     ----> using 0.30488681793212890625 with intpart 0 and fract 0.30488681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409321632631087946668609825144832
with string of it 7674122246938754150625840409321632631087946668609825144832
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.3048858642578125 sq of rst 7674122246938754150625840409321632631087946668609825144832
                     with intpart 7674122246938754150625840409321632631087946668609825144832 and other part 0
                     the int string is 0.304887

     ----> using 0.30488681793212890625 rst is 0.152443408966064453125
     ----> using 0.152443408966064453125 with intpart 0 and fract 0.152443408966064453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409294925041881020280882216304640
with string of it 7674122246938754150625840409294925041881020280882216304640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.1524505615234375 sq of rst 7674122246938754150625840409294925041881020280882216304640
                     with intpart 7674122246938754150625840409294925041881020280882216304640 and other part 0
                     the int string is 0.152443

     ----> using 0.152443408966064453125 rst is 0.0762217044830322265625
     ----> using 0.0762217044830322265625 with intpart 0 and fract 0.0762217044830322265625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409281568829425917857760062472192
with string of it 7674122246938754150625840409281568829425917857760062472192
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.0762176513671875 sq of rst 7674122246938754150625840409281568829425917857760062472192
                     with intpart 7674122246938754150625840409281568829425917857760062472192 and other part 0
                     the int string is 0.076222

from new int t  of 4 ---> 3 with 3.8781890869140625
     ----> using 3.8781890869140625 rst is 1.93909454345703125
     ----> using 1.93909454345703125 with intpart 1 and fract 0.93909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409432746212094546850686244487168
with string of it 7674122246938754150625840409432746212094546850686244487168
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.9390869140625 sq of rst 7674122246938754150625840409432746212094546850686244487168
                     with intpart 7674122246938754150625840409432746212094546850686244487168 and other part 0
                     the int string is 1.939095

     ----> using 1.93909454345703125 rst is 0.969547271728515625
     ----> using 0.969547271728515625 with intpart 0 and fract 0.969547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409438082410662325823863397548032
with string of it 7674122246938754150625840409438082410662325823863397548032
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.96954345703125 sq of rst 7674122246938754150625840409438082410662325823863397548032
                     with intpart 7674122246938754150625840409438082410662325823863397548032 and other part 0
                     the int string is 0.969547

     ----> using 0.969547271728515625 rst is 0.4847736358642578125
     ----> using 0.4847736358642578125 with intpart 0 and fract 0.4847736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409353149327205300051194415153152
with string of it 7674122246938754150625840409353149327205300051194415153152
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.484771728515625 sq of rst 7674122246938754150625840409353149327205300051194415153152
                     with intpart 7674122246938754150625840409353149327205300051194415153152 and other part 0
                     the int string is 0.484774

     ----> using 0.4847736358642578125 rst is 0.24238681793212890625
     ----> using 0.24238681793212890625 with intpart 0 and fract 0.24238681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409310682181013877357545336602624
with string of it 7674122246938754150625840409310682181013877357545336602624
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.2423858642578125 sq of rst 7674122246938754150625840409310682181013877357545336602624
                     with intpart 7674122246938754150625840409310682181013877357545336602624 and other part 0
                     the int string is 0.242387

     ----> using 0.24238681793212890625 rst is 0.121193408966064453125
     ----> using 0.121193408966064453125 with intpart 0 and fract 0.121193408966064453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409289449816843985625349972033536
with string of it 7674122246938754150625840409289449816843985625349972033536
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.1212005615234375 sq of rst 7674122246938754150625840409289449816843985625349972033536
                     with intpart 7674122246938754150625840409289449816843985625349972033536 and other part 0
                     the int string is 0.121193

     ----> using 0.121193408966064453125 rst is 0.0605967044830322265625
     ----> using 0.0605967044830322265625 with intpart 0 and fract 0.0605967044830322265625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409278830612444490722679352983552
with string of it 7674122246938754150625840409278830612444490722679352983552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.0605926513671875 sq of rst 7674122246938754150625840409278830612444490722679352983552
                     with intpart 7674122246938754150625840409278830612444490722679352983552 and other part 0
                     the int string is 0.060597

from new int t  of 3 ---> 2 with 2.8781890869140625
     ----> using 2.8781890869140625 rst is 1.43909454345703125
     ----> using 1.43909454345703125 with intpart 1 and fract 0.43909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409345145029353631591428685561856
with string of it 7674122246938754150625840409345145029353631591428685561856
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.4390869140625 sq of rst 7674122246938754150625840409345145029353631591428685561856
                     with intpart 7674122246938754150625840409345145029353631591428685561856 and other part 0
                     the int string is 1.439095

     ----> using 1.43909454345703125 rst is 0.719547271728515625
     ----> using 0.719547271728515625 with intpart 0 and fract 0.719547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409394281819291868194234618085376
with string of it 7674122246938754150625840409394281819291868194234618085376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.71954345703125 sq of rst 7674122246938754150625840409394281819291868194234618085376
                     with intpart 7674122246938754150625840409394281819291868194234618085376 and other part 0
                     the int string is 0.719547

     ----> using 0.719547271728515625 rst is 0.3597736358642578125
     ----> using 0.3597736358642578125 with intpart 0 and fract 0.3597736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409331248427057161429065438068736
with string of it 7674122246938754150625840409331248427057161429065438068736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.359771728515625 sq of rst 7674122246938754150625840409331248427057161429065438068736
                     with intpart 7674122246938754150625840409331248427057161429065438068736 and other part 0
                     the int string is 0.359774

     ----> using 0.3597736358642578125 rst is 0.17988681793212890625
     ----> using 0.17988681793212890625 with intpart 0 and fract 0.17988681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409299731730939808046480848060416
with string of it 7674122246938754150625840409299731730939808046480848060416
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.1798858642578125 sq of rst 7674122246938754150625840409299731730939808046480848060416
                     with intpart 7674122246938754150625840409299731730939808046480848060416 and other part 0
                     the int string is 0.179887

     ----> using 0.17988681793212890625 rst is 0.089943408966064453125
     ----> using 0.089943408966064453125 with intpart 0 and fract 0.089943408966064453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409283974591806950969817727762432
with string of it 7674122246938754150625840409283974591806950969817727762432
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.0899505615234375 sq of rst 7674122246938754150625840409283974591806950969817727762432
                     with intpart 7674122246938754150625840409283974591806950969817727762432 and other part 0
                     the int string is 0.089943

from new int t  of 2 ---> 1 with 1.8781890869140625
     ----> using 1.8781890869140625 rst is 0.93909454345703125
     ----> using 0.93909454345703125 with intpart 0 and fract 0.93909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409432746212094546850686244487168
with string of it 7674122246938754150625840409432746212094546850686244487168
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.9390869140625 sq of rst 7674122246938754150625840409432746212094546850686244487168
                     with intpart 7674122246938754150625840409432746212094546850686244487168 and other part 0
                     the int string is 0.939095

     ----> using 0.93909454345703125 rst is 0.469547271728515625
     ----> using 0.469547271728515625 with intpart 0 and fract 0.469547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409350481227921410564605838622720
with string of it 7674122246938754150625840409350481227921410564605838622720
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.46954345703125 sq of rst 7674122246938754150625840409350481227921410564605838622720
                     with intpart 7674122246938754150625840409350481227921410564605838622720 and other part 0
                     the int string is 0.469547

     ----> using 0.469547271728515625 rst is 0.2347736358642578125
     ----> using 0.2347736358642578125 with intpart 0 and fract 0.2347736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409309347526909022806936460984320
with string of it 7674122246938754150625840409309347526909022806936460984320
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.234771728515625 sq of rst 7674122246938754150625840409309347526909022806936460984320
                     with intpart 7674122246938754150625840409309347526909022806936460984320 and other part 0
                     the int string is 0.234774

     ----> using 0.2347736358642578125 rst is 0.11738681793212890625
     ----> using 0.11738681793212890625 with intpart 0 and fract 0.11738681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409288781280865738735416359518208
with string of it 7674122246938754150625840409288781280865738735416359518208
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.1173858642578125 sq of rst 7674122246938754150625840409288781280865738735416359518208
                     with intpart 7674122246938754150625840409288781280865738735416359518208 and other part 0
                     the int string is 0.117387

     ----> using 0.11738681793212890625 rst is 0.058693408966064453125
     ----> using 0.058693408966064453125 with intpart 0 and fract 0.058693408966064453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409278499366769916314285483491328
with string of it 7674122246938754150625840409278499366769916314285483491328
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.0587005615234375 sq of rst 7674122246938754150625840409278499366769916314285483491328
                     with intpart 7674122246938754150625840409278499366769916314285483491328 and other part 0
                     the int string is 0.058693

from new int t  of 1 ---> 0 with 0.8781890869140625
     ----> using 0.8781890869140625 rst is 0.43909454345703125
     ----> using 0.43909454345703125 with intpart 0 and fract 0.43909454345703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409345145029353631591428685561856
with string of it 7674122246938754150625840409345145029353631591428685561856
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.4390869140625 sq of rst 7674122246938754150625840409345145029353631591428685561856
                     with intpart 7674122246938754150625840409345145029353631591428685561856 and other part 0
                     the int string is 0.439095

     ----> using 0.43909454345703125 rst is 0.219547271728515625
     ----> using 0.219547271728515625 with intpart 0 and fract 0.219547271728515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409306679427625133320347884453888
with string of it 7674122246938754150625840409306679427625133320347884453888
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.21954345703125 sq of rst 7674122246938754150625840409306679427625133320347884453888
                     with intpart 7674122246938754150625840409306679427625133320347884453888 and other part 0
                     the int string is 0.219547

     ----> using 0.219547271728515625 rst is 0.1097736358642578125
     ----> using 0.1097736358642578125 with intpart 0 and fract 0.1097736358642578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409287447835686703799436658606080
with string of it 7674122246938754150625840409287447835686703799436658606080
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.109771728515625 sq of rst 7674122246938754150625840409287447835686703799436658606080
                     with intpart 7674122246938754150625840409287447835686703799436658606080 and other part 0
                     the int string is 0.109774

     ----> using 0.1097736358642578125 rst is 0.05488681793212890625
     ----> using 0.05488681793212890625 with intpart 0 and fract 0.05488681793212890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7674122246938754150625840409277830830791669424351870976000
with string of it 7674122246938754150625840409277830830791669424351870976000
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 87602067595113039949538577048.0548858642578125 sq of rst 7674122246938754150625840409277830830791669424351870976000
                     with intpart 7674122246938754150625840409277830830791669424351870976000 and other part 0
                     the int string is 0.054887


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572202

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572202 
     doted 0 
     makes 88874948371212256598707572202

result 88874948371212256598707572188 
     doted 0.7064666748046875 
     makes 88874948371212256598707572188.7064666748046875


for the integer string 88874948371212256598707572188.000000
the numbers are 29
the retrievable integer digit is 8

entering with number of 8.7064666748046875
recheck values of 88874948371212256598707572202 and result of 7898756447985644142144124142422704553601190854488630493184 with intpart 7898756447985644142144124142422704553601190854488630493184

recheck power 88874948371212256598707572202 of result 7898756447985644142144124142422704553601190854488630493184
lowering second to value of 88874948371212256598707572202

     ----> using 8.7064666748046875 rst is 4.35323333740234375
     ----> using 4.35323333740234375 with intpart 4 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 4.353233

     ----> using 4.35323333740234375 rst is 2.176616668701171875
     ----> using 2.176616668701171875 with intpart 2 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276348367101185002711176708096
with string of it 7898756447985644142144124142276348367101185002711176708096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1766204833984375 sq of rst 7898756447985644142144124142276348367101185002711176708096
                     with intpart 7898756447985644142144124142276348367101185002711176708096 and other part 0
                     the int string is 2.176617

     ----> using 2.176616668701171875 rst is 1.0883083343505859375
     ----> using 1.0883083343505859375 with intpart 1 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142260650465333489042877617012736
with string of it 7898756447985644142144124142260650465333489042877617012736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0883026123046875 sq of rst 7898756447985644142144124142260650465333489042877617012736
                     with intpart 7898756447985644142144124142260650465333489042877617012736 and other part 0
                     the int string is 1.088308

from new int t  of 8 ---> 7 with 7.7064666748046875
     ----> using 7.7064666748046875 rst is 3.85323333740234375
     ----> using 3.85323333740234375 with intpart 3 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 3.853233

     ----> using 3.85323333740234375 rst is 1.926616668701171875
     ----> using 1.926616668701171875 with intpart 1 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142409661452933368620322725560320
with string of it 7898756447985644142144124142409661452933368620322725560320
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.9266204833984375 sq of rst 7898756447985644142144124142409661452933368620322725560320
                     with intpart 7898756447985644142144124142409661452933368620322725560320 and other part 0
                     the int string is 1.926617

     ----> using 1.926616668701171875 rst is 0.9633083343505859375
     ----> using 0.9633083343505859375 with intpart 0 and fract 0.9633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142416181189878550315461915967488
with string of it 7898756447985644142144124142416181189878550315461915967488
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.9633026123046875 sq of rst 7898756447985644142144124142416181189878550315461915967488
                     with intpart 7898756447985644142144124142416181189878550315461915967488 and other part 0
                     the int string is 0.963308

     ----> using 0.9633083343505859375 rst is 0.48165416717529296875
     ----> using 0.48165416717529296875 with intpart 0 and fract 0.48165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142330569899036720735825923407872
with string of it 7898756447985644142144124142330569899036720735825923407872
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.481658935546875 sq of rst 7898756447985644142144124142330569899036720735825923407872
                     with intpart 7898756447985644142144124142330569899036720735825923407872 and other part 0
                     the int string is 0.481654

     ----> using 0.48165416717529296875 rst is 0.240827083587646484375
     ----> using 0.240827083587646484375 with intpart 0 and fract 0.240827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142287761835764166716749577715712
with string of it 7898756447985644142144124142287761835764166716749577715712
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.2408294677734375 sq of rst 7898756447985644142144124142287761835764166716749577715712
                     with intpart 7898756447985644142144124142287761835764166716749577715712 and other part 0
                     the int string is 0.240827

     ----> using 0.240827083587646484375 rst is 0.1204135417938232421875
     ----> using 0.1204135417938232421875 with intpart 0 and fract 0.1204135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142266356595202070092582230163456
with string of it 7898756447985644142144124142266356595202070092582230163456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1204071044921875 sq of rst 7898756447985644142144124142266356595202070092582230163456
                     with intpart 7898756447985644142144124142266356595202070092582230163456 and other part 0
                     the int string is 0.120414

     ----> using 0.1204135417938232421875 rst is 0.06020677089691162109375
     ----> using 0.06020677089691162109375 with intpart 0 and fract 0.06020677089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142255657601698480624386080505856
with string of it 7898756447985644142144124142255657601698480624386080505856
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.060211181640625 sq of rst 7898756447985644142144124142255657601698480624386080505856
                     with intpart 7898756447985644142144124142255657601698480624386080505856 and other part 0
                     the int string is 0.060207

from new int t  of 7 ---> 6 with 6.7064666748046875
     ----> using 6.7064666748046875 rst is 3.35323333740234375
     ----> using 3.35323333740234375 with intpart 3 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 3.353233

     ----> using 3.35323333740234375 rst is 1.676616668701171875
     ----> using 1.676616668701171875 with intpart 1 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142365223757655974081118875942912
with string of it 7898756447985644142144124142365223757655974081118875942912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.6766204833984375 sq of rst 7898756447985644142144124142365223757655974081118875942912
                     with intpart 7898756447985644142144124142365223757655974081118875942912 and other part 0
                     the int string is 1.676617

     ----> using 1.676616668701171875 rst is 0.8383083343505859375
     ----> using 0.8383083343505859375 with intpart 0 and fract 0.8383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142393962342239853045859991158784
with string of it 7898756447985644142144124142393962342239853045859991158784
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.8383026123046875 sq of rst 7898756447985644142144124142393962342239853045859991158784
                     with intpart 7898756447985644142144124142393962342239853045859991158784 and other part 0
                     the int string is 0.838308

     ----> using 0.8383083343505859375 rst is 0.41915416717529296875
     ----> using 0.41915416717529296875 with intpart 0 and fract 0.41915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142319459870754462293710373650432
with string of it 7898756447985644142144124142319459870754462293710373650432
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.419158935546875 sq of rst 7898756447985644142144124142319459870754462293710373650432
                     with intpart 7898756447985644142144124142319459870754462293710373650432 and other part 0
                     the int string is 0.419154

     ----> using 0.41915416717529296875 rst is 0.209577083587646484375
     ----> using 0.209577083587646484375 with intpart 0 and fract 0.209577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142282206821623037495691802836992
with string of it 7898756447985644142144124142282206821623037495691802836992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.2095794677734375 sq of rst 7898756447985644142144124142282206821623037495691802836992
                     with intpart 7898756447985644142144124142282206821623037495691802836992 and other part 0
                     the int string is 0.209577

     ----> using 0.209577083587646484375 rst is 0.1047885417938232421875
     ----> using 0.1047885417938232421875 with intpart 0 and fract 0.1047885417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142263579692594415289367930077184
with string of it 7898756447985644142144124142263579692594415289367930077184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1047821044921875 sq of rst 7898756447985644142144124142263579692594415289367930077184
                     with intpart 7898756447985644142144124142263579692594415289367930077184 and other part 0
                     the int string is 0.104789

     ----> using 0.1047885417938232421875 rst is 0.05239427089691162109375
     ----> using 0.05239427089691162109375 with intpart 0 and fract 0.05239427089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142254268545931743415464343109632
with string of it 7898756447985644142144124142254268545931743415464343109632
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.052398681640625 sq of rst 7898756447985644142144124142254268545931743415464343109632
                     with intpart 7898756447985644142144124142254268545931743415464343109632 and other part 0
                     the int string is 0.052394

from new int t  of 6 ---> 5 with 5.7064666748046875
     ----> using 5.7064666748046875 rst is 2.85323333740234375
     ----> using 2.85323333740234375 with intpart 2 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 2.853233

     ----> using 2.85323333740234375 rst is 1.426616668701171875
     ----> using 1.426616668701171875 with intpart 1 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142320786062378579541915026325504
with string of it 7898756447985644142144124142320786062378579541915026325504
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.4266204833984375 sq of rst 7898756447985644142144124142320786062378579541915026325504
                     with intpart 7898756447985644142144124142320786062378579541915026325504 and other part 0
                     the int string is 1.426617

     ----> using 1.426616668701171875 rst is 0.7133083343505859375
     ----> using 0.7133083343505859375 with intpart 0 and fract 0.7133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142371743494601155776258066350080
with string of it 7898756447985644142144124142371743494601155776258066350080
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.7133026123046875 sq of rst 7898756447985644142144124142371743494601155776258066350080
                     with intpart 7898756447985644142144124142371743494601155776258066350080 and other part 0
                     the int string is 0.713308

     ----> using 0.7133083343505859375 rst is 0.35665416717529296875
     ----> using 0.35665416717529296875 with intpart 0 and fract 0.35665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142308351051398023466223998599168
with string of it 7898756447985644142144124142308351051398023466223998599168
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.356658935546875 sq of rst 7898756447985644142144124142308351051398023466223998599168
                     with intpart 7898756447985644142144124142308351051398023466223998599168 and other part 0
                     the int string is 0.356654

     ----> using 0.35665416717529296875 rst is 0.178327083587646484375
     ----> using 0.178327083587646484375 with intpart 0 and fract 0.178327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276653016407727889263202664448
with string of it 7898756447985644142144124142276653016407727889263202664448
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1783294677734375 sq of rst 7898756447985644142144124142276653016407727889263202664448
                     with intpart 7898756447985644142144124142276653016407727889263202664448 and other part 0
                     the int string is 0.178327

     ----> using 0.178327083587646484375 rst is 0.0891635417938232421875
     ----> using 0.0891635417938232421875 with intpart 0 and fract 0.0891635417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142260802789986760486153629990912
with string of it 7898756447985644142144124142260802789986760486153629990912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0891571044921875 sq of rst 7898756447985644142144124142260802789986760486153629990912
                     with intpart 7898756447985644142144124142260802789986760486153629990912 and other part 0
                     the int string is 0.089164

from new int t  of 5 ---> 4 with 4.7064666748046875
     ----> using 4.7064666748046875 rst is 2.35323333740234375
     ----> using 2.35323333740234375 with intpart 2 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 2.353233

     ----> using 2.35323333740234375 rst is 1.176616668701171875
     ----> using 1.176616668701171875 with intpart 1 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276348367101185002711176708096
with string of it 7898756447985644142144124142276348367101185002711176708096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1766204833984375 sq of rst 7898756447985644142144124142276348367101185002711176708096
                     with intpart 7898756447985644142144124142276348367101185002711176708096 and other part 0
                     the int string is 1.176617

     ----> using 1.176616668701171875 rst is 0.5883083343505859375
     ----> using 0.5883083343505859375 with intpart 0 and fract 0.5883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142349525855888278121285316247552
with string of it 7898756447985644142144124142349525855888278121285316247552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.5883026123046875 sq of rst 7898756447985644142144124142349525855888278121285316247552
                     with intpart 7898756447985644142144124142349525855888278121285316247552 and other part 0
                     the int string is 0.588308

     ----> using 0.5883083343505859375 rst is 0.29415416717529296875
     ----> using 0.29415416717529296875 with intpart 0 and fract 0.29415416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142297241023115765024108448841728
with string of it 7898756447985644142144124142297241023115765024108448841728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.294158935546875 sq of rst 7898756447985644142144124142297241023115765024108448841728
                     with intpart 7898756447985644142144124142297241023115765024108448841728 and other part 0
                     the int string is 0.294154

     ----> using 0.29415416717529296875 rst is 0.147077083587646484375
     ----> using 0.147077083587646484375 with intpart 0 and fract 0.147077083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142271098002266598668205427785728
with string of it 7898756447985644142144124142271098002266598668205427785728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1470794677734375 sq of rst 7898756447985644142144124142271098002266598668205427785728
                     with intpart 7898756447985644142144124142271098002266598668205427785728 and other part 0
                     the int string is 0.147077

     ----> using 0.147077083587646484375 rst is 0.0735385417938232421875
     ----> using 0.0735385417938232421875 with intpart 0 and fract 0.0735385417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142258024678453286068310155198464
with string of it 7898756447985644142144124142258024678453286068310155198464
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0735321044921875 sq of rst 7898756447985644142144124142258024678453286068310155198464
                     with intpart 7898756447985644142144124142258024678453286068310155198464 and other part 0
                     the int string is 0.073539

from new int t  of 4 ---> 3 with 3.7064666748046875
     ----> using 3.7064666748046875 rst is 1.85323333740234375
     ----> using 1.85323333740234375 with intpart 1 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 1.853233

     ----> using 1.85323333740234375 rst is 0.926616668701171875
     ----> using 0.926616668701171875 with intpart 0 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142409661452933368620322725560320
with string of it 7898756447985644142144124142409661452933368620322725560320
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.9266204833984375 sq of rst 7898756447985644142144124142409661452933368620322725560320
                     with intpart 7898756447985644142144124142409661452933368620322725560320 and other part 0
                     the int string is 0.926617

     ----> using 0.926616668701171875 rst is 0.4633083343505859375
     ----> using 0.4633083343505859375 with intpart 0 and fract 0.4633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142327307008249580851683391438848
with string of it 7898756447985644142144124142327307008249580851683391438848
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.4633026123046875 sq of rst 7898756447985644142144124142327307008249580851683391438848
                     with intpart 7898756447985644142144124142327307008249580851683391438848 and other part 0
                     the int string is 0.463308

     ----> using 0.4633083343505859375 rst is 0.23165416717529296875
     ----> using 0.23165416717529296875 with intpart 0 and fract 0.23165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142286132203759326196622073790464
with string of it 7898756447985644142144124142286132203759326196622073790464
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.231658935546875 sq of rst 7898756447985644142144124142286132203759326196622073790464
                     with intpart 7898756447985644142144124142286132203759326196622073790464 and other part 0
                     the int string is 0.231654

     ----> using 0.23165416717529296875 rst is 0.115827083587646484375
     ----> using 0.115827083587646484375 with intpart 0 and fract 0.115827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142265542988125469447147652907008
with string of it 7898756447985644142144124142265542988125469447147652907008
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1158294677734375 sq of rst 7898756447985644142144124142265542988125469447147652907008
                     with intpart 7898756447985644142144124142265542988125469447147652907008 and other part 0
                     the int string is 0.115827

     ----> using 0.115827083587646484375 rst is 0.0579135417938232421875
     ----> using 0.0579135417938232421875 with intpart 0 and fract 0.0579135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142255247775845631265095855112192
with string of it 7898756447985644142144124142255247775845631265095855112192
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0579071044921875 sq of rst 7898756447985644142144124142255247775845631265095855112192
                     with intpart 7898756447985644142144124142255247775845631265095855112192 and other part 0
                     the int string is 0.057914

from new int t  of 3 ---> 2 with 2.7064666748046875
     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142365223757655974081118875942912
with string of it 7898756447985644142144124142365223757655974081118875942912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.6766204833984375 sq of rst 7898756447985644142144124142365223757655974081118875942912
                     with intpart 7898756447985644142144124142365223757655974081118875942912 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142305088160610883582081466630144
with string of it 7898756447985644142144124142305088160610883582081466630144
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.3383026123046875 sq of rst 7898756447985644142144124142305088160610883582081466630144
                     with intpart 7898756447985644142144124142305088160610883582081466630144 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142275022175477067754506524033024
with string of it 7898756447985644142144124142275022175477067754506524033024
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.169158935546875 sq of rst 7898756447985644142144124142275022175477067754506524033024
                     with intpart 7898756447985644142144124142275022175477067754506524033024 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142259987973984340226089878028288
with string of it 7898756447985644142144124142259987973984340226089878028288
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0845794677734375 sq of rst 7898756447985644142144124142259987973984340226089878028288
                     with intpart 7898756447985644142144124142259987973984340226089878028288 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142320786062378579541915026325504
with string of it 7898756447985644142144124142320786062378579541915026325504
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.4266204833984375 sq of rst 7898756447985644142144124142320786062378579541915026325504
                     with intpart 7898756447985644142144124142320786062378579541915026325504 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142282869312972186312479541821440
with string of it 7898756447985644142144124142282869312972186312479541821440
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.2133026123046875 sq of rst 7898756447985644142144124142282869312972186312479541821440
                     with intpart 7898756447985644142144124142282869312972186312479541821440 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142263913356120628927020148981760
with string of it 7898756447985644142144124142263913356120628927020148981760
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.106658935546875 sq of rst 7898756447985644142144124142263913356120628927020148981760
                     with intpart 7898756447985644142144124142263913356120628927020148981760 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142254434168769030619661277855744
with string of it 7898756447985644142144124142254434168769030619661277855744
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0533294677734375 sq of rst 7898756447985644142144124142254434168769030619661277855744
                     with intpart 7898756447985644142144124142254434168769030619661277855744 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276348367101185002711176708096
with string of it 7898756447985644142144124142276348367101185002711176708096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1766204833984375 sq of rst 7898756447985644142144124142276348367101185002711176708096
                     with intpart 7898756447985644142144124142276348367101185002711176708096 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142260650465333489042877617012736
with string of it 7898756447985644142144124142260650465333489042877617012736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0883026123046875 sq of rst 7898756447985644142144124142260650465333489042877617012736
                     with intpart 7898756447985644142144124142260650465333489042877617012736 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572202

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572202 
     doted 0 
     makes 88874948371212256598707572202

result 88874948371212256598707572188 
     doted 0.7064666748046875 
     makes 88874948371212256598707572188.7064666748046875


for the integer string 88874948371212256598707572188.000000
the numbers are 29
the retrievable integer digit is 8

entering with number of 8.7064666748046875
recheck values of 88874948371212256598707572202 and result of 7898756447985644142144124142422704553601190854488630493184 with intpart 7898756447985644142144124142422704553601190854488630493184

recheck power 88874948371212256598707572202 of result 7898756447985644142144124142422704553601190854488630493184
lowering second to value of 88874948371212256598707572202

     ----> using 8.7064666748046875 rst is 4.35323333740234375
     ----> using 4.35323333740234375 with intpart 4 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 4.353233

     ----> using 4.35323333740234375 rst is 2.176616668701171875
     ----> using 2.176616668701171875 with intpart 2 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276348367101185002711176708096
with string of it 7898756447985644142144124142276348367101185002711176708096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1766204833984375 sq of rst 7898756447985644142144124142276348367101185002711176708096
                     with intpart 7898756447985644142144124142276348367101185002711176708096 and other part 0
                     the int string is 2.176617

     ----> using 2.176616668701171875 rst is 1.0883083343505859375
     ----> using 1.0883083343505859375 with intpart 1 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142260650465333489042877617012736
with string of it 7898756447985644142144124142260650465333489042877617012736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0883026123046875 sq of rst 7898756447985644142144124142260650465333489042877617012736
                     with intpart 7898756447985644142144124142260650465333489042877617012736 and other part 0
                     the int string is 1.088308

from new int t  of 8 ---> 7 with 7.7064666748046875
     ----> using 7.7064666748046875 rst is 3.85323333740234375
     ----> using 3.85323333740234375 with intpart 3 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 3.853233

     ----> using 3.85323333740234375 rst is 1.926616668701171875
     ----> using 1.926616668701171875 with intpart 1 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142409661452933368620322725560320
with string of it 7898756447985644142144124142409661452933368620322725560320
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.9266204833984375 sq of rst 7898756447985644142144124142409661452933368620322725560320
                     with intpart 7898756447985644142144124142409661452933368620322725560320 and other part 0
                     the int string is 1.926617

     ----> using 1.926616668701171875 rst is 0.9633083343505859375
     ----> using 0.9633083343505859375 with intpart 0 and fract 0.9633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142416181189878550315461915967488
with string of it 7898756447985644142144124142416181189878550315461915967488
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.9633026123046875 sq of rst 7898756447985644142144124142416181189878550315461915967488
                     with intpart 7898756447985644142144124142416181189878550315461915967488 and other part 0
                     the int string is 0.963308

     ----> using 0.9633083343505859375 rst is 0.48165416717529296875
     ----> using 0.48165416717529296875 with intpart 0 and fract 0.48165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142330569899036720735825923407872
with string of it 7898756447985644142144124142330569899036720735825923407872
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.481658935546875 sq of rst 7898756447985644142144124142330569899036720735825923407872
                     with intpart 7898756447985644142144124142330569899036720735825923407872 and other part 0
                     the int string is 0.481654

     ----> using 0.48165416717529296875 rst is 0.240827083587646484375
     ----> using 0.240827083587646484375 with intpart 0 and fract 0.240827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142287761835764166716749577715712
with string of it 7898756447985644142144124142287761835764166716749577715712
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.2408294677734375 sq of rst 7898756447985644142144124142287761835764166716749577715712
                     with intpart 7898756447985644142144124142287761835764166716749577715712 and other part 0
                     the int string is 0.240827

     ----> using 0.240827083587646484375 rst is 0.1204135417938232421875
     ----> using 0.1204135417938232421875 with intpart 0 and fract 0.1204135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142266356595202070092582230163456
with string of it 7898756447985644142144124142266356595202070092582230163456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1204071044921875 sq of rst 7898756447985644142144124142266356595202070092582230163456
                     with intpart 7898756447985644142144124142266356595202070092582230163456 and other part 0
                     the int string is 0.120414

     ----> using 0.1204135417938232421875 rst is 0.06020677089691162109375
     ----> using 0.06020677089691162109375 with intpart 0 and fract 0.06020677089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142255657601698480624386080505856
with string of it 7898756447985644142144124142255657601698480624386080505856
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.060211181640625 sq of rst 7898756447985644142144124142255657601698480624386080505856
                     with intpart 7898756447985644142144124142255657601698480624386080505856 and other part 0
                     the int string is 0.060207

from new int t  of 7 ---> 6 with 6.7064666748046875
     ----> using 6.7064666748046875 rst is 3.35323333740234375
     ----> using 3.35323333740234375 with intpart 3 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 3.353233

     ----> using 3.35323333740234375 rst is 1.676616668701171875
     ----> using 1.676616668701171875 with intpart 1 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142365223757655974081118875942912
with string of it 7898756447985644142144124142365223757655974081118875942912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.6766204833984375 sq of rst 7898756447985644142144124142365223757655974081118875942912
                     with intpart 7898756447985644142144124142365223757655974081118875942912 and other part 0
                     the int string is 1.676617

     ----> using 1.676616668701171875 rst is 0.8383083343505859375
     ----> using 0.8383083343505859375 with intpart 0 and fract 0.8383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142393962342239853045859991158784
with string of it 7898756447985644142144124142393962342239853045859991158784
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.8383026123046875 sq of rst 7898756447985644142144124142393962342239853045859991158784
                     with intpart 7898756447985644142144124142393962342239853045859991158784 and other part 0
                     the int string is 0.838308

     ----> using 0.8383083343505859375 rst is 0.41915416717529296875
     ----> using 0.41915416717529296875 with intpart 0 and fract 0.41915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142319459870754462293710373650432
with string of it 7898756447985644142144124142319459870754462293710373650432
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.419158935546875 sq of rst 7898756447985644142144124142319459870754462293710373650432
                     with intpart 7898756447985644142144124142319459870754462293710373650432 and other part 0
                     the int string is 0.419154

     ----> using 0.41915416717529296875 rst is 0.209577083587646484375
     ----> using 0.209577083587646484375 with intpart 0 and fract 0.209577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142282206821623037495691802836992
with string of it 7898756447985644142144124142282206821623037495691802836992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.2095794677734375 sq of rst 7898756447985644142144124142282206821623037495691802836992
                     with intpart 7898756447985644142144124142282206821623037495691802836992 and other part 0
                     the int string is 0.209577

     ----> using 0.209577083587646484375 rst is 0.1047885417938232421875
     ----> using 0.1047885417938232421875 with intpart 0 and fract 0.1047885417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142263579692594415289367930077184
with string of it 7898756447985644142144124142263579692594415289367930077184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1047821044921875 sq of rst 7898756447985644142144124142263579692594415289367930077184
                     with intpart 7898756447985644142144124142263579692594415289367930077184 and other part 0
                     the int string is 0.104789

     ----> using 0.1047885417938232421875 rst is 0.05239427089691162109375
     ----> using 0.05239427089691162109375 with intpart 0 and fract 0.05239427089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142254268545931743415464343109632
with string of it 7898756447985644142144124142254268545931743415464343109632
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.052398681640625 sq of rst 7898756447985644142144124142254268545931743415464343109632
                     with intpart 7898756447985644142144124142254268545931743415464343109632 and other part 0
                     the int string is 0.052394

from new int t  of 6 ---> 5 with 5.7064666748046875
     ----> using 5.7064666748046875 rst is 2.85323333740234375
     ----> using 2.85323333740234375 with intpart 2 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 2.853233

     ----> using 2.85323333740234375 rst is 1.426616668701171875
     ----> using 1.426616668701171875 with intpart 1 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142320786062378579541915026325504
with string of it 7898756447985644142144124142320786062378579541915026325504
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.4266204833984375 sq of rst 7898756447985644142144124142320786062378579541915026325504
                     with intpart 7898756447985644142144124142320786062378579541915026325504 and other part 0
                     the int string is 1.426617

     ----> using 1.426616668701171875 rst is 0.7133083343505859375
     ----> using 0.7133083343505859375 with intpart 0 and fract 0.7133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142371743494601155776258066350080
with string of it 7898756447985644142144124142371743494601155776258066350080
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.7133026123046875 sq of rst 7898756447985644142144124142371743494601155776258066350080
                     with intpart 7898756447985644142144124142371743494601155776258066350080 and other part 0
                     the int string is 0.713308

     ----> using 0.7133083343505859375 rst is 0.35665416717529296875
     ----> using 0.35665416717529296875 with intpart 0 and fract 0.35665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142308351051398023466223998599168
with string of it 7898756447985644142144124142308351051398023466223998599168
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.356658935546875 sq of rst 7898756447985644142144124142308351051398023466223998599168
                     with intpart 7898756447985644142144124142308351051398023466223998599168 and other part 0
                     the int string is 0.356654

     ----> using 0.35665416717529296875 rst is 0.178327083587646484375
     ----> using 0.178327083587646484375 with intpart 0 and fract 0.178327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276653016407727889263202664448
with string of it 7898756447985644142144124142276653016407727889263202664448
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1783294677734375 sq of rst 7898756447985644142144124142276653016407727889263202664448
                     with intpart 7898756447985644142144124142276653016407727889263202664448 and other part 0
                     the int string is 0.178327

     ----> using 0.178327083587646484375 rst is 0.0891635417938232421875
     ----> using 0.0891635417938232421875 with intpart 0 and fract 0.0891635417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142260802789986760486153629990912
with string of it 7898756447985644142144124142260802789986760486153629990912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0891571044921875 sq of rst 7898756447985644142144124142260802789986760486153629990912
                     with intpart 7898756447985644142144124142260802789986760486153629990912 and other part 0
                     the int string is 0.089164

from new int t  of 5 ---> 4 with 4.7064666748046875
     ----> using 4.7064666748046875 rst is 2.35323333740234375
     ----> using 2.35323333740234375 with intpart 2 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 2.353233

     ----> using 2.35323333740234375 rst is 1.176616668701171875
     ----> using 1.176616668701171875 with intpart 1 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276348367101185002711176708096
with string of it 7898756447985644142144124142276348367101185002711176708096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1766204833984375 sq of rst 7898756447985644142144124142276348367101185002711176708096
                     with intpart 7898756447985644142144124142276348367101185002711176708096 and other part 0
                     the int string is 1.176617

     ----> using 1.176616668701171875 rst is 0.5883083343505859375
     ----> using 0.5883083343505859375 with intpart 0 and fract 0.5883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142349525855888278121285316247552
with string of it 7898756447985644142144124142349525855888278121285316247552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.5883026123046875 sq of rst 7898756447985644142144124142349525855888278121285316247552
                     with intpart 7898756447985644142144124142349525855888278121285316247552 and other part 0
                     the int string is 0.588308

     ----> using 0.5883083343505859375 rst is 0.29415416717529296875
     ----> using 0.29415416717529296875 with intpart 0 and fract 0.29415416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142297241023115765024108448841728
with string of it 7898756447985644142144124142297241023115765024108448841728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.294158935546875 sq of rst 7898756447985644142144124142297241023115765024108448841728
                     with intpart 7898756447985644142144124142297241023115765024108448841728 and other part 0
                     the int string is 0.294154

     ----> using 0.29415416717529296875 rst is 0.147077083587646484375
     ----> using 0.147077083587646484375 with intpart 0 and fract 0.147077083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142271098002266598668205427785728
with string of it 7898756447985644142144124142271098002266598668205427785728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1470794677734375 sq of rst 7898756447985644142144124142271098002266598668205427785728
                     with intpart 7898756447985644142144124142271098002266598668205427785728 and other part 0
                     the int string is 0.147077

     ----> using 0.147077083587646484375 rst is 0.0735385417938232421875
     ----> using 0.0735385417938232421875 with intpart 0 and fract 0.0735385417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142258024678453286068310155198464
with string of it 7898756447985644142144124142258024678453286068310155198464
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0735321044921875 sq of rst 7898756447985644142144124142258024678453286068310155198464
                     with intpart 7898756447985644142144124142258024678453286068310155198464 and other part 0
                     the int string is 0.073539

from new int t  of 4 ---> 3 with 3.7064666748046875
     ----> using 3.7064666748046875 rst is 1.85323333740234375
     ----> using 1.85323333740234375 with intpart 1 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 1.853233

     ----> using 1.85323333740234375 rst is 0.926616668701171875
     ----> using 0.926616668701171875 with intpart 0 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142409661452933368620322725560320
with string of it 7898756447985644142144124142409661452933368620322725560320
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.9266204833984375 sq of rst 7898756447985644142144124142409661452933368620322725560320
                     with intpart 7898756447985644142144124142409661452933368620322725560320 and other part 0
                     the int string is 0.926617

     ----> using 0.926616668701171875 rst is 0.4633083343505859375
     ----> using 0.4633083343505859375 with intpart 0 and fract 0.4633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142327307008249580851683391438848
with string of it 7898756447985644142144124142327307008249580851683391438848
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.4633026123046875 sq of rst 7898756447985644142144124142327307008249580851683391438848
                     with intpart 7898756447985644142144124142327307008249580851683391438848 and other part 0
                     the int string is 0.463308

     ----> using 0.4633083343505859375 rst is 0.23165416717529296875
     ----> using 0.23165416717529296875 with intpart 0 and fract 0.23165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142286132203759326196622073790464
with string of it 7898756447985644142144124142286132203759326196622073790464
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.231658935546875 sq of rst 7898756447985644142144124142286132203759326196622073790464
                     with intpart 7898756447985644142144124142286132203759326196622073790464 and other part 0
                     the int string is 0.231654

     ----> using 0.23165416717529296875 rst is 0.115827083587646484375
     ----> using 0.115827083587646484375 with intpart 0 and fract 0.115827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142265542988125469447147652907008
with string of it 7898756447985644142144124142265542988125469447147652907008
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1158294677734375 sq of rst 7898756447985644142144124142265542988125469447147652907008
                     with intpart 7898756447985644142144124142265542988125469447147652907008 and other part 0
                     the int string is 0.115827

     ----> using 0.115827083587646484375 rst is 0.0579135417938232421875
     ----> using 0.0579135417938232421875 with intpart 0 and fract 0.0579135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142255247775845631265095855112192
with string of it 7898756447985644142144124142255247775845631265095855112192
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0579071044921875 sq of rst 7898756447985644142144124142255247775845631265095855112192
                     with intpart 7898756447985644142144124142255247775845631265095855112192 and other part 0
                     the int string is 0.057914

from new int t  of 3 ---> 2 with 2.7064666748046875
     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142365223757655974081118875942912
with string of it 7898756447985644142144124142365223757655974081118875942912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.6766204833984375 sq of rst 7898756447985644142144124142365223757655974081118875942912
                     with intpart 7898756447985644142144124142365223757655974081118875942912 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142305088160610883582081466630144
with string of it 7898756447985644142144124142305088160610883582081466630144
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.3383026123046875 sq of rst 7898756447985644142144124142305088160610883582081466630144
                     with intpart 7898756447985644142144124142305088160610883582081466630144 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142275022175477067754506524033024
with string of it 7898756447985644142144124142275022175477067754506524033024
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.169158935546875 sq of rst 7898756447985644142144124142275022175477067754506524033024
                     with intpart 7898756447985644142144124142275022175477067754506524033024 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142259987973984340226089878028288
with string of it 7898756447985644142144124142259987973984340226089878028288
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0845794677734375 sq of rst 7898756447985644142144124142259987973984340226089878028288
                     with intpart 7898756447985644142144124142259987973984340226089878028288 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142396618352265546386156820627456
with string of it 7898756447985644142144124142396618352265546386156820627456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.853240966796875 sq of rst 7898756447985644142144124142396618352265546386156820627456
                     with intpart 7898756447985644142144124142396618352265546386156820627456 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142320786062378579541915026325504
with string of it 7898756447985644142144124142320786062378579541915026325504
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.4266204833984375 sq of rst 7898756447985644142144124142320786062378579541915026325504
                     with intpart 7898756447985644142144124142320786062378579541915026325504 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142282869312972186312479541821440
with string of it 7898756447985644142144124142282869312972186312479541821440
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.2133026123046875 sq of rst 7898756447985644142144124142282869312972186312479541821440
                     with intpart 7898756447985644142144124142282869312972186312479541821440 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142263913356120628927020148981760
with string of it 7898756447985644142144124142263913356120628927020148981760
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.106658935546875 sq of rst 7898756447985644142144124142263913356120628927020148981760
                     with intpart 7898756447985644142144124142263913356120628927020148981760 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142254434168769030619661277855744
with string of it 7898756447985644142144124142254434168769030619661277855744
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0533294677734375 sq of rst 7898756447985644142144124142254434168769030619661277855744
                     with intpart 7898756447985644142144124142254434168769030619661277855744 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142307742961710757307749121392640
with string of it 7898756447985644142144124142307742961710757307749121392640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.353240966796875 sq of rst 7898756447985644142144124142307742961710757307749121392640
                     with intpart 7898756447985644142144124142307742961710757307749121392640 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142276348367101185002711176708096
with string of it 7898756447985644142144124142276348367101185002711176708096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.1766204833984375 sq of rst 7898756447985644142144124142276348367101185002711176708096
                     with intpart 7898756447985644142144124142276348367101185002711176708096 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142260650465333489042877617012736
with string of it 7898756447985644142144124142260650465333489042877617012736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572201.0883026123046875 sq of rst 7898756447985644142144124142260650465333489042877617012736
                     with intpart 7898756447985644142144124142260650465333489042877617012736 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572201

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572201 
     doted 0 
     makes 88874948371212256598707572201

result 88874948371212256598707572189 
     doted 0.7064666748046875 
     makes 88874948371212256598707572189.7064666748046875


for the integer string 88874948371212256598707572189.000000
the numbers are 29
the retrievable integer digit is 9

entering with number of 9.7064666748046875
recheck values of 88874948371212256598707572201 and result of 7898756447985644142144124142244954981417432312302406729728 with intpart 7898756447985644142144124142244954981417432312302406729728

recheck power 88874948371212256598707572201 of result 7898756447985644142144124142244954981417432312302406729728
lowering second to value of 88874948371212256598707572201

     ----> using 9.7064666748046875 rst is 4.85323333740234375
     ----> using 4.85323333740234375 with intpart 4 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142218867571155968229341422157824
with string of it 7898756447985644142144124142218867571155968229341422157824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.853240966796875 sq of rst 7898756447985644142144124142218867571155968229341422157824
                     with intpart 7898756447985644142144124142218867571155968229341422157824 and other part 0
                     the int string is 4.853233

     ----> using 4.85323333740234375 rst is 2.426616668701171875
     ----> using 2.426616668701171875 with intpart 2 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142143036490194820999728802562048
with string of it 7898756447985644142144124142143036490194820999728802562048
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.4266204833984375 sq of rst 7898756447985644142144124142143036490194820999728802562048
                     with intpart 7898756447985644142144124142143036490194820999728802562048 and other part 0
                     the int string is 2.426617

     ----> using 2.426616668701171875 rst is 1.2133083343505859375
     ----> using 1.2133083343505859375 with intpart 1 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142105119740788427770293318057984
with string of it 7898756447985644142144124142105119740788427770293318057984
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.2133026123046875 sq of rst 7898756447985644142144124142105119740788427770293318057984
                     with intpart 7898756447985644142144124142105119740788427770293318057984 and other part 0
                     the int string is 1.213308

     ----> using 1.2133083343505859375 rst is 0.60665416717529296875
     ----> using 0.60665416717529296875 with intpart 0 and fract 0.60665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142175037965565839848612449746944
with string of it 7898756447985644142144124142175037965565839848612449746944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.606658935546875 sq of rst 7898756447985644142144124142175037965565839848612449746944
                     with intpart 7898756447985644142144124142175037965565839848612449746944 and other part 0
                     the int string is 0.606654

     ----> using 0.60665416717529296875 rst is 0.303327083587646484375
     ----> using 0.303327083587646484375 with intpart 0 and fract 0.303327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142121121082936847002049729003520
with string of it 7898756447985644142144124142121121082936847002049729003520
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.3033294677734375 sq of rst 7898756447985644142144124142121121082936847002049729003520
                     with intpart 7898756447985644142144124142121121082936847002049729003520 and other part 0
                     the int string is 0.303327

     ----> using 0.303327083587646484375 rst is 0.1516635417938232421875
     ----> using 0.1516635417938232421875 with intpart 0 and fract 0.1516635417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142094162037159440771453781278720
with string of it 7898756447985644142144124142094162037159440771453781278720
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1516571044921875 sq of rst 7898756447985644142144124142094162037159440771453781278720
                     with intpart 7898756447985644142144124142094162037159440771453781278720 and other part 0
                     the int string is 0.151664

     ----> using 0.1516635417938232421875 rst is 0.07583177089691162109375
     ----> using 0.07583177089691162109375 with intpart 0 and fract 0.07583177089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142080684932122376885414156828672
with string of it 7898756447985644142144124142080684932122376885414156828672
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.075836181640625 sq of rst 7898756447985644142144124142080684932122376885414156828672
                     with intpart 7898756447985644142144124142080684932122376885414156828672 and other part 0
                     the int string is 0.075832

from new int t  of 9 ---> 8 with 8.7064666748046875
     ----> using 8.7064666748046875 rst is 4.35323333740234375
     ----> using 4.35323333740234375 with intpart 4 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142129993389526998765562897629184
with string of it 7898756447985644142144124142129993389526998765562897629184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.353240966796875 sq of rst 7898756447985644142144124142129993389526998765562897629184
                     with intpart 7898756447985644142144124142129993389526998765562897629184 and other part 0
                     the int string is 4.353233

     ----> using 4.35323333740234375 rst is 2.176616668701171875
     ----> using 2.176616668701171875 with intpart 2 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142098598794917426460524952944640
with string of it 7898756447985644142144124142098598794917426460524952944640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1766204833984375 sq of rst 7898756447985644142144124142098598794917426460524952944640
                     with intpart 7898756447985644142144124142098598794917426460524952944640 and other part 0
                     the int string is 2.176617

     ----> using 2.176616668701171875 rst is 1.0883083343505859375
     ----> using 1.0883083343505859375 with intpart 1 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142082900893149730500691393249280
with string of it 7898756447985644142144124142082900893149730500691393249280
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0883026123046875 sq of rst 7898756447985644142144124142082900893149730500691393249280
                     with intpart 7898756447985644142144124142082900893149730500691393249280 and other part 0
                     the int string is 1.088308

from new int t  of 8 ---> 7 with 7.7064666748046875
     ----> using 7.7064666748046875 rst is 3.85323333740234375
     ----> using 3.85323333740234375 with intpart 3 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142218867571155968229341422157824
with string of it 7898756447985644142144124142218867571155968229341422157824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.853240966796875 sq of rst 7898756447985644142144124142218867571155968229341422157824
                     with intpart 7898756447985644142144124142218867571155968229341422157824 and other part 0
                     the int string is 3.853233

     ----> using 3.85323333740234375 rst is 1.926616668701171875
     ----> using 1.926616668701171875 with intpart 1 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142231911880749610078136501796864
with string of it 7898756447985644142144124142231911880749610078136501796864
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.9266204833984375 sq of rst 7898756447985644142144124142231911880749610078136501796864
                     with intpart 7898756447985644142144124142231911880749610078136501796864 and other part 0
                     the int string is 1.926617

     ----> using 1.926616668701171875 rst is 0.9633083343505859375
     ----> using 0.9633083343505859375 with intpart 0 and fract 0.9633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142238431617694791773275692204032
with string of it 7898756447985644142144124142238431617694791773275692204032
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.9633026123046875 sq of rst 7898756447985644142144124142238431617694791773275692204032
                     with intpart 7898756447985644142144124142238431617694791773275692204032 and other part 0
                     the int string is 0.963308

     ----> using 0.9633083343505859375 rst is 0.48165416717529296875
     ----> using 0.48165416717529296875 with intpart 0 and fract 0.48165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142152819117927142579010524938240
with string of it 7898756447985644142144124142152819117927142579010524938240
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.481658935546875 sq of rst 7898756447985644142144124142152819117927142579010524938240
                     with intpart 7898756447985644142144124142152819117927142579010524938240 and other part 0
                     the int string is 0.481654

     ----> using 0.48165416717529296875 rst is 0.240827083587646484375
     ----> using 0.240827083587646484375 with intpart 0 and fract 0.240827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142110012263580408174563353952256
with string of it 7898756447985644142144124142110012263580408174563353952256
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.2408294677734375 sq of rst 7898756447985644142144124142110012263580408174563353952256
                     with intpart 7898756447985644142144124142110012263580408174563353952256 and other part 0
                     the int string is 0.240827

     ----> using 0.240827083587646484375 rst is 0.1204135417938232421875
     ----> using 0.1204135417938232421875 with intpart 0 and fract 0.1204135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142088607023018311550396006400000
with string of it 7898756447985644142144124142088607023018311550396006400000
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1204071044921875 sq of rst 7898756447985644142144124142088607023018311550396006400000
                     with intpart 7898756447985644142144124142088607023018311550396006400000 and other part 0
                     the int string is 0.120414

     ----> using 0.1204135417938232421875 rst is 0.06020677089691162109375
     ----> using 0.06020677089691162109375 with intpart 0 and fract 0.06020677089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142077906820588902467570682036224
with string of it 7898756447985644142144124142077906820588902467570682036224
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.060211181640625 sq of rst 7898756447985644142144124142077906820588902467570682036224
                     with intpart 7898756447985644142144124142077906820588902467570682036224 and other part 0
                     the int string is 0.060207

from new int t  of 7 ---> 6 with 6.7064666748046875
     ----> using 6.7064666748046875 rst is 3.35323333740234375
     ----> using 3.35323333740234375 with intpart 3 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142129993389526998765562897629184
with string of it 7898756447985644142144124142129993389526998765562897629184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.353240966796875 sq of rst 7898756447985644142144124142129993389526998765562897629184
                     with intpart 7898756447985644142144124142129993389526998765562897629184 and other part 0
                     the int string is 3.353233

     ----> using 3.35323333740234375 rst is 1.676616668701171875
     ----> using 1.676616668701171875 with intpart 1 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142187474185472215538932652179456
with string of it 7898756447985644142144124142187474185472215538932652179456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.6766204833984375 sq of rst 7898756447985644142144124142187474185472215538932652179456
                     with intpart 7898756447985644142144124142187474185472215538932652179456 and other part 0
                     the int string is 1.676617

     ----> using 1.676616668701171875 rst is 0.8383083343505859375
     ----> using 0.8383083343505859375 with intpart 0 and fract 0.8383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142216212770056094503673767395328
with string of it 7898756447985644142144124142216212770056094503673767395328
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.8383026123046875 sq of rst 7898756447985644142144124142216212770056094503673767395328
                     with intpart 7898756447985644142144124142216212770056094503673767395328 and other part 0
                     the int string is 0.838308

     ----> using 0.8383083343505859375 rst is 0.41915416717529296875
     ----> using 0.41915416717529296875 with intpart 0 and fract 0.41915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142141710298570703751524149886976
with string of it 7898756447985644142144124142141710298570703751524149886976
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.419158935546875 sq of rst 7898756447985644142144124142141710298570703751524149886976
                     with intpart 7898756447985644142144124142141710298570703751524149886976 and other part 0
                     the int string is 0.419154

     ----> using 0.41915416717529296875 rst is 0.209577083587646484375
     ----> using 0.209577083587646484375 with intpart 0 and fract 0.209577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142104457249439278953505579073536
with string of it 7898756447985644142144124142104457249439278953505579073536
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.2095794677734375 sq of rst 7898756447985644142144124142104457249439278953505579073536
                     with intpart 7898756447985644142144124142104457249439278953505579073536 and other part 0
                     the int string is 0.209577

     ----> using 0.209577083587646484375 rst is 0.1047885417938232421875
     ----> using 0.1047885417938232421875 with intpart 0 and fract 0.1047885417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142085830120410656747181706313728
with string of it 7898756447985644142144124142085830120410656747181706313728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1047821044921875 sq of rst 7898756447985644142144124142085830120410656747181706313728
                     with intpart 7898756447985644142144124142085830120410656747181706313728 and other part 0
                     the int string is 0.104789

     ----> using 0.1047885417938232421875 rst is 0.05239427089691162109375
     ----> using 0.05239427089691162109375 with intpart 0 and fract 0.05239427089691162109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142076518973747984873278119346176
with string of it 7898756447985644142144124142076518973747984873278119346176
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.052398681640625 sq of rst 7898756447985644142144124142076518973747984873278119346176
                     with intpart 7898756447985644142144124142076518973747984873278119346176 and other part 0
                     the int string is 0.052394

from new int t  of 6 ---> 5 with 5.7064666748046875
     ----> using 5.7064666748046875 rst is 2.85323333740234375
     ----> using 2.85323333740234375 with intpart 2 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142218867571155968229341422157824
with string of it 7898756447985644142144124142218867571155968229341422157824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.853240966796875 sq of rst 7898756447985644142144124142218867571155968229341422157824
                     with intpart 7898756447985644142144124142218867571155968229341422157824 and other part 0
                     the int string is 2.853233

     ----> using 2.85323333740234375 rst is 1.426616668701171875
     ----> using 1.426616668701171875 with intpart 1 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142143036490194820999728802562048
with string of it 7898756447985644142144124142143036490194820999728802562048
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.4266204833984375 sq of rst 7898756447985644142144124142143036490194820999728802562048
                     with intpart 7898756447985644142144124142143036490194820999728802562048 and other part 0
                     the int string is 1.426617

     ----> using 1.426616668701171875 rst is 0.7133083343505859375
     ----> using 0.7133083343505859375 with intpart 0 and fract 0.7133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142193993922417397234071842586624
with string of it 7898756447985644142144124142193993922417397234071842586624
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.7133026123046875 sq of rst 7898756447985644142144124142193993922417397234071842586624
                     with intpart 7898756447985644142144124142193993922417397234071842586624 and other part 0
                     the int string is 0.713308

     ----> using 0.7133083343505859375 rst is 0.35665416717529296875
     ----> using 0.35665416717529296875 with intpart 0 and fract 0.35665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142130600270288445309408600129536
with string of it 7898756447985644142144124142130600270288445309408600129536
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.356658935546875 sq of rst 7898756447985644142144124142130600270288445309408600129536
                     with intpart 7898756447985644142144124142130600270288445309408600129536 and other part 0
                     the int string is 0.356654

     ----> using 0.35665416717529296875 rst is 0.178327083587646484375
     ----> using 0.178327083587646484375 with intpart 0 and fract 0.178327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142098902235298149732447804194816
with string of it 7898756447985644142144124142098902235298149732447804194816
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1783294677734375 sq of rst 7898756447985644142144124142098902235298149732447804194816
                     with intpart 7898756447985644142144124142098902235298149732447804194816 and other part 0
                     the int string is 0.178327

     ----> using 0.178327083587646484375 rst is 0.0891635417938232421875
     ----> using 0.0891635417938232421875 with intpart 0 and fract 0.0891635417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142083052008877182329338231521280
with string of it 7898756447985644142144124142083052008877182329338231521280
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0891571044921875 sq of rst 7898756447985644142144124142083052008877182329338231521280
                     with intpart 7898756447985644142144124142083052008877182329338231521280 and other part 0
                     the int string is 0.089164

from new int t  of 5 ---> 4 with 4.7064666748046875
     ----> using 4.7064666748046875 rst is 2.35323333740234375
     ----> using 2.35323333740234375 with intpart 2 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142129993389526998765562897629184
with string of it 7898756447985644142144124142129993389526998765562897629184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.353240966796875 sq of rst 7898756447985644142144124142129993389526998765562897629184
                     with intpart 7898756447985644142144124142129993389526998765562897629184 and other part 0
                     the int string is 2.353233

     ----> using 2.35323333740234375 rst is 1.176616668701171875
     ----> using 1.176616668701171875 with intpart 1 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142098598794917426460524952944640
with string of it 7898756447985644142144124142098598794917426460524952944640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1766204833984375 sq of rst 7898756447985644142144124142098598794917426460524952944640
                     with intpart 7898756447985644142144124142098598794917426460524952944640 and other part 0
                     the int string is 1.176617

     ----> using 1.176616668701171875 rst is 0.5883083343505859375
     ----> using 0.5883083343505859375 with intpart 0 and fract 0.5883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142171775074778699964469917777920
with string of it 7898756447985644142144124142171775074778699964469917777920
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.5883026123046875 sq of rst 7898756447985644142144124142171775074778699964469917777920
                     with intpart 7898756447985644142144124142171775074778699964469917777920 and other part 0
                     the int string is 0.588308

     ----> using 0.5883083343505859375 rst is 0.29415416717529296875
     ----> using 0.29415416717529296875 with intpart 0 and fract 0.29415416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142119491450932006481922225078272
with string of it 7898756447985644142144124142119491450932006481922225078272
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.294158935546875 sq of rst 7898756447985644142144124142119491450932006481922225078272
                     with intpart 7898756447985644142144124142119491450932006481922225078272 and other part 0
                     the int string is 0.294154

     ----> using 0.29415416717529296875 rst is 0.147077083587646484375
     ----> using 0.147077083587646484375 with intpart 0 and fract 0.147077083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142093348430082840126019204022272
with string of it 7898756447985644142144124142093348430082840126019204022272
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1470794677734375 sq of rst 7898756447985644142144124142093348430082840126019204022272
                     with intpart 7898756447985644142144124142093348430082840126019204022272 and other part 0
                     the int string is 0.147077

     ----> using 0.147077083587646484375 rst is 0.0735385417938232421875
     ----> using 0.0735385417938232421875 with intpart 0 and fract 0.0735385417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142080275106269527526123931435008
with string of it 7898756447985644142144124142080275106269527526123931435008
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0735321044921875 sq of rst 7898756447985644142144124142080275106269527526123931435008
                     with intpart 7898756447985644142144124142080275106269527526123931435008 and other part 0
                     the int string is 0.073539

from new int t  of 4 ---> 3 with 3.7064666748046875
     ----> using 3.7064666748046875 rst is 1.85323333740234375
     ----> using 1.85323333740234375 with intpart 1 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142218867571155968229341422157824
with string of it 7898756447985644142144124142218867571155968229341422157824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.853240966796875 sq of rst 7898756447985644142144124142218867571155968229341422157824
                     with intpart 7898756447985644142144124142218867571155968229341422157824 and other part 0
                     the int string is 1.853233

     ----> using 1.85323333740234375 rst is 0.926616668701171875
     ----> using 0.926616668701171875 with intpart 0 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142231911880749610078136501796864
with string of it 7898756447985644142144124142231911880749610078136501796864
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.9266204833984375 sq of rst 7898756447985644142144124142231911880749610078136501796864
                     with intpart 7898756447985644142144124142231911880749610078136501796864 and other part 0
                     the int string is 0.926617

     ----> using 0.926616668701171875 rst is 0.4633083343505859375
     ----> using 0.4633083343505859375 with intpart 0 and fract 0.4633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142149556227140002694867992969216
with string of it 7898756447985644142144124142149556227140002694867992969216
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.4633026123046875 sq of rst 7898756447985644142144124142149556227140002694867992969216
                     with intpart 7898756447985644142144124142149556227140002694867992969216 and other part 0
                     the int string is 0.463308

     ----> using 0.4633083343505859375 rst is 0.23165416717529296875
     ----> using 0.23165416717529296875 with intpart 0 and fract 0.23165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142108382631575567654435850027008
with string of it 7898756447985644142144124142108382631575567654435850027008
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.231658935546875 sq of rst 7898756447985644142144124142108382631575567654435850027008
                     with intpart 7898756447985644142144124142108382631575567654435850027008 and other part 0
                     the int string is 0.231654

     ----> using 0.23165416717529296875 rst is 0.115827083587646484375
     ----> using 0.115827083587646484375 with intpart 0 and fract 0.115827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142087793415941710904961429143552
with string of it 7898756447985644142144124142087793415941710904961429143552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1158294677734375 sq of rst 7898756447985644142144124142087793415941710904961429143552
                     with intpart 7898756447985644142144124142087793415941710904961429143552 and other part 0
                     the int string is 0.115827

     ----> using 0.115827083587646484375 rst is 0.0579135417938232421875
     ----> using 0.0579135417938232421875 with intpart 0 and fract 0.0579135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142077498203661872722909631348736
with string of it 7898756447985644142144124142077498203661872722909631348736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0579071044921875 sq of rst 7898756447985644142144124142077498203661872722909631348736
                     with intpart 7898756447985644142144124142077498203661872722909631348736 and other part 0
                     the int string is 0.057914

from new int t  of 3 ---> 2 with 2.7064666748046875
     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142129993389526998765562897629184
with string of it 7898756447985644142144124142129993389526998765562897629184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.353240966796875 sq of rst 7898756447985644142144124142129993389526998765562897629184
                     with intpart 7898756447985644142144124142129993389526998765562897629184 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142187474185472215538932652179456
with string of it 7898756447985644142144124142187474185472215538932652179456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.6766204833984375 sq of rst 7898756447985644142144124142187474185472215538932652179456
                     with intpart 7898756447985644142144124142187474185472215538932652179456 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142127337379501305425266068160512
with string of it 7898756447985644142144124142127337379501305425266068160512
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.3383026123046875 sq of rst 7898756447985644142144124142127337379501305425266068160512
                     with intpart 7898756447985644142144124142127337379501305425266068160512 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142097272603293309212320300269568
with string of it 7898756447985644142144124142097272603293309212320300269568
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.169158935546875 sq of rst 7898756447985644142144124142097272603293309212320300269568
                     with intpart 7898756447985644142144124142097272603293309212320300269568 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142082238401800581683903654264832
with string of it 7898756447985644142144124142082238401800581683903654264832
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0845794677734375 sq of rst 7898756447985644142144124142082238401800581683903654264832
                     with intpart 7898756447985644142144124142082238401800581683903654264832 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142218867571155968229341422157824
with string of it 7898756447985644142144124142218867571155968229341422157824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.853240966796875 sq of rst 7898756447985644142144124142218867571155968229341422157824
                     with intpart 7898756447985644142144124142218867571155968229341422157824 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142143036490194820999728802562048
with string of it 7898756447985644142144124142143036490194820999728802562048
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.4266204833984375 sq of rst 7898756447985644142144124142143036490194820999728802562048
                     with intpart 7898756447985644142144124142143036490194820999728802562048 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142105119740788427770293318057984
with string of it 7898756447985644142144124142105119740788427770293318057984
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.2133026123046875 sq of rst 7898756447985644142144124142105119740788427770293318057984
                     with intpart 7898756447985644142144124142105119740788427770293318057984 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142086163783936870384833925218304
with string of it 7898756447985644142144124142086163783936870384833925218304
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.106658935546875 sq of rst 7898756447985644142144124142086163783936870384833925218304
                     with intpart 7898756447985644142144124142086163783936870384833925218304 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142076683387659452462845879386112
with string of it 7898756447985644142144124142076683387659452462845879386112
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0533294677734375 sq of rst 7898756447985644142144124142076683387659452462845879386112
                     with intpart 7898756447985644142144124142076683387659452462845879386112 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142129993389526998765562897629184
with string of it 7898756447985644142144124142129993389526998765562897629184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.353240966796875 sq of rst 7898756447985644142144124142129993389526998765562897629184
                     with intpart 7898756447985644142144124142129993389526998765562897629184 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142098598794917426460524952944640
with string of it 7898756447985644142144124142098598794917426460524952944640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.1766204833984375 sq of rst 7898756447985644142144124142098598794917426460524952944640
                     with intpart 7898756447985644142144124142098598794917426460524952944640 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124142082900893149730500691393249280
with string of it 7898756447985644142144124142082900893149730500691393249280
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 27
                     with combination da_rst 88874948371212256598707572200.0883026123046875 sq of rst 7898756447985644142144124142082900893149730500691393249280
                     with intpart 7898756447985644142144124142082900893149730500691393249280 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572200

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572200 
     doted 0 
     makes 88874948371212256598707572200

result 88874948371212256598707572190 
     doted 0.7064666748046875 
     makes 88874948371212256598707572190.7064666748046875


for the integer string 88874948371212256598707572190.000000
the numbers are 29
the retrievable integer digit is 0

entering with number of 0.7064666748046875
recheck values of 88874948371212256598707572200 and result of 7898756447985644142144124142067204200307854155487008260096 with intpart 7898756447985644142144124142067204200307854155487008260096

recheck power 88874948371212256598707572200 of result 7898756447985644142144124142067204200307854155487008260096
lowering second to value of 88874948371212256598707572200

     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141952243817343240223376673865728
with string of it 7898756447985644142144124141952243817343240223376673865728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572199.353240966796875 sq of rst 7898756447985644142144124141952243817343240223376673865728
                     with intpart 7898756447985644142144124141952243817343240223376673865728 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141920849222733667918338729181184
with string of it 7898756447985644142144124141920849222733667918338729181184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572199.1766204833984375 sq of rst 7898756447985644142144124141920849222733667918338729181184
                     with intpart 7898756447985644142144124141920849222733667918338729181184 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141905150112040152343875994779648
with string of it 7898756447985644142144124141905150112040152343875994779648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572199.0883026123046875 sq of rst 7898756447985644142144124141905150112040152343875994779648
                     with intpart 7898756447985644142144124141905150112040152343875994779648 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572199

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572199 
     doted 0 
     makes 88874948371212256598707572199

result 88874948371212256598707572191 
     doted 0.7064666748046875 
     makes 88874948371212256598707572191.7064666748046875


for the integer string 88874948371212256598707572191.000000
the numbers are 29
the retrievable integer digit is 1

entering with number of 1.7064666748046875
recheck values of 88874948371212256598707572199 and result of 7898756447985644142144124141889454628124095613300784496640 with intpart 7898756447985644142144124141889454628124095613300784496640

recheck power 88874948371212256598707572199 of result 7898756447985644142144124141889454628124095613300784496640
lowering second to value of 88874948371212256598707572199

     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141863368426788451144968974630912
with string of it 7898756447985644142144124141863368426788451144968974630912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.853240966796875 sq of rst 7898756447985644142144124141863368426788451144968974630912
                     with intpart 7898756447985644142144124141863368426788451144968974630912 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141787536136901484300727180328960
with string of it 7898756447985644142144124141787536136901484300727180328960
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.4266204833984375 sq of rst 7898756447985644142144124141787536136901484300727180328960
                     with intpart 7898756447985644142144124141787536136901484300727180328960 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141749619387495091071291695824896
with string of it 7898756447985644142144124141749619387495091071291695824896
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.2133026123046875 sq of rst 7898756447985644142144124141749619387495091071291695824896
                     with intpart 7898756447985644142144124141749619387495091071291695824896 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141730663430643533685832302985216
with string of it 7898756447985644142144124141730663430643533685832302985216
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.106658935546875 sq of rst 7898756447985644142144124141730663430643533685832302985216
                     with intpart 7898756447985644142144124141730663430643533685832302985216 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141721184243291935378473431859200
with string of it 7898756447985644142144124141721184243291935378473431859200
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.0533294677734375 sq of rst 7898756447985644142144124141721184243291935378473431859200
                     with intpart 7898756447985644142144124141721184243291935378473431859200 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141774493036233662066561275396096
with string of it 7898756447985644142144124141774493036233662066561275396096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.353240966796875 sq of rst 7898756447985644142144124141774493036233662066561275396096
                     with intpart 7898756447985644142144124141774493036233662066561275396096 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141743099650549909376152505417728
with string of it 7898756447985644142144124141743099650549909376152505417728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.1766204833984375 sq of rst 7898756447985644142144124141743099650549909376152505417728
                     with intpart 7898756447985644142144124141743099650549909376152505417728 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141727400539856393801689771016192
with string of it 7898756447985644142144124141727400539856393801689771016192
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572198.0883026123046875 sq of rst 7898756447985644142144124141727400539856393801689771016192
                     with intpart 7898756447985644142144124141727400539856393801689771016192 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572198

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572198 
     doted 0 
     makes 88874948371212256598707572198

result 88874948371212256598707572192 
     doted 0.7064666748046875 
     makes 88874948371212256598707572192.7064666748046875


for the integer string 88874948371212256598707572192.000000
the numbers are 29
the retrievable integer digit is 2

entering with number of 2.7064666748046875
recheck values of 88874948371212256598707572198 and result of 7898756447985644142144124141711705055940337071114560733184 with intpart 7898756447985644142144124141711705055940337071114560733184

recheck power 88874948371212256598707572198 of result 7898756447985644142144124141711705055940337071114560733184
lowering second to value of 88874948371212256598707572198

     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141596743464049903524375051632640
with string of it 7898756447985644142144124141596743464049903524375051632640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.353240966796875 sq of rst 7898756447985644142144124141596743464049903524375051632640
                     with intpart 7898756447985644142144124141596743464049903524375051632640 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141654224259995120297744806182912
with string of it 7898756447985644142144124141654224259995120297744806182912
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.6766204833984375 sq of rst 7898756447985644142144124141654224259995120297744806182912
                     with intpart 7898756447985644142144124141654224259995120297744806182912 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141594088662950029798707396870144
with string of it 7898756447985644142144124141594088662950029798707396870144
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.3383026123046875 sq of rst 7898756447985644142144124141594088662950029798707396870144
                     with intpart 7898756447985644142144124141594088662950029798707396870144 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141564022677816213971132454273024
with string of it 7898756447985644142144124141564022677816213971132454273024
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.169158935546875 sq of rst 7898756447985644142144124141564022677816213971132454273024
                     with intpart 7898756447985644142144124141564022677816213971132454273024 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141548988476323486442715808268288
with string of it 7898756447985644142144124141548988476323486442715808268288
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.0845794677734375 sq of rst 7898756447985644142144124141548988476323486442715808268288
                     with intpart 7898756447985644142144124141548988476323486442715808268288 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141685618854604692602782750867456
with string of it 7898756447985644142144124141685618854604692602782750867456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.853240966796875 sq of rst 7898756447985644142144124141685618854604692602782750867456
                     with intpart 7898756447985644142144124141685618854604692602782750867456 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141609786564717725758540956565504
with string of it 7898756447985644142144124141609786564717725758540956565504
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.4266204833984375 sq of rst 7898756447985644142144124141609786564717725758540956565504
                     with intpart 7898756447985644142144124141609786564717725758540956565504 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141571869815311332529105472061440
with string of it 7898756447985644142144124141571869815311332529105472061440
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.2133026123046875 sq of rst 7898756447985644142144124141571869815311332529105472061440
                     with intpart 7898756447985644142144124141571869815311332529105472061440 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141552913858459775143646079221760
with string of it 7898756447985644142144124141552913858459775143646079221760
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.106658935546875 sq of rst 7898756447985644142144124141552913858459775143646079221760
                     with intpart 7898756447985644142144124141552913858459775143646079221760 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141543434671108176836287208095744
with string of it 7898756447985644142144124141543434671108176836287208095744
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.0533294677734375 sq of rst 7898756447985644142144124141543434671108176836287208095744
                     with intpart 7898756447985644142144124141543434671108176836287208095744 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141596743464049903524375051632640
with string of it 7898756447985644142144124141596743464049903524375051632640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.353240966796875 sq of rst 7898756447985644142144124141596743464049903524375051632640
                     with intpart 7898756447985644142144124141596743464049903524375051632640 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141565348869440331219337106948096
with string of it 7898756447985644142144124141565348869440331219337106948096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.1766204833984375 sq of rst 7898756447985644142144124141565348869440331219337106948096
                     with intpart 7898756447985644142144124141565348869440331219337106948096 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141549650967672635259503547252736
with string of it 7898756447985644142144124141549650967672635259503547252736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572197.0883026123046875 sq of rst 7898756447985644142144124141549650967672635259503547252736
                     with intpart 7898756447985644142144124141549650967672635259503547252736 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572197

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572197 
     doted 0 
     makes 88874948371212256598707572197

result 88874948371212256598707572193 
     doted 0.7064666748046875 
     makes 88874948371212256598707572193.7064666748046875


for the integer string 88874948371212256598707572193.000000
the numbers are 29
the retrievable integer digit is 3

entering with number of 3.7064666748046875
recheck values of 88874948371212256598707572197 and result of 7898756447985644142144124141533955483756578528928336969728 with intpart 7898756447985644142144124141533955483756578528928336969728

recheck power 88874948371212256598707572197 of result 7898756447985644142144124141533955483756578528928336969728
lowering second to value of 88874948371212256598707572197

     ----> using 3.7064666748046875 rst is 1.85323333740234375
     ----> using 1.85323333740234375 with intpart 1 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141507868073495114445967352397824
with string of it 7898756447985644142144124141507868073495114445967352397824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.853240966796875 sq of rst 7898756447985644142144124141507868073495114445967352397824
                     with intpart 7898756447985644142144124141507868073495114445967352397824 and other part 0
                     the int string is 1.853233

     ----> using 1.85323333740234375 rst is 0.926616668701171875
     ----> using 0.926616668701171875 with intpart 0 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141520912383088756294762432036864
with string of it 7898756447985644142144124141520912383088756294762432036864
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.9266204833984375 sq of rst 7898756447985644142144124141520912383088756294762432036864
                     with intpart 7898756447985644142144124141520912383088756294762432036864 and other part 0
                     the int string is 0.926617

     ----> using 0.926616668701171875 rst is 0.4633083343505859375
     ----> using 0.4633083343505859375 with intpart 0 and fract 0.4633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141438556729479148911493923209216
with string of it 7898756447985644142144124141438556729479148911493923209216
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.4633026123046875 sq of rst 7898756447985644142144124141438556729479148911493923209216
                     with intpart 7898756447985644142144124141438556729479148911493923209216 and other part 0
                     the int string is 0.463308

     ----> using 0.4633083343505859375 rst is 0.23165416717529296875
     ----> using 0.23165416717529296875 with intpart 0 and fract 0.23165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141397381924988894256432605560832
with string of it 7898756447985644142144124141397381924988894256432605560832
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.231658935546875 sq of rst 7898756447985644142144124141397381924988894256432605560832
                     with intpart 7898756447985644142144124141397381924988894256432605560832 and other part 0
                     the int string is 0.231654

     ----> using 0.23165416717529296875 rst is 0.115827083587646484375
     ----> using 0.115827083587646484375 with intpart 0 and fract 0.115827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141376793918280857121587359383552
with string of it 7898756447985644142144124141376793918280857121587359383552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.1158294677734375 sq of rst 7898756447985644142144124141376793918280857121587359383552
                     with intpart 7898756447985644142144124141376793918280857121587359383552 and other part 0
                     the int string is 0.115827

     ----> using 0.115827083587646484375 rst is 0.0579135417938232421875
     ----> using 0.0579135417938232421875 with intpart 0 and fract 0.0579135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141366497497075199324906386882560
with string of it 7898756447985644142144124141366497497075199324906386882560
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.0579071044921875 sq of rst 7898756447985644142144124141366497497075199324906386882560
                     with intpart 7898756447985644142144124141366497497075199324906386882560 and other part 0
                     the int string is 0.057914

from new int t  of 3 ---> 2 with 2.7064666748046875
     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141418993891866144982188827869184
with string of it 7898756447985644142144124141418993891866144982188827869184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.353240966796875 sq of rst 7898756447985644142144124141418993891866144982188827869184
                     with intpart 7898756447985644142144124141418993891866144982188827869184 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141476474687811361755558582419456
with string of it 7898756447985644142144124141476474687811361755558582419456
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.6766204833984375 sq of rst 7898756447985644142144124141476474687811361755558582419456
                     with intpart 7898756447985644142144124141476474687811361755558582419456 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141416337881840451641891998400512
with string of it 7898756447985644142144124141416337881840451641891998400512
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.3383026123046875 sq of rst 7898756447985644142144124141416337881840451641891998400512
                     with intpart 7898756447985644142144124141416337881840451641891998400512 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141386273105632455428946230509568
with string of it 7898756447985644142144124141386273105632455428946230509568
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.169158935546875 sq of rst 7898756447985644142144124141386273105632455428946230509568
                     with intpart 7898756447985644142144124141386273105632455428946230509568 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141371238904139727900529584504832
with string of it 7898756447985644142144124141371238904139727900529584504832
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.0845794677734375 sq of rst 7898756447985644142144124141371238904139727900529584504832
                     with intpart 7898756447985644142144124141371238904139727900529584504832 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141507868073495114445967352397824
with string of it 7898756447985644142144124141507868073495114445967352397824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.853240966796875 sq of rst 7898756447985644142144124141507868073495114445967352397824
                     with intpart 7898756447985644142144124141507868073495114445967352397824 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141432036992533967216354732802048
with string of it 7898756447985644142144124141432036992533967216354732802048
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.4266204833984375 sq of rst 7898756447985644142144124141432036992533967216354732802048
                     with intpart 7898756447985644142144124141432036992533967216354732802048 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141394119034201754372290073591808
with string of it 7898756447985644142144124141394119034201754372290073591808
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.2133026123046875 sq of rst 7898756447985644142144124141394119034201754372290073591808
                     with intpart 7898756447985644142144124141394119034201754372290073591808 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141375164286276016601459855458304
with string of it 7898756447985644142144124141375164286276016601459855458304
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.106658935546875 sq of rst 7898756447985644142144124141375164286276016601459855458304
                     with intpart 7898756447985644142144124141375164286276016601459855458304 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141365683889998598679471809626112
with string of it 7898756447985644142144124141365683889998598679471809626112
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.0533294677734375 sq of rst 7898756447985644142144124141365683889998598679471809626112
                     with intpart 7898756447985644142144124141365683889998598679471809626112 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141418993891866144982188827869184
with string of it 7898756447985644142144124141418993891866144982188827869184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.353240966796875 sq of rst 7898756447985644142144124141418993891866144982188827869184
                     with intpart 7898756447985644142144124141418993891866144982188827869184 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141387599297256572677150883184640
with string of it 7898756447985644142144124141387599297256572677150883184640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.1766204833984375 sq of rst 7898756447985644142144124141387599297256572677150883184640
                     with intpart 7898756447985644142144124141387599297256572677150883184640 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141371901395488876717317323489280
with string of it 7898756447985644142144124141371901395488876717317323489280
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572196.0883026123046875 sq of rst 7898756447985644142144124141371901395488876717317323489280
                     with intpart 7898756447985644142144124141371901395488876717317323489280 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572196

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572196 
     doted 0 
     makes 88874948371212256598707572196

result 88874948371212256598707572194 
     doted 0.7064666748046875 
     makes 88874948371212256598707572194.7064666748046875


for the integer string 88874948371212256598707572194.000000
the numbers are 29
the retrievable integer digit is 4

entering with number of 4.7064666748046875
recheck values of 88874948371212256598707572196 and result of 7898756447985644142144124141356204702647000372112938500096 with intpart 7898756447985644142144124141356204702647000372112938500096

recheck power 88874948371212256598707572196 of result 7898756447985644142144124141356204702647000372112938500096
lowering second to value of 88874948371212256598707572196

     ----> using 4.7064666748046875 rst is 2.35323333740234375
     ----> using 2.35323333740234375 with intpart 2 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241244319682386440002604105728
with string of it 7898756447985644142144124141241244319682386440002604105728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256598707572195.353240966796875 sq of rst 7898756447985644142144124141241244319682386440002604105728
                     with intpart 7898756447985644142144124141241244319682386440002604105728 and other part 0
                     the int string is 2.353233

     ----> using 2.35323333740234375 rst is 1.176616668701171875
     ----> using 1.176616668701171875 with intpart 1 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141209849725072814134964659421184
with string of it 7898756447985644142144124141209849725072814134964659421184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1766204833984375 sq of rst 7898756447985644142144124141209849725072814134964659421184
                     with intpart 7898756447985644142144124141209849725072814134964659421184 and other part 0
                     the int string is 1.176617

     ----> using 1.176616668701171875 rst is 0.5883083343505859375
     ----> using 0.5883083343505859375 with intpart 0 and fract 0.5883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141283026004934087638909624254464
with string of it 7898756447985644142144124141283026004934087638909624254464
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.5883026123046875 sq of rst 7898756447985644142144124141283026004934087638909624254464
                     with intpart 7898756447985644142144124141283026004934087638909624254464 and other part 0
                     the int string is 0.588308

     ----> using 0.5883083343505859375 rst is 0.29415416717529296875
     ----> using 0.29415416717529296875 with intpart 0 and fract 0.29415416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141230742381087394156361931554816
with string of it 7898756447985644142144124141230742381087394156361931554816
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.294158935546875 sq of rst 7898756447985644142144124141230742381087394156361931554816
                     with intpart 7898756447985644142144124141230742381087394156361931554816 and other part 0
                     the int string is 0.294154

     ----> using 0.29415416717529296875 rst is 0.147077083587646484375
     ----> using 0.147077083587646484375 with intpart 0 and fract 0.147077083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141204598151312408185829735792640
with string of it 7898756447985644142144124141204598151312408185829735792640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1470794677734375 sq of rst 7898756447985644142144124141204598151312408185829735792640
                     with intpart 7898756447985644142144124141204598151312408185829735792640 and other part 0
                     the int string is 0.147077

     ----> using 0.147077083587646484375 rst is 0.0735385417938232421875
     ----> using 0.0735385417938232421875 with intpart 0 and fract 0.0735385417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141191526036424915200563637911552
with string of it 7898756447985644142144124141191526036424915200563637911552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0735321044921875 sq of rst 7898756447985644142144124141191526036424915200563637911552
                     with intpart 7898756447985644142144124141191526036424915200563637911552 and other part 0
                     the int string is 0.073539

from new int t  of 4 ---> 3 with 3.7064666748046875
     ----> using 3.7064666748046875 rst is 1.85323333740234375
     ----> using 1.85323333740234375 with intpart 1 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141330118501311355903781128634368
with string of it 7898756447985644142144124141330118501311355903781128634368
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.853240966796875 sq of rst 7898756447985644142144124141330118501311355903781128634368
                     with intpart 7898756447985644142144124141330118501311355903781128634368 and other part 0
                     the int string is 1.853233

     ----> using 1.85323333740234375 rst is 0.926616668701171875
     ----> using 0.926616668701171875 with intpart 0 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141343161601979178137947033567232
with string of it 7898756447985644142144124141343161601979178137947033567232
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.9266204833984375 sq of rst 7898756447985644142144124141343161601979178137947033567232
                     with intpart 7898756447985644142144124141343161601979178137947033567232 and other part 0
                     the int string is 0.926617

     ----> using 0.926616668701171875 rst is 0.4633083343505859375
     ----> using 0.4633083343505859375 with intpart 0 and fract 0.4633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141260807157295390369307699445760
with string of it 7898756447985644142144124141260807157295390369307699445760
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.4633026123046875 sq of rst 7898756447985644142144124141260807157295390369307699445760
                     with intpart 7898756447985644142144124141260807157295390369307699445760 and other part 0
                     the int string is 0.463308

     ----> using 0.4633083343505859375 rst is 0.23165416717529296875
     ----> using 0.23165416717529296875 with intpart 0 and fract 0.23165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141219632352805135714246381797376
with string of it 7898756447985644142144124141219632352805135714246381797376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.231658935546875 sq of rst 7898756447985644142144124141219632352805135714246381797376
                     with intpart 7898756447985644142144124141219632352805135714246381797376 and other part 0
                     the int string is 0.231654

     ----> using 0.23165416717529296875 rst is 0.115827083587646484375
     ----> using 0.115827083587646484375 with intpart 0 and fract 0.115827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141199044346097098579401135620096
with string of it 7898756447985644142144124141199044346097098579401135620096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.1158294677734375 sq of rst 7898756447985644142144124141199044346097098579401135620096
                     with intpart 7898756447985644142144124141199044346097098579401135620096 and other part 0
                     the int string is 0.115827

     ----> using 0.115827083587646484375 rst is 0.0579135417938232421875
     ----> using 0.0579135417938232421875 with intpart 0 and fract 0.0579135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141188747924891440782720163119104
with string of it 7898756447985644142144124141188747924891440782720163119104
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0579071044921875 sq of rst 7898756447985644142144124141188747924891440782720163119104
                     with intpart 7898756447985644142144124141188747924891440782720163119104 and other part 0
                     the int string is 0.057914

from new int t  of 3 ---> 2 with 2.7064666748046875
     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241244319682386440002604105728
with string of it 7898756447985644142144124141241244319682386440002604105728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256598707572195.353240966796875 sq of rst 7898756447985644142144124141241244319682386440002604105728
                     with intpart 7898756447985644142144124141241244319682386440002604105728 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141298723906701783598743183949824
with string of it 7898756447985644142144124141298723906701783598743183949824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.6766204833984375 sq of rst 7898756447985644142144124141298723906701783598743183949824
                     with intpart 7898756447985644142144124141298723906701783598743183949824 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141238588309656693099705774637056
with string of it 7898756447985644142144124141238588309656693099705774637056
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.3383026123046875 sq of rst 7898756447985644142144124141238588309656693099705774637056
                     with intpart 7898756447985644142144124141238588309656693099705774637056 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141208523533448696886760006746112
with string of it 7898756447985644142144124141208523533448696886760006746112
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.169158935546875 sq of rst 7898756447985644142144124141208523533448696886760006746112
                     with intpart 7898756447985644142144124141208523533448696886760006746112 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141193489331955969358343360741376
with string of it 7898756447985644142144124141193489331955969358343360741376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0845794677734375 sq of rst 7898756447985644142144124141193489331955969358343360741376
                     with intpart 7898756447985644142144124141193489331955969358343360741376 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141330118501311355903781128634368
with string of it 7898756447985644142144124141330118501311355903781128634368
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.853240966796875 sq of rst 7898756447985644142144124141330118501311355903781128634368
                     with intpart 7898756447985644142144124141330118501311355903781128634368 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141254287420350208674168509038592
with string of it 7898756447985644142144124141254287420350208674168509038592
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.4266204833984375 sq of rst 7898756447985644142144124141254287420350208674168509038592
                     with intpart 7898756447985644142144124141254287420350208674168509038592 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141216369462017995830103849828352
with string of it 7898756447985644142144124141216369462017995830103849828352
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.2133026123046875 sq of rst 7898756447985644142144124141216369462017995830103849828352
                     with intpart 7898756447985644142144124141216369462017995830103849828352 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141197413505166438444644456988672
with string of it 7898756447985644142144124141197413505166438444644456988672
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.106658935546875 sq of rst 7898756447985644142144124141197413505166438444644456988672
                     with intpart 7898756447985644142144124141197413505166438444644456988672 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141187934317814840137285585862656
with string of it 7898756447985644142144124141187934317814840137285585862656
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0533294677734375 sq of rst 7898756447985644142144124141187934317814840137285585862656
                     with intpart 7898756447985644142144124141187934317814840137285585862656 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241244319682386440002604105728
with string of it 7898756447985644142144124141241244319682386440002604105728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256598707572195.353240966796875 sq of rst 7898756447985644142144124141241244319682386440002604105728
                     with intpart 7898756447985644142144124141241244319682386440002604105728 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141209849725072814134964659421184
with string of it 7898756447985644142144124141209849725072814134964659421184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1766204833984375 sq of rst 7898756447985644142144124141209849725072814134964659421184
                     with intpart 7898756447985644142144124141209849725072814134964659421184 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141194150614379298560501925019648
with string of it 7898756447985644142144124141194150614379298560501925019648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0883026123046875 sq of rst 7898756447985644142144124141194150614379298560501925019648
                     with intpart 7898756447985644142144124141194150614379298560501925019648 and other part 0
                     the int string is 0.088308


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241241901830747210744254693376
with string of it 7898756447985644142144124141241241901830747210744254693376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241241901830747210744254693376 has number of digits 58
Using Power of 88874948371212256598707572195

first 7898756447985644142144124141241241901830747210744254693376 
     doted 0
     makes 7898756447985644142144124141241241901830747210744254693376

second 88874948371212256598707572195 
     doted 0 
     makes 88874948371212256598707572195

result 88874948371212256598707572195 
     doted 0.7064666748046875 
     makes 88874948371212256598707572195.7064666748046875


for the integer string 88874948371212256598707572195.000000
the numbers are 29
the retrievable integer digit is 5

entering with number of 5.7064666748046875
recheck values of 88874948371212256598707572195 and result of 7898756447985644142144124141178455130463241829926714736640 with intpart 7898756447985644142144124141178455130463241829926714736640

     ----> using 5.7064666748046875 rst is 2.85323333740234375
     ----> using 2.85323333740234375 with intpart 2 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141330118501311355903781128634368
with string of it 7898756447985644142144124141330118501311355903781128634368
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.853240966796875 sq of rst 7898756447985644142144124141330118501311355903781128634368
                     with intpart 7898756447985644142144124141330118501311355903781128634368 and other part 0
                     the int string is 2.853233

     ----> using 2.85323333740234375 rst is 1.426616668701171875
     ----> using 1.426616668701171875 with intpart 1 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141254287420350208674168509038592
with string of it 7898756447985644142144124141254287420350208674168509038592
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.4266204833984375 sq of rst 7898756447985644142144124141254287420350208674168509038592
                     with intpart 7898756447985644142144124141254287420350208674168509038592 and other part 0
                     the int string is 1.426617

     ----> using 1.426616668701171875 rst is 0.7133083343505859375
     ----> using 0.7133083343505859375 with intpart 0 and fract 0.7133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141305244852572784908511549063168
with string of it 7898756447985644142144124141305244852572784908511549063168
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.7133026123046875 sq of rst 7898756447985644142144124141305244852572784908511549063168
                     with intpart 7898756447985644142144124141305244852572784908511549063168 and other part 0
                     the int string is 0.713308

     ----> using 0.7133083343505859375 rst is 0.35665416717529296875
     ----> using 0.35665416717529296875 with intpart 0 and fract 0.35665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241851200443832983848306606080
with string of it 7898756447985644142144124141241851200443832983848306606080
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 31
                     with combination da_rst 88874948371212256598707572195.356658935546875 sq of rst 7898756447985644142144124141241851200443832983848306606080
                     with intpart 7898756447985644142144124141241851200443832983848306606080 and other part 0
                     the int string is 0.356654

     ----> using 0.35665416717529296875 rst is 0.178327083587646484375
     ----> using 0.178327083587646484375 with intpart 0 and fract 0.178327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141210153165453537406887510671360
with string of it 7898756447985644142144124141210153165453537406887510671360
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1783294677734375 sq of rst 7898756447985644142144124141210153165453537406887510671360
                     with intpart 7898756447985644142144124141210153165453537406887510671360 and other part 0
                     the int string is 0.178327

     ----> using 0.178327083587646484375 rst is 0.0891635417938232421875
     ----> using 0.0891635417938232421875 with intpart 0 and fract 0.0891635417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141194302939032570003777937997824
with string of it 7898756447985644142144124141194302939032570003777937997824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0891571044921875 sq of rst 7898756447985644142144124141194302939032570003777937997824
                     with intpart 7898756447985644142144124141194302939032570003777937997824 and other part 0
                     the int string is 0.089164

from new int t  of 5 ---> 4 with 4.7064666748046875
     ----> using 4.7064666748046875 rst is 2.35323333740234375
     ----> using 2.35323333740234375 with intpart 2 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241244319682386440002604105728
with string of it 7898756447985644142144124141241244319682386440002604105728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256598707572195.353240966796875 sq of rst 7898756447985644142144124141241244319682386440002604105728
                     with intpart 7898756447985644142144124141241244319682386440002604105728 and other part 0
                     the int string is 2.353233

     ----> using 2.35323333740234375 rst is 1.176616668701171875
     ----> using 1.176616668701171875 with intpart 1 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141209849725072814134964659421184
with string of it 7898756447985644142144124141209849725072814134964659421184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1766204833984375 sq of rst 7898756447985644142144124141209849725072814134964659421184
                     with intpart 7898756447985644142144124141209849725072814134964659421184 and other part 0
                     the int string is 1.176617

     ----> using 1.176616668701171875 rst is 0.5883083343505859375
     ----> using 0.5883083343505859375 with intpart 0 and fract 0.5883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141283026004934087638909624254464
with string of it 7898756447985644142144124141283026004934087638909624254464
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.5883026123046875 sq of rst 7898756447985644142144124141283026004934087638909624254464
                     with intpart 7898756447985644142144124141283026004934087638909624254464 and other part 0
                     the int string is 0.588308

     ----> using 0.5883083343505859375 rst is 0.29415416717529296875
     ----> using 0.29415416717529296875 with intpart 0 and fract 0.29415416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141230742381087394156361931554816
with string of it 7898756447985644142144124141230742381087394156361931554816
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.294158935546875 sq of rst 7898756447985644142144124141230742381087394156361931554816
                     with intpart 7898756447985644142144124141230742381087394156361931554816 and other part 0
                     the int string is 0.294154

     ----> using 0.29415416717529296875 rst is 0.147077083587646484375
     ----> using 0.147077083587646484375 with intpart 0 and fract 0.147077083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141204598151312408185829735792640
with string of it 7898756447985644142144124141204598151312408185829735792640
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1470794677734375 sq of rst 7898756447985644142144124141204598151312408185829735792640
                     with intpart 7898756447985644142144124141204598151312408185829735792640 and other part 0
                     the int string is 0.147077

     ----> using 0.147077083587646484375 rst is 0.0735385417938232421875
     ----> using 0.0735385417938232421875 with intpart 0 and fract 0.0735385417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141191526036424915200563637911552
with string of it 7898756447985644142144124141191526036424915200563637911552
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0735321044921875 sq of rst 7898756447985644142144124141191526036424915200563637911552
                     with intpart 7898756447985644142144124141191526036424915200563637911552 and other part 0
                     the int string is 0.073539

from new int t  of 4 ---> 3 with 3.7064666748046875
     ----> using 3.7064666748046875 rst is 1.85323333740234375
     ----> using 1.85323333740234375 with intpart 1 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141330118501311355903781128634368
with string of it 7898756447985644142144124141330118501311355903781128634368
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.853240966796875 sq of rst 7898756447985644142144124141330118501311355903781128634368
                     with intpart 7898756447985644142144124141330118501311355903781128634368 and other part 0
                     the int string is 1.853233

     ----> using 1.85323333740234375 rst is 0.926616668701171875
     ----> using 0.926616668701171875 with intpart 0 and fract 0.926616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141343161601979178137947033567232
with string of it 7898756447985644142144124141343161601979178137947033567232
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.9266204833984375 sq of rst 7898756447985644142144124141343161601979178137947033567232
                     with intpart 7898756447985644142144124141343161601979178137947033567232 and other part 0
                     the int string is 0.926617

     ----> using 0.926616668701171875 rst is 0.4633083343505859375
     ----> using 0.4633083343505859375 with intpart 0 and fract 0.4633083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141260807157295390369307699445760
with string of it 7898756447985644142144124141260807157295390369307699445760
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.4633026123046875 sq of rst 7898756447985644142144124141260807157295390369307699445760
                     with intpart 7898756447985644142144124141260807157295390369307699445760 and other part 0
                     the int string is 0.463308

     ----> using 0.4633083343505859375 rst is 0.23165416717529296875
     ----> using 0.23165416717529296875 with intpart 0 and fract 0.23165416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141219632352805135714246381797376
with string of it 7898756447985644142144124141219632352805135714246381797376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.231658935546875 sq of rst 7898756447985644142144124141219632352805135714246381797376
                     with intpart 7898756447985644142144124141219632352805135714246381797376 and other part 0
                     the int string is 0.231654

     ----> using 0.23165416717529296875 rst is 0.115827083587646484375
     ----> using 0.115827083587646484375 with intpart 0 and fract 0.115827083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141199044346097098579401135620096
with string of it 7898756447985644142144124141199044346097098579401135620096
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.1158294677734375 sq of rst 7898756447985644142144124141199044346097098579401135620096
                     with intpart 7898756447985644142144124141199044346097098579401135620096 and other part 0
                     the int string is 0.115827

     ----> using 0.115827083587646484375 rst is 0.0579135417938232421875
     ----> using 0.0579135417938232421875 with intpart 0 and fract 0.0579135417938232421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141188747924891440782720163119104
with string of it 7898756447985644142144124141188747924891440782720163119104
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0579071044921875 sq of rst 7898756447985644142144124141188747924891440782720163119104
                     with intpart 7898756447985644142144124141188747924891440782720163119104 and other part 0
                     the int string is 0.057914

from new int t  of 3 ---> 2 with 2.7064666748046875
     ----> using 2.7064666748046875 rst is 1.35323333740234375
     ----> using 1.35323333740234375 with intpart 1 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241244319682386440002604105728
with string of it 7898756447985644142144124141241244319682386440002604105728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256598707572195.353240966796875 sq of rst 7898756447985644142144124141241244319682386440002604105728
                     with intpart 7898756447985644142144124141241244319682386440002604105728 and other part 0
                     the int string is 1.353233

     ----> using 1.35323333740234375 rst is 0.676616668701171875
     ----> using 0.676616668701171875 with intpart 0 and fract 0.676616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141298723906701783598743183949824
with string of it 7898756447985644142144124141298723906701783598743183949824
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.6766204833984375 sq of rst 7898756447985644142144124141298723906701783598743183949824
                     with intpart 7898756447985644142144124141298723906701783598743183949824 and other part 0
                     the int string is 0.676617

     ----> using 0.676616668701171875 rst is 0.3383083343505859375
     ----> using 0.3383083343505859375 with intpart 0 and fract 0.3383083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141238588309656693099705774637056
with string of it 7898756447985644142144124141238588309656693099705774637056
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.3383026123046875 sq of rst 7898756447985644142144124141238588309656693099705774637056
                     with intpart 7898756447985644142144124141238588309656693099705774637056 and other part 0
                     the int string is 0.338308

     ----> using 0.3383083343505859375 rst is 0.16915416717529296875
     ----> using 0.16915416717529296875 with intpart 0 and fract 0.16915416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141208523533448696886760006746112
with string of it 7898756447985644142144124141208523533448696886760006746112
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.169158935546875 sq of rst 7898756447985644142144124141208523533448696886760006746112
                     with intpart 7898756447985644142144124141208523533448696886760006746112 and other part 0
                     the int string is 0.169154

     ----> using 0.16915416717529296875 rst is 0.084577083587646484375
     ----> using 0.084577083587646484375 with intpart 0 and fract 0.084577083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141193489331955969358343360741376
with string of it 7898756447985644142144124141193489331955969358343360741376
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0845794677734375 sq of rst 7898756447985644142144124141193489331955969358343360741376
                     with intpart 7898756447985644142144124141193489331955969358343360741376 and other part 0
                     the int string is 0.084577

from new int t  of 2 ---> 1 with 1.7064666748046875
     ----> using 1.7064666748046875 rst is 0.85323333740234375
     ----> using 0.85323333740234375 with intpart 0 and fract 0.85323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141330118501311355903781128634368
with string of it 7898756447985644142144124141330118501311355903781128634368
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.853240966796875 sq of rst 7898756447985644142144124141330118501311355903781128634368
                     with intpart 7898756447985644142144124141330118501311355903781128634368 and other part 0
                     the int string is 0.853233

     ----> using 0.85323333740234375 rst is 0.426616668701171875
     ----> using 0.426616668701171875 with intpart 0 and fract 0.426616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141254287420350208674168509038592
with string of it 7898756447985644142144124141254287420350208674168509038592
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.4266204833984375 sq of rst 7898756447985644142144124141254287420350208674168509038592
                     with intpart 7898756447985644142144124141254287420350208674168509038592 and other part 0
                     the int string is 0.426617

     ----> using 0.426616668701171875 rst is 0.2133083343505859375
     ----> using 0.2133083343505859375 with intpart 0 and fract 0.2133083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141216369462017995830103849828352
with string of it 7898756447985644142144124141216369462017995830103849828352
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.2133026123046875 sq of rst 7898756447985644142144124141216369462017995830103849828352
                     with intpart 7898756447985644142144124141216369462017995830103849828352 and other part 0
                     the int string is 0.213308

     ----> using 0.2133083343505859375 rst is 0.10665416717529296875
     ----> using 0.10665416717529296875 with intpart 0 and fract 0.10665416717529296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141197413505166438444644456988672
with string of it 7898756447985644142144124141197413505166438444644456988672
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.106658935546875 sq of rst 7898756447985644142144124141197413505166438444644456988672
                     with intpart 7898756447985644142144124141197413505166438444644456988672 and other part 0
                     the int string is 0.106654

     ----> using 0.10665416717529296875 rst is 0.053327083587646484375
     ----> using 0.053327083587646484375 with intpart 0 and fract 0.053327083587646484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141187934317814840137285585862656
with string of it 7898756447985644142144124141187934317814840137285585862656
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0533294677734375 sq of rst 7898756447985644142144124141187934317814840137285585862656
                     with intpart 7898756447985644142144124141187934317814840137285585862656 and other part 0
                     the int string is 0.053327

from new int t  of 1 ---> 0 with 0.7064666748046875
     ----> using 0.7064666748046875 rst is 0.35323333740234375
     ----> using 0.35323333740234375 with intpart 0 and fract 0.35323333740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241244319682386440002604105728
with string of it 7898756447985644142144124141241244319682386440002604105728
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256598707572195.353240966796875 sq of rst 7898756447985644142144124141241244319682386440002604105728
                     with intpart 7898756447985644142144124141241244319682386440002604105728 and other part 0
                     the int string is 0.353233

     ----> using 0.35323333740234375 rst is 0.176616668701171875
     ----> using 0.176616668701171875 with intpart 0 and fract 0.176616668701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141209849725072814134964659421184
with string of it 7898756447985644142144124141209849725072814134964659421184
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 29
                     with combination da_rst 88874948371212256598707572195.1766204833984375 sq of rst 7898756447985644142144124141209849725072814134964659421184
                     with intpart 7898756447985644142144124141209849725072814134964659421184 and other part 0
                     the int string is 0.176617

     ----> using 0.176616668701171875 rst is 0.0883083343505859375
     ----> using 0.0883083343505859375 with intpart 0 and fract 0.0883083343505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141194150614379298560501925019648
with string of it 7898756447985644142144124141194150614379298560501925019648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 28
                     with combination da_rst 88874948371212256598707572195.0883026123046875 sq of rst 7898756447985644142144124141194150614379298560501925019648
                     with intpart 7898756447985644142144124141194150614379298560501925019648 and other part 0
                     the int string is 0.088308

------------All Results From Bee----------- 
Higher number @ first columns nearest u are 
--------------------------------------
Psifia,Power,Result of Power,Diafora from Main,Diairesi from Main
--------------------------------------
1 PWR tw 87602067595113039949538577048.4390869140625 7674122246938754150625840409345145029353631591428685561856.000000 224634201046889991518283731896096872477115619315569131520.000000 1.029272 
27 PWR tw 88874948371212256598707572201.353240966796875 7898756447985644142144124142307742961710757307749121392640.000000 1066501059880010097004866699264.000000 1.000000 
27 PWR tw 88874948371212256598707572201.353240966796875 7898756447985644142144124142307742961710757307749121392640.000000 1066501059880010097004866699264.000000 1.000000 
27 PWR tw 88874948371212256598707572200.853240966796875 7898756447985644142144124142218867571155968229341422157824.000000 977625669325221018597167464448.000000 1.000000 
28 PWR tw 88874948371212256598707572199.353240966796875 7898756447985644142144124141952243817343240223376673865728.000000 711001915512493012632419172352.000000 1.000000 
28 PWR tw 88874948371212256598707572198.853240966796875 7898756447985644142144124141863368426788451144968974630912.000000 622126524957703934224719937536.000000 1.000000 
28 PWR tw 88874948371212256598707572197.353240966796875 7898756447985644142144124141596743464049903524375051632640.000000 355501562219156313630796939264.000000 1.000000 
28 PWR tw 88874948371212256598707572196.853240966796875 7898756447985644142144124141507868073495114445967352397824.000000 266626171664367235223097704448.000000 1.000000 
33 PWR tw 88874948371212256598707572195.353240966796875 7898756447985644142144124141241244319682386440002604105728.000000 2417851639229258349412352.000000 1.000000 
29 PWR: 88874948371212256598707572195.1766204833984375 | 7898756447985644142144124141209849725072814134964659421184.000000 31392176757933075779595272192.000000 1.000000 
28 PWR: 88874948371212256598707572195.0735321044921875 | 7898756447985644142144124141191526036424915200563637911552.000000 49715865405832010180616781824.000000 1.000000 
28 PWR tw 88874948371212256598707572195.853240966796875 7898756447985644142144124141330118501311355903781128634368.000000 88876599480608693036873940992.000000 1.000000 
--------------------------------------
