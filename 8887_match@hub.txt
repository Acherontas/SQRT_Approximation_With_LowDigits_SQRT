voyeristic behaviours and others have fun 
ur number ,ur precision , ur sleep time , ur log ,ur automation 0 no 1 auto , ur bee auto 0 for no log 1 for log 
the approximation while loops times to run if -1 infinite loop will occur until other equations gets equal 
with main number without precision 7.89876e+33
with main number 7898756447985644142144124141241248
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
34
 @ CDIS : with main number 7898756447985644142144124141241248
Main cdi 151
Secondary cdi 7
Exiting Secondary cdi 7
with sqrt of math 88874948371212256.5987075721953532686514520833043206948786974

9 25 |34 16| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 40
section h 5807909152930620692753032456795.025390625
7898756447985644142144124141241248 / 34 ::== 232316366117224827710121298271801.40625
            ----->  | *2 464632732234449655420242596543602
            ----->  /2 116158183058612413855060649135900.5
                 --> 58079091529306206927530324567950.25
                 --> 29039545764653103463765162283975.125
            ----->  section 5807909152930620692753032456795.025390625
                 --> of section *2 11615818305861241385506064913590.05078125
                 --> of section /2 2903954576465310346376516228397.5126953125

i insert 2158835758636497868468542383851225 46463273223444965.542024259654360220095359323977390886284411
i insert 134927234914781110971374746060081 11615818305861241.3855060649135900550238398309943477215711027
i insert 1600 40
i insert 3373180872869527890442551710114436 58079091529306206.9275303245679502733844756789949315134435892
i insert 134927234914781110971374746060081 11615818305861241.3855060649135900550238398309943477215711027
i insert 843295218217381972610637927528609 29039545764653103.4637651622839751366922378394974657567217946
i insert 1349272349147810877397381343376 1161581830586124.13855060649135900554575206999885494951740839
i insert 843295218217381972610637927528609 29039545764653103.4637651622839751366922378394974657567217946
CDIS Start 
section_temp 91
section h 364703871455611974427191991007.5274658203125
232316366117224827710121298271801.40625 / 7 ::== 33188052302460689672874471181685.9140625
            ----->  | *2 66376104604921379345748942363370
            ----->  /2 16594026151230344836437235590842.5
                 --> 8297013075615172418218617795421.25
                 --> 4148506537807586209109308897710.625
            ----->  section 364703871455611974427191991007.5274658203125
                 --> of section *2 729407742911223948854383982015.054931640625
                 --> of section /2 182351935727805987213595995503.76373291015625

i insert 4405787262523465094584706771261641 66376104604921379.3457489423633700043048122552136192098259926
i insert 275361703907716543520504946358336 16594026151230344.8364372355908425010762030638034048024564981
i insert 8281 91
i insert 1330089138547115394734540072072809 36470387145561197.4427191991007527471779781080840621143579483
i insert 5320356554188461578938160288291236 72940774291122394.8854383982015054943559562161681242287158966
i insert 332522284636778830448441445237604 18235193572780598.7213595995503763735889890540420310571789742
i insert 2753617039077164107682957365156 1659402615123034.48364372355908425002088413258150012552505359
i insert 1721010649423228562943417427043044 41485065378075862.0910930889771062526905076595085120061412454
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241248 / 16 ::== 493672277999102758884007758827578
            ----->  | *2 987344555998205517768015517655156
            ----->  /2 246836138999551379442003879413789
                 --> 123418069499775689721001939706894.5
                 --> 61709034749887844860500969853447.25
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929355638851922023025 9873445559982055.17768015517655156090826018555617338279262185
i insert 609280795162058448059210612688769 24683613899955137.9442003879413789005359269879136263625696301
i insert 0 0
i insert 6092807951620581024886160133169 2468361389995513.79442003879413789022706504638904334569815546
i insert 3808004969762865485497170578968336 61709034749887844.8605009698534472478703705178304517176002264
section_temp 15
section h 217956855628742939904639187120.333343505859375
493672277999102758884007758827578 / 151 ::== 3269352834431144098569587806805.15234375
            ----->  | *2 6538705668862288197139175613610
            ----->  /2 1634676417215572049284793903402.5
                 --> 817338208607786024642396951701.25
                 --> 408669104303893012321198475850.625
            ----->  section 217956855628742939904639187120.333343505859375
                 --> of section *2 435913711257485879809278374240.66668701171875
                 --> of section /2 108978427814371469952319593560.1666717529296875

i insert 4275467182401182239858144236740161 65387056688622881.9713917561360999944342076162229204783216119
i insert 267216698900073881817751928718400 16346764172155720.492847939034024998608551904055730119580403
i insert 225 15
i insert 475051909155686886478879720249849 21795685562874293.9904639187120333372604807919969971408136189
i insert 1900207636622747633098261132496569 43591371125748587.9809278374240666745209615839939942816272378
i insert 118762977288921710721877148625316 10897842781437146.9952319593560166686302403959984985704068094
i insert 2672166989000738818177519287184 1634676417215572.0492847939034024998608551904055730119580403
i insert 1670104368125461843094770415268601 40866910430389301.2321198475850624956540180221509217517450452
removals 
reporing rt 3
section_temp 25
section h 9161880531311747344462068418599.83984375
232316366117224827710121298271801.40625 - 3269352834431144098569587806805.15234375 ::== 229047013282793683611551710464996.25
            ----->  | *2 458094026565587367223103420929992
            ----->  /2 114523506641396841805775855232498
                 --> 57261753320698420902887927616249
                 --> 28630876660349210451443963808124.5
            ----->  section 9161880531311747344462068418599.83984375
                 --> of section *2 18323761062623494688924136837199.6796875
                 --> of section /2 4580940265655873672231034209299.919921875

i insert 2098501371750730579141117817917696 45809402656558736.7223103420929992066201741351960663450881839
i insert 131156335734420661196319863619856 11452350664139684.180577585523249801655043533799016586272046
i insert 625 25
i insert 83940054870029219500892500192009 9161880531311747.34446206841859984201792421742993610678240657
i insert 335760219480116878003570000768036 18323761062623494.6889241368371996840358484348598722135648131
i insert 2098501371750730579141117817917696 45809402656558736.7223103420929992066201741351960663450881839
i insert 1311563357344205695775145505024 1145235066413968.41805775855232498025224052717874201334780082
i insert 819727098340129132476999147624100 28630876660349210.4514439638081245050049705724859450128860772
section_temp 76
section h 393667098263546652293485307564.21051025390625
33188052302460689672874471181685.9140625 - 3269352834431144098569587806805.15234375 ::== 29918699468029545574304883374880.76171875
            ----->  | *2 59837398936059091148609766749760
            ----->  /2 14959349734014772787152441687440
                 --> 7479674867007386393576220843720
                 --> 3739837433503693196788110421860
            ----->  section 393667098263546652293485307564.21051025390625
                 --> of section *2 787334196527093304586970615128.4210205078125
                 --> of section /2 196833549131773326146742653782.105255126953125

i insert 3580514311433085635577057843746281 59837398936059091.1486097667497599944530506377304845955222845
i insert 223782144464567829784541514211984 14959349734014772.7871524416874399986132626594326211488805711
i insert 5776 76
i insert 1549737842552408938557002367262225 39366709826354665.2293485307564210526343195795107021695002913
i insert 6198951370209635754228009469048900 78733419652709330.4586970615128421052686391590214043390005827
i insert 387434460638102214955895678638224 19683354913177332.6146742653782105263171597897553510847501457
i insert 2237821444645677699471425781529 1495934973401477.27871524416874399990469435284268229224835522
i insert 1398638402903549010950133133898761 37398374335036931.9678811042185999982678801245583599666133523
section_temp 87
section h 5636815231777834652706185873801.9765625
493672277999102758884007758827578 - 3269352834431144098569587806805.15234375 ::== 490402925164671614785438171020772.875
            ----->  | *2 980805850329343229570876342041544
            ----->  /2 245201462582335807392719085510386
                 --> 122600731291167903696359542755193
                 --> 61300365645583951848179771377596.5
            ----->  section 5636815231777834652706185873801.9765625
                 --> of section *2 11273630463555669305412371747603.953125
                 --> of section /2 2818407615888917326353092936900.98828125

i insert 96198011604026597454390694338624 9808058503293432.29570876342041544151961751651924714678898454
i insert 601237572525166234089941839616400 24520146258233580.7392719085510386020643203153213107725605369
i insert 7569 87
i insert 3177368595720260320256261186495716 56368152317778346.5270618587380197644920443167393386829644442
i insert 127094743828810408300798262037561 11273630463555669.3054123717476039528984088633478677365928888
i insert 794342148930065080064065296623929 28184076158889173.2635309293690098822460221583696693414822221
i insert 6012375725251662340899418396164 2452014625823358.07392719085510386037990437912981178669724613
i insert 3757734828282289085662867788770401 61300365645583951.8481797713775965016913538363496627425774932
ending sqti reporting the results 
reporting size of xl vector 52 64
entering amfidromi loop of xl vector  with first 
 of 46463273223444965.542024259654360220095359323977390886284411 ^2 ::== 2158835758636497918836984923963257.75 as intpart 2158835758636497868468542383851225  diafora 5739920689349146273675581757390023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11615818305861241.3855060649135900550238398309943477215711027 ^2 ::== 134927234914781119927311557747703.609375 as intpart 134927234914781110971374746060081  diafora 7763829213070863031172749395181167 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40 ^2 ::== 1600 as intpart 1600  diafora 7898756447985644142144124141239648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 58079091529306206.9275303245679502733844756789949315134435892 ^2 ::== 3373180872869527998182788943692590 as intpart 3373180872869527890442551710114436  diafora 4525575575116116251701572431126812 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11615818305861241.3855060649135900550238398309943477215711027 ^2 ::== 134927234914781119927311557747703.609375 as intpart 134927234914781110971374746060081  diafora 7763829213070863031172749395181167 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 29039545764653103.4637651622839751366922378394974657567217946 ^2 ::== 843295218217381999545697235923147.5 as intpart 843295218217381972610637927528609  diafora 7055461229768262169533486213712639 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1161581830586124.13855060649135900554575206999885494951740839 ^2 ::== 1349272349147811199273115577477.0361328125 as intpart 1349272349147810877397381343376  diafora 7897407175636496331266726759897872 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 29039545764653103.4637651622839751366922378394974657567217946 ^2 ::== 843295218217381999545697235923147.5 as intpart 843295218217381972610637927528609  diafora 7055461229768262169533486213712639 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 66376104604921379.3457489423633700043048122552136192098259926 ^2 ::== 4405787262523465140483642701965601.5 as intpart 4405787262523465094584706771261641  diafora 3492969185462179047559417369979607 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16594026151230344.8364372355908425010762030638034048024564981 ^2 ::== 275361703907716571280227668872850.09375 as intpart 275361703907716543520504946358336  diafora 7623394744077927598623619194882912 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 91 ^2 ::== 8281 as intpart 8281  diafora 7898756447985644142144124141232967 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 36470387145561197.4427191991007527471779781080840621143579483 ^2 ::== 1330089138547115427026821248027291.75 as intpart 1330089138547115394734540072072809  diafora 6568667309438528747409584069168439 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 72940774291122394.8854383982015054943559562161681242287158966 ^2 ::== 5320356554188461708107284992109167 as intpart 5320356554188461578938160288291236  diafora 2578399893797182563205963852950012 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 18235193572780598.7213595995503763735889890540420310571789742 ^2 ::== 332522284636778856756705312006822.9375 as intpart 332522284636778830448441445237604  diafora 7566234163348865311695682696003644 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1659402615123034.48364372355908425002088413258150012552505359 ^2 ::== 2753617039077165712802276688728.50048828125 as intpart 2753617039077164107682957365156  diafora 7896002830946566978036441183876092 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 41485065378075862.0910930889771062526905076595085120061412454 ^2 ::== 1721010649423228570501422930455313 as intpart 1721010649423228562943417427043044  diafora 6177745798562415579200706714198204 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9873445559982055.17768015517655156090826018555617338279262185 ^2 ::== 97484927225929359147482600472716.140625 as intpart 97484927225929355638851922023025  diafora 7801271520759714786505272219218223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24683613899955137.9442003879413789005359269879136263625696301 ^2 ::== 609280795162058494671766252954475.8125 as intpart 609280795162058448059210612688769  diafora 7289475652823585694084913528552479 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2468361389995513.79442003879413789022706504638904334569815546 ^2 ::== 6092807951620584946717662529544.7587890625 as intpart 6092807951620581024886160133169  diafora 7892663640034023561119237981108079 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61709034749887844.8605009698534472478703705178304517176002264 ^2 ::== 3808004969762865591698539080965473.5 as intpart 3808004969762865485497170578968336  diafora 4090751478222778656646953562272912 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65387056688622881.9713917561360999944342076162229204783216119 ^2 ::== 4275467182401182366891039887404369 as intpart 4275467182401182239858144236740161  diafora 3623289265584461902285979904501087 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16346764172155720.492847939034024998608551904055730119580403 ^2 ::== 267216698900073897930689992962773.0625 as intpart 267216698900073881817751928718400  diafora 7631539749085570260326372212522848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15 ^2 ::== 225 as intpart 225  diafora 7898756447985644142144124141241023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21795685562874293.9904639187120333372604807919969971408136189 ^2 ::== 475051909155686929654559987489374.625 as intpart 475051909155686886478879720249849  diafora 7423704538829957255665244420991399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43591371125748587.9809278374240666745209615839939942816272378 ^2 ::== 1900207636622747718618239949957498.5 as intpart 1900207636622747633098261132496569  diafora 5998548811362896509045863008744679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10897842781437146.9952319593560166686302403959984985704068094 ^2 ::== 118762977288921732413639996872343.65625 as intpart 118762977288921710721877148625316  diafora 7779993470696722431422246992615932 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1634676417215572.0492847939034024998608551904055730119580403 ^2 ::== 2672166989000738979306899929627.73095703125 as intpart 2672166989000738818177519287184  diafora 7896084280996643403325946621954064 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40866910430389301.2321198475850624956540180221509217517450452 ^2 ::== 1670104368125461862066812456017331.75 as intpart 1670104368125461843094770415268601  diafora 6228652079860182299049353725972647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 45809402656558736.7223103420929992066201741351960663450881839 ^2 ::== 2098501371750730645318328425787471 as intpart 2098501371750730579141117817917696  diafora 5800255076234913563003006323323552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11452350664139684.180577585523249801655043533799016586272046 ^2 ::== 131156335734420665332395526611716.9375 as intpart 131156335734420661196319863619856  diafora 7767600112251223480947804277621392 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 25 ^2 ::== 625 as intpart 625  diafora 7898756447985644142144124141240623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9161880531311747.34446206841859984201792421742993610678240657 ^2 ::== 83940054870029225812733137031498.859375 as intpart 83940054870029219500892500192009  diafora 7814816393115614922643231641049239 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 18323761062623494.6889241368371996840358484348598722135648131 ^2 ::== 335760219480116903250932548125995.4375 as intpart 335760219480116878003570000768036  diafora 7562996228505527264140554140473212 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 45809402656558736.7223103420929992066201741351960663450881839 ^2 ::== 2098501371750730645318328425787471 as intpart 2098501371750730579141117817917696  diafora 5800255076234913563003006323323552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1145235066413968.41805775855232498025224052717874201334780082 ^2 ::== 1311563357344206653323955266117.169677734375 as intpart 1311563357344205695775145505024  diafora 7897444884628299936448348995736224 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28630876660349210.4514439638081245050049705724859450128860772 ^2 ::== 819727098340129158327472041323230.875 as intpart 819727098340129132476999147624100  diafora 7079029349645515009667124993617148 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 59837398936059091.1486097667497599944530506377304845955222845 ^2 ::== 3580514311433085653361901641346438 as intpart 3580514311433085635577057843746281  diafora 4318242136552558506567066297494967 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14959349734014772.7871524416874399986132626594326211488805711 ^2 ::== 223782144464567853335118852584152.375 as intpart 223782144464567829784541514211984  diafora 7674974303521076312359582627029264 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 76 ^2 ::== 5776 as intpart 5776  diafora 7898756447985644142144124141235472 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39366709826354665.2293485307564210526343195795107021695002913 ^2 ::== 1549737842552408956614396486039836.5 as intpart 1549737842552408938557002367262225  diafora 6349018605433235203587121773979023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 78733419652709330.4586970615128421052686391590214043390005827 ^2 ::== 6198951370209635826457585944159346 as intpart 6198951370209635754228009469048900  diafora 1699805077776008387916114672192348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 19683354913177332.6146742653782105263171597897553510847501457 ^2 ::== 387434460638102239153599121509959.125 as intpart 387434460638102214955895678638224  diafora 7511321987347541927188228462603024 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1495934973401477.27871524416874399990469435284268229224835522 ^2 ::== 2237821444645678533351188525841.523681640625 as intpart 2237821444645677699471425781529  diafora 7896518626540998464444652715459719 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37398374335036931.9678811042185999982678801245583599666133523 ^2 ::== 1398638402903549083344492828650952.5 as intpart 1398638402903549010950133133898761  diafora 6500118045082095131193991007342487 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9808058503293432.29570876342041544151961751651924714678898454 ^2 ::== 96198011604026603255048397466606.984375 as intpart 96198011604026597454390694338624  diafora 7802558436381617544689733446902624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24520146258233580.7392719085510386020643203153213107725605369 ^2 ::== 601237572525166270344052484166293.5625 as intpart 601237572525166234089941839616400  diafora 7297518875460477908054182301624848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 87 ^2 ::== 7569 as intpart 7569  diafora 7898756447985644142144124141233679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56368152317778346.5270618587380197644920443167393386829644442 ^2 ::== 3177368595720260379675267454967860 as intpart 3177368595720260320256261186495716  diafora 4721387852265383821887862954745532 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11273630463555669.3054123717476039528984088633478677365928888 ^2 ::== 127094743828810415187010698198714.40625 as intpart 127094743828810408300798262037561  diafora 7771661704156833733843325879203687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28184076158889173.2635309293690098822460221583696693414822221 ^2 ::== 794342148930065094918816863741965 as intpart 794342148930065080064065296623929  diafora 7104414299055579062080058844617319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2452014625823358.07392719085510386037990437912981178669724613 ^2 ::== 6012375725251662703440524841662.9365234375 as intpart 6012375725251662340899418396164  diafora 7892744072260392479803224722845084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61300365645583951.8481797713775965016913538363496627425774932 ^2 ::== 3757734828282289189650328026039334.5 as intpart 3757734828282289085662867788770401  diafora 4141021619703355056481256352470847 from 7898756447985644142144124141241248
the size of xpl vector is 52 64
 of 78733419652709330.4586970615128421052686391590214043390005827 ^2 ::== 6198951370209635826457585944159346 as intpart 6198951370209635754228009469048900  diafora 1699805077776008387916114672192348 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

9 |25| 34 |16| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 90
section h 3510558421326952952064055173884.98876953125
7898756447985644142144124141241248 / 25 ::== 315950257919425765685764965649649.90625
            ----->  | *2 631900515838851531371529931299298
            ----->  /2 157975128959712882842882482824824.5
                 --> 78987564479856441421441241412412.25
                 --> 39493782239928220710720620706206.125
            ----->  section 3510558421326952952064055173884.98876953125
                 --> of section *2 7021116842653905904128110347769.9775390625
                 --> of section /2 1755279210663476476032027586942.494384765625

i insert 3992982619174066533347477893833409 63190051583885153.1371529931299298107894024667530175065621734
i insert 249561413698379150435460920378944 15797512895971288.2842882482824824526973506166882543766405433
i insert 8100 90
i insert 1232402042954958775383763999881841 35105584213269529.5206405517388498875586133607384908827953041
i insert 4929608171819835241957392852605481 70211168426539059.0412811034776997751172267214769817655906081
i insert 308100510738739676293148893335696 17552792106634764.760320275869424943779306680369245441397652
i insert 2495614136983788976752545848384 1579751289597128.82842882482824824522636697476940526030375622
i insert 1559758835614869690221630752368400 39493782239928220.7107206207062061326107382797090394888073206
CDIS Start 
section_temp 84
section h 537330370611268308989396200084.4285888671875
315950257919425765685764965649649.90625 / 7 ::== 45135751131346537955109280807092.84375
            ----->  | *2 90271502262693075910218561614184
            ----->  /2 22567875565673268977554640403546
                 --> 11283937782836634488777320201773
                 --> 5641968891418317244388660100886.5
            ----->  section 537330370611268308989396200084.4285888671875
                 --> of section *2 1074660741222536617978792400168.857177734375
                 --> of section /2 268665185305634154494698100042.21429443359375

i insert 81489441207634000567899290260249 9027150226269307.59102185616141840289461395485659522819332778
i insert 509309007547712526117246129799824 22567875565673268.9775546404035460081038966251298916176892817
i insert 7056 84
i insert 2887239271812429439901909345848900 53733037061126830.8989396200084428661947200112081191036850214
i insert 115489570872497177596076373833956 10746607412225366.1797879240016885728919993070462624018546194
i insert 721809817953107359975477336462225 26866518530563415.4494698100042214330973600056040595518425107
i insert 5093090075477121650312370790276 2256787556567326.89775546404035460072365348871414880704833195
i insert 3183181297173203513911543967981584 56419688914183172.4438866010088650185250180868479219498112798
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241248 / 16 ::== 493672277999102758884007758827578
            ----->  | *2 987344555998205517768015517655156
            ----->  /2 246836138999551379442003879413789
                 --> 123418069499775689721001939706894.5
                 --> 61709034749887844860500969853447.25
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929355638851922023025 9873445559982055.17768015517655156090826018555617338279262185
i insert 609280795162058448059210612688769 24683613899955137.9442003879413789005359269879136263625696301
i insert 0 0
i insert 6092807951620581024886160133169 2468361389995513.79442003879413789022706504638904334569815546
i insert 3808004969762865485497170578968336 61709034749887844.8605009698534472478703705178304517176002264
section_temp 15
section h 217956855628742939904639187120.333343505859375
493672277999102758884007758827578 / 151 ::== 3269352834431144098569587806805.15234375
            ----->  | *2 6538705668862288197139175613610
            ----->  /2 1634676417215572049284793903402.5
                 --> 817338208607786024642396951701.25
                 --> 408669104303893012321198475850.625
            ----->  section 217956855628742939904639187120.333343505859375
                 --> of section *2 435913711257485879809278374240.66668701171875
                 --> of section /2 108978427814371469952319593560.1666717529296875

i insert 4275467182401182239858144236740161 65387056688622881.9713917561360999944342076162229204783216119
i insert 267216698900073881817751928718400 16346764172155720.492847939034024998608551904055730119580403
i insert 225 15
i insert 475051909155686886478879720249849 21795685562874293.9904639187120333372604807919969971408136189
i insert 1900207636622747633098261132496569 43591371125748587.9809278374240666745209615839939942816272378
i insert 118762977288921710721877148625316 10897842781437146.9952319593560166686302403959984985704068094
i insert 2672166989000738818177519287184 1634676417215572.0492847939034024998608551904055730119580403
i insert 1670104368125461843094770415268601 40866910430389301.2321198475850624956540180221509217517450452
removals 
reporing rt 3
section_temp 75
section h 4169078734466594954495938371237.919921875
315950257919425765685764965649649.90625 - 3269352834431144098569587806805.15234375 ::== 312680905084994621587195377842844.75
            ----->  | *2 625361810169989243174390755685688
            ----->  /2 156340452542497310793597688921422
                 --> 78170226271248655396798844460711
                 --> 39085113135624327698399422230355.5
            ----->  section 4169078734466594954495938371237.919921875
                 --> of section *2 8338157468933189908991876742475.83984375
                 --> of section /2 2084539367233297477247969185618.9599609375

i insert 3910773936190856576427451417157776 62536181016998924.3174390755685687973142172779716929653659463
i insert 244423371011928536026715713572361 15634045254249731.0793597688921421993285543194929232413414866
i insert 5625 75
i insert 1738121749418158450618342400070601 41690787344665949.5449593837123792028354074545859475620090961
i insert 6952486997672633969236518978946201 83381574689331899.0899187674247584056708149091718951240181923
i insert 434530437354539591809191927684676 20845393672332974.7724796918561896014177037272929737810045481
i insert 2444233710119285047586252050729 1563404525424973.10793597688921421993285543194929232413414866
i insert 1527646068824553311081860074202929 39085113135624327.6983994222303554974540240607439045561477542
section_temp 68
section h 615682327895814615537348426474.808837890625
45135751131346537955109280807092.84375 - 3269352834431144098569587806805.15234375 ::== 41866398296915393856539693000287.6875
            ----->  | *2 83732796593830787713079386000574
            ----->  /2 20933199148457696928269846500143.5
                 --> 10466599574228848464134923250071.75
                 --> 5233299787114424232067461625035.875
            ----->  section 615682327895814615537348426474.808837890625
                 --> of section *2 1231364655791629231074696852949.61767578125
                 --> of section /2 307841163947907307768674213237.4044189453125

i insert 7011181225423840645415907589039369 83732796593830787.7130793860005740225638248830364318564534187
i insert 438198826588990008938695501628416 20933199148457696.9282698465001435056409562207591079641133547
i insert 4624 68
i insert 3790647288832093770932787554894521 61568232789581461.5537348426474808724129239578815031563863158
i insert 151625891553283745911852879029264 12313646557916292.3107469685294961744825847915763006312772632
i insert 947661822208023411949080493932900 30784116394790730.7768674213237404362064619789407515781931579
i insert 4381988265889897577403057201361 2093319914845769.69282698465001435060746370897533097377163358
i insert 2738742666181187765198838369754564 52332997871144242.3206746162503587641023905518977699102833867
section_temp 87
section h 5636815231777834652706185873801.9765625
493672277999102758884007758827578 - 3269352834431144098569587806805.15234375 ::== 490402925164671614785438171020772.875
            ----->  | *2 980805850329343229570876342041544
            ----->  /2 245201462582335807392719085510386
                 --> 122600731291167903696359542755193
                 --> 61300365645583951848179771377596.5
            ----->  section 5636815231777834652706185873801.9765625
                 --> of section *2 11273630463555669305412371747603.953125
                 --> of section /2 2818407615888917326353092936900.98828125

i insert 96198011604026597454390694338624 9808058503293432.29570876342041544151961751651924714678898454
i insert 601237572525166234089941839616400 24520146258233580.7392719085510386020643203153213107725605369
i insert 7569 87
i insert 3177368595720260320256261186495716 56368152317778346.5270618587380197644920443167393386829644442
i insert 127094743828810408300798262037561 11273630463555669.3054123717476039528984088633478677365928888
i insert 794342148930065080064065296623929 28184076158889173.2635309293690098822460221583696693414822221
i insert 6012375725251662340899418396164 2452014625823358.07392719085510386037990437912981178669724613
i insert 3757734828282289085662867788770401 61300365645583951.8481797713775965016913538363496627425774932
ending sqti reporting the results 
reporting size of xl vector 52 64
entering amfidromi loop of xl vector  with first 
 of 63190051583885153.1371529931299298107894024667530175065621734 ^2 ::== 3992982619174066550680887315362430.5 as intpart 3992982619174066533347477893833409  diafora 3905773828811577608796646247407839 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15797512895971288.2842882482824824526973506166882543766405433 ^2 ::== 249561413698379159417555457210151.90625 as intpart 249561413698379150435460920378944  diafora 7649195034287264991708663220862304 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 90 ^2 ::== 8100 as intpart 8100  diafora 7898756447985644142144124141233148 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35105584213269529.5206405517388498875586133607384908827953041 ^2 ::== 1232402042954958811938545467704453.375 as intpart 1232402042954958775383763999881841  diafora 6666354405030685366760360141359407 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 70211168426539059.0412811034776997751172267214769817655906081 ^2 ::== 4929608171819835247754181870817813.5 as intpart 4929608171819835241957392852605481  diafora 2969148276165808900186731288635767 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17552792106634764.760320275869424943779306680369245441397652 ^2 ::== 308100510738739702984636366926113.34375 as intpart 308100510738739676293148893335696  diafora 7590655937246904465850975247905552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1579751289597128.82842882482824824522636697476940526030375622 ^2 ::== 2495614136983791594175554572101.51904296875 as intpart 2495614136983788976752545848384  diafora 7896260833848660353167371595392864 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39493782239928220.7107206207062061326107382797090394888073206 ^2 ::== 1559758835614869746359721607563449.5 as intpart 1559758835614869690221630752368400  diafora 6338997612370774451922493388872848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9027150226269307.59102185616141840289461395485659522819332778 ^2 ::== 81489441207634011238385455415557.25 as intpart 81489441207634000567899290260249  diafora 7817267006778010141576224850980999 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 22567875565673268.9775546404035460081038966251298916176892817 ^2 ::== 509309007547712570239909096347232.875 as intpart 509309007547712526117246129799824  diafora 7389447440437931616026878011441424 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 84 ^2 ::== 7056 as intpart 7056  diafora 7898756447985644142144124141234192 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 53733037061126830.8989396200084428661947200112081191036850214 ^2 ::== 2887239271812429536507421181106761 as intpart 2887239271812429439901909345848900  diafora 5011517176173214702242214795392348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10746607412225366.1797879240016885728919993070462624018546194 ^2 ::== 115489570872497181460296847244270.4375 as intpart 115489570872497177596076373833956  diafora 7783266877113146964548047767407292 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 26866518530563415.4494698100042214330973600056040595518425107 ^2 ::== 721809817953107384126855295276690.25 as intpart 721809817953107359975477336462225  diafora 7176946630032536782168646804779023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2256787556567326.89775546404035460072365348871414880704833195 ^2 ::== 5093090075477125702399090963472.328125 as intpart 5093090075477121650312370790276  diafora 7893663357910167020493811770450972 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56419688914183172.4438866010088650185250180868479219498112798 ^2 ::== 3183181297173203563999431852170205 as intpart 3183181297173203513911543967981584  diafora 4715575150812440628232580173259664 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9873445559982055.17768015517655156090826018555617338279262185 ^2 ::== 97484927225929359147482600472716.140625 as intpart 97484927225929355638851922023025  diafora 7801271520759714786505272219218223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24683613899955137.9442003879413789005359269879136263625696301 ^2 ::== 609280795162058494671766252954475.8125 as intpart 609280795162058448059210612688769  diafora 7289475652823585694084913528552479 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2468361389995513.79442003879413789022706504638904334569815546 ^2 ::== 6092807951620584946717662529544.7587890625 as intpart 6092807951620581024886160133169  diafora 7892663640034023561119237981108079 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61709034749887844.8605009698534472478703705178304517176002264 ^2 ::== 3808004969762865591698539080965473.5 as intpart 3808004969762865485497170578968336  diafora 4090751478222778656646953562272912 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65387056688622881.9713917561360999944342076162229204783216119 ^2 ::== 4275467182401182366891039887404369 as intpart 4275467182401182239858144236740161  diafora 3623289265584461902285979904501087 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16346764172155720.492847939034024998608551904055730119580403 ^2 ::== 267216698900073897930689992962773.0625 as intpart 267216698900073881817751928718400  diafora 7631539749085570260326372212522848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15 ^2 ::== 225 as intpart 225  diafora 7898756447985644142144124141241023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21795685562874293.9904639187120333372604807919969971408136189 ^2 ::== 475051909155686929654559987489374.625 as intpart 475051909155686886478879720249849  diafora 7423704538829957255665244420991399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43591371125748587.9809278374240666745209615839939942816272378 ^2 ::== 1900207636622747718618239949957498.5 as intpart 1900207636622747633098261132496569  diafora 5998548811362896509045863008744679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10897842781437146.9952319593560166686302403959984985704068094 ^2 ::== 118762977288921732413639996872343.65625 as intpart 118762977288921710721877148625316  diafora 7779993470696722431422246992615932 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1634676417215572.0492847939034024998608551904055730119580403 ^2 ::== 2672166989000738979306899929627.73095703125 as intpart 2672166989000738818177519287184  diafora 7896084280996643403325946621954064 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40866910430389301.2321198475850624956540180221509217517450452 ^2 ::== 1670104368125461862066812456017331.75 as intpart 1670104368125461843094770415268601  diafora 6228652079860182299049353725972647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 62536181016998924.3174390755685687973142172779716929653659463 ^2 ::== 3910773936190856616130306400407414 as intpart 3910773936190856576427451417157776  diafora 3987982511794787565716672724083472 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15634045254249731.0793597688921421993285543194929232413414866 ^2 ::== 244423371011928538508144150025463.375 as intpart 244423371011928536026715713572361  diafora 7654333076973715606117408427668887 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 75 ^2 ::== 5625 as intpart 5625  diafora 7898756447985644142144124141235623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 41690787344665949.5449593837123792028354074545859475620090961 ^2 ::== 1738121749418158496057913955736628.75 as intpart 1738121749418158450618342400070601  diafora 6160634698567485691525781741170647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 83381574689331899.0899187674247584056708149091718951240181923 ^2 ::== 6952486997672633984231655822946515 as intpart 6952486997672633969236518978946201  diafora 946269450313010172907605162295047 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20845393672332974.7724796918561896014177037272929737810045481 ^2 ::== 434530437354539624014478488934157.1875 as intpart 434530437354539591809191927684676  diafora 7464226010631104550334932213556572 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1563404525424973.10793597688921421993285543194929232413414866 ^2 ::== 2444233710119285385081441500254.6337890625 as intpart 2444233710119285047586252050729  diafora 7896312214275524857096537889190519 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39085113135624327.6983994222303554974540240607439045561477542 ^2 ::== 1527646068824553365675900937659146 as intpart 1527646068824553311081860074202929  diafora 6371110379161090831062264067038319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 83732796593830787.7130793860005740225638248830364318564534187 ^2 ::== 7011181225423840764832169955518997 as intpart 7011181225423840645415907589039369  diafora 887575222561803496728216552201879 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20933199148457696.9282698465001435056409562207591079641133547 ^2 ::== 438198826588990047802010622219937.3125 as intpart 438198826588990008938695501628416  diafora 7460557621396654133205428639612832 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 68 ^2 ::== 4624 as intpart 4624  diafora 7898756447985644142144124141236624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61568232789581461.5537348426474808724129239578815031563863158 ^2 ::== 3790647288832093839117738946539246.5 as intpart 3790647288832093770932787554894521  diafora 4108109159153550371211336586346727 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 12313646557916292.3107469685294961744825847915763006312772632 ^2 ::== 151625891553283753564709557861569.859375 as intpart 151625891553283745911852879029264  diafora 7747130556432360396232271262211984 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 30784116394790730.7768674213237404362064619789407515781931579 ^2 ::== 947661822208023459779434736634811.625 as intpart 947661822208023411949080493932900  diafora 6951094625777620730195043647308348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2093319914845769.69282698465001435060746370897533097377163358 ^2 ::== 4381988265889900478020106222199.373046875 as intpart 4381988265889897577403057201361  diafora 7894374459719754244566721084039887 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 52332997871144242.3206746162503587641023905518977699102833867 ^2 ::== 2738742666181187798762566388874608 as intpart 2738742666181187765198838369754564  diafora 5160013781804456376945285771486684 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9808058503293432.29570876342041544151961751651924714678898454 ^2 ::== 96198011604026603255048397466606.984375 as intpart 96198011604026597454390694338624  diafora 7802558436381617544689733446902624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24520146258233580.7392719085510386020643203153213107725605369 ^2 ::== 601237572525166270344052484166293.5625 as intpart 601237572525166234089941839616400  diafora 7297518875460477908054182301624848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 87 ^2 ::== 7569 as intpart 7569  diafora 7898756447985644142144124141233679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56368152317778346.5270618587380197644920443167393386829644442 ^2 ::== 3177368595720260379675267454967860 as intpart 3177368595720260320256261186495716  diafora 4721387852265383821887862954745532 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11273630463555669.3054123717476039528984088633478677365928888 ^2 ::== 127094743828810415187010698198714.40625 as intpart 127094743828810408300798262037561  diafora 7771661704156833733843325879203687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28184076158889173.2635309293690098822460221583696693414822221 ^2 ::== 794342148930065094918816863741965 as intpart 794342148930065080064065296623929  diafora 7104414299055579062080058844617319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2452014625823358.07392719085510386037990437912981178669724613 ^2 ::== 6012375725251662703440524841662.9365234375 as intpart 6012375725251662340899418396164  diafora 7892744072260392479803224722845084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61300365645583951.8481797713775965016913538363496627425774932 ^2 ::== 3757734828282289189650328026039334.5 as intpart 3757734828282289085662867788770401  diafora 4141021619703355056481256352470847 from 7898756447985644142144124141241248
the size of xpl vector is 52 64
 of 83732796593830787.7130793860005740225638248830364318564534187 ^2 ::== 7011181225423840764832169955518997 as intpart 7011181225423840645415907589039369  diafora 887575222561803496728216552201879 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

9 26 |35 17| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 21
section h 10746607412225366179787924001688.76171875
7898756447985644142144124141241248 / 35 ::== 225678755656732689775546404035464.21875
            ----->  | *2 451357511313465379551092808070928
            ----->  /2 112839377828366344887773202017732
                 --> 56419688914183172443886601008866
                 --> 28209844457091586221943300504433
            ----->  section 10746607412225366179787924001688.76171875
                 --> of section *2 21493214824450732359575848003377.5234375
                 --> of section /2 5373303706112683089893962000844.380859375

i insert 2037236030190850194740486781892369 45135751131346537.955109280807092800302804391776589909568429
i insert 127327251886928131529311532449956 11283937782836634.4887773202017732000757010979441474773921072
i insert 441 21
i insert 115489570872497177596076373833956 10746607412225366.1797879240016887637115816644950427871663123
i insert 461958283489988710384305495335824 21493214824450732.3595758480033775274231633289900855743326247
i insert 2887239271812429439901909345848900 53733037061126830.8989396200084438168231848464984068414196372
i insert 1273272518869280412578092697569 1128393778283663.44887773202017732009430628359325510245980695
i insert 795795324293300878477885991995396 28209844457091586.2219433005044329984545292688835615990683436
CDIS Start 
section_temp 31
section h 1039994265699228985140766838873.0968017578125
225678755656732689775546404035464.21875 / 7 ::== 32239822236676098539363772005066.31640625
            ----->  | *2 64479644473352197078727544010132
            ----->  /2 16119911118338049269681886002533
                 --> 8059955559169024634840943001266.5
                 --> 4029977779584512317420471500633.25
            ----->  section 1039994265699228985140766838873.0968017578125
                 --> of section *2 2079988531398457970281533677746.193603515625
                 --> of section /2 519997132849614492570383419436.54840087890625

i insert 4157624551409898522418038404726809 64479644473352197.0787275440101320098107429146239155670627952
i insert 259851534463118649591171841126401 16119911118338049.2696818860025330024526857286559788917656988
i insert 961 31
i insert 108158807268727831733343805459521 10399942656992289.8514076683887309704434898094405070878565311
i insert 432635229074911368533145849807241 20799885313984579.7028153367774619408869796188810141757130623
i insert 2703970181718196209331301416179601 51999713284961449.2570383419436548522174490472025354392826557
i insert 2598515344631183594327717110416 1611991111833804.92696818860025330020190048596617771181627177
i insert 1624072090394491600244601802885129 40299777795845123.1742047150063325069990760596283507766202092
CDIS End 
section_temp 81
section h 5736206570795674758274599957328.419921875
7898756447985644142144124141241248 / 17 ::== 464632732234449655420242596543602.8125
            ----->  | *2 929265464468899310840485193087204
            ----->  /2 232316366117224827710121298271801
                 --> 116158183058612413855060649135900.5
                 --> 58079091529306206927530324567950.25
            ----->  section 5736206570795674758274599957328.419921875
                 --> of section *2 11472413141591349516549199914656.83984375
                 --> of section /2 2868103285397837379137299978664.2099609375

i insert 86353430345459914738741695354049 9292654644688993.10840485193087204436601655999083959613926709
i insert 539708939659124443885498984240324 23231636611722482.7710121298271801100476796619886954431422055
i insert 6561 81
i insert 3290406582283947378407865622822009 57362065707956747.5827459995732841846471927738093654625117779
i insert 131616263291357885958384111639801 11472413141591349.5165491999146568369294385547618730925023556
i insert 822601645570986815920933551727129 28681032853978373.7913729997866420923235963869046827312558889
i insert 5397089396591243509589525373504 2323163661172248.27710121298271801109150413999770989903481677
i insert 3373180872869527890442551710114436 58079091529306206.9275303245679502733844756789949315134435892
section_temp 55
section h 55946144760319043397982251239.43636322021484375
464632732234449655420242596543602.8125 / 151 ::== 3077037961817547386889023818169.55517578125
            ----->  | *2 6154075923635094773778047636338
            ----->  /2 1538518980908773693444511909084.5
                 --> 769259490454386846722255954542.25
                 --> 384629745227193423361127977271.125
            ----->  section 55946144760319043397982251239.43636322021484375
                 --> of section *2 111892289520638086795964502478.8727264404296875
                 --> of section /2 27973072380159521698991125619.718181610107421875

i insert 3787265047386514393359316147796809 61540759236350947.737780476363379990323299040255733416415751
i insert 236704065461657126507172545605696 15385189809087736.9344451190908449975808247600639333541039377
i insert 3025 55
i insert 3129971113542573909325431148435849 55946144760319043.3979822512394363617782566677760769380256534
i insert 125198844541702942945942503460864 11189228952063808.6795964502478872727025960287505768064875156
i insert 782492778385643449358285406949441 27973072380159521.6989911256197181808891283338880384690128267
i insert 2367040654616569418848948365529 1538518980908773.69344451190908449971471438910697315805009566
i insert 1479400409135357194521726500912964 38462974522719342.3361127977271124930847001621714298380538821
removals 
reporing rt 3
section_temp 65
section h 3424641810691002190594728926419.90771484375
225678755656732689775546404035464.21875 - 3077037961817547386889023818169.55517578125 ::== 222601717694915142388657380217294.65625
            ----->  | *2 445203435389830284777314760434588
            ----->  /2 111300858847457571194328690108647
                 --> 55650429423728785597164345054323.5
                 --> 27825214711864392798582172527161.75
            ----->  section 3424641810691002190594728926419.90771484375
                 --> of section *2 6849283621382004381189457852839.8154296875
                 --> of section /2 1712320905345501095297364463209.953857421875

i insert 1982060988829067845979912472048784 44520343538983028.4777314760434588150617152280119626084342599
i insert 123878811801816740373744529503049 11130085884745757.119432869010864703765428807002990652108565
i insert 4225 65
i insert 1172817153153294546539308590220441 34246418106910021.9059472892641990855733258314330669236369431
i insert 4691268612613178323142906788521849 68492836213820043.8118945785283981711466516628661338472738862
i insert 293204288288323619511618094100100 17123209053455010.9529736446320995427866629157165334618184716
i insert 1238788118018165845525421430625 1113008588474575.71194328690108647035485883725058897653070744
i insert 774242573761354599510688597529664 27825214711864392.7985821725271617585462102795190730830654502
section_temp 76
section h 383720845721823041479930897196
32239822236676098539363772005066.31640625 - 3077037961817547386889023818169.55517578125 ::== 29162784274858551152474748186896.76171875
            ----->  | *2 58325568549717102304949496373792
            ----->  /2 14581392137429275576237374093448
                 --> 7290696068714637788118687046724
                 --> 3645348034357318894059343523362
            ----->  section 383720845721823041479930897196
                 --> of section *2 767441691443646082959861794392
                 --> of section /2 191860422860911520739965448598

i insert 3401871946647748729116764231278404 58325568549717102.3049494963737920047441853910186182474717498
i insert 212616996665484280988405627025625 14581392137429275.5762373740934480011860463477546545618679374
i insert 5776 76
i insert 1472416874414711192195661010748416 38372084572182304.1479930897196000058602116666861547855660319
i insert 5889667497658844768782644042993664 76744169144364608.2959861794392000117204233333723095711320639
i insert 368104218603677798048915252687104 19186042286091152.073996544859800002930105833343077392783016
i insert 2126169966654841351744842527329 1458139213742927.55762373740934480020534080857430581090738997
i insert 1328856229159276792631015512483344 36453480343573188.9405934352336200038324776073750399518758059
section_temp 25
section h 18462227770905284321334142909017.3203125
464632732234449655420242596543602.8125 - 3077037961817547386889023818169.55517578125 ::== 461555694272632108033353572725433.25
            ----->  | *2 923111388545264216066707145450866
            ----->  /2 230777847136316054016676786362716.5
                 --> 115388923568158027008338393181358.25
                 --> 57694461784079013504169196590679.125
            ----->  section 18462227770905284321334142909017.3203125
                 --> of section *2 36924455541810568642668285818034.640625
                 --> of section /2 9231113885452642160667071454508.66015625

i insert 85213463566196572927473224780164 9231113885452642.16066707145450865971969545142883362132124603
i insert 532584147288728580796707654876025 23077784713631605.4016676786362716501666003665604876005090773
i insert 625 25
i insert 340853854264786291709892899120656 18462227770905284.3213341429090173194393909028576672426424921
i insert 1363415417059145166839571596482624 36924455541810568.6426682858180346388787818057153344852849841
i insert 85213463566196572927473224780164 9231113885452642.16066707145450865971969545142883362132124603
i insert 5325841472887283500188605185600 2307778471363160.54016676786362716492992386285720840533031151
i insert 3328650920554553687673884627054169 57694461784079013.5041691965906791236817774404244119068607688
ending sqti reporting the results 
reporting size of xl vector 55 64
entering amfidromi loop of xl vector  with first 
 of 45135751131346537.955109280807092800302804391776589909568429 ^2 ::== 2037236030190850280959636385389002.25 as intpart 2037236030190850194740486781892369  diafora 5861520417794793947403637359348879 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11283937782836634.4887773202017732000757010979441474773921072 ^2 ::== 127327251886928142559977274086812.640625 as intpart 127327251886928131529311532449956  diafora 7771429196098716010614812608791292 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21 ^2 ::== 441 as intpart 441  diafora 7898756447985644142144124141240807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10746607412225366.1797879240016887637115816644950427871663123 ^2 ::== 115489570872497181460296847244274.546875 as intpart 115489570872497177596076373833956  diafora 7783266877113146964548047767407292 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21493214824450732.3595758480033775274231633289900855743326247 ^2 ::== 461958283489988725841187388977098.1875 as intpart 461958283489988710384305495335824  diafora 7436798164495655431759818645905424 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 53733037061126830.8989396200084438168231848464984068414196372 ^2 ::== 2887239271812429536507421181106863.5 as intpart 2887239271812429439901909345848900  diafora 5011517176173214702242214795392348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1128393778283663.44887773202017732009430628359325510245980695 ^2 ::== 1273272518869281425599772740868.126708984375 as intpart 1273272518869280412578092697569  diafora 7897483175466774861731546048543679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28209844457091586.2219433005044329984545292688835615990683436 ^2 ::== 795795324293300890999857963042578.875 as intpart 795795324293300878477885991995396  diafora 7102961123692343263666238149245852 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 64479644473352197.0787275440101320098107429146239155670627952 ^2 ::== 4157624551409898532570686500793809.5 as intpart 4157624551409898522418038404726809  diafora 3741131896575745619726085736514439 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16119911118338049.2696818860025330024526857286559788917656988 ^2 ::== 259851534463118658285667906299613.09375 as intpart 259851534463118649591171841126401  diafora 7638904913522525492552952300114847 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 31 ^2 ::== 961 as intpart 961  diafora 7898756447985644142144124141240287 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10399942656992289.8514076683887309704434898094405070878565311 ^2 ::== 108158807268727849442525663392138.671875 as intpart 108158807268727831733343805459521  diafora 7790597640716916310410780335781727 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20799885313984579.7028153367774619408869796188810141757130623 ^2 ::== 432635229074911397770102653568554.6875 as intpart 432635229074911368533145849807241  diafora 7466121218910732773610978291434007 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 51999713284961449.2570383419436548522174490472025354392826557 ^2 ::== 2703970181718196236063141584803467 as intpart 2703970181718196209331301416179601  diafora 5194786266267447932812822725061647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1611991111833804.92696818860025330020190048596617771181627177 ^2 ::== 2598515344631186582856679062996.130859375 as intpart 2598515344631183594327717110416  diafora 7896157932641012958549796424130832 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40299777795845123.1742047150063325069990760596283507766202092 ^2 ::== 1624072090394491614285424414372582 as intpart 1624072090394491600244601802885129  diafora 6274684357591152541899522338356119 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9292654644688993.10840485193087204436601655999083959613926709 ^2 ::== 86353430345459916753479396958530.3125 as intpart 86353430345459914738741695354049  diafora 7812403017640184227405382445887199 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 23231636611722482.7710121298271801100476796619886954431422055 ^2 ::== 539708939659124479709246230990814.4375 as intpart 539708939659124443885498984240324  diafora 7359047508326519698258625157000924 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 81 ^2 ::== 6561 as intpart 6561  diafora 7898756447985644142144124141234687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 57362065707956747.5827459995732841846471927738093654625117779 ^2 ::== 3290406582283947445262894259965333 as intpart 3290406582283947378407865622822009  diafora 4608349865701696763736258518419239 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11472413141591349.5165491999146568369294385547618730925023556 ^2 ::== 131616263291357897810515770398613.328125 as intpart 131616263291357885958384111639801  diafora 7767140184694286256185740029601447 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28681032853978373.7913729997866420923235963869046827312558889 ^2 ::== 822601645570986861315723564991333.25 as intpart 822601645570986815920933551727129  diafora 7076154802414657326223190589514119 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2323163661172248.27710121298271801109150413999770989903481677 ^2 ::== 5397089396591244797092462309908.14453125 as intpart 5397089396591243509589525373504  diafora 7893359358589052898634534615867744 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 58079091529306206.9275303245679502733844756789949315134435892 ^2 ::== 3373180872869527998182788943692590 as intpart 3373180872869527890442551710114436  diafora 4525575575116116251701572431126812 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61540759236350947.737780476363379990323299040255733416415751 ^2 ::== 3787265047386514484166457478114967 as intpart 3787265047386514393359316147796809  diafora 4111491400599129748784807993444439 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15385189809087736.9344451190908449975808247600639333541039377 ^2 ::== 236704065461657155260403592382185.4375 as intpart 236704065461657126507172545605696  diafora 7662052382523987015636951595635552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 55 ^2 ::== 3025 as intpart 3025  diafora 7898756447985644142144124141238223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 55946144760319043.3979822512394363617782566677760769380256534 ^2 ::== 3129971113542573953856576428194188.5 as intpart 3129971113542573909325431148435849  diafora 4768785334443070232818692992805399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11189228952063808.6795964502478872727025960287505768064875156 ^2 ::== 125198844541702958154263057127767.546875 as intpart 125198844541702942945942503460864  diafora 7773557603443941199198181637780384 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 27973072380159521.6989911256197181808891283338880384690128267 ^2 ::== 782492778385643488464144107048547.125 as intpart 782492778385643449358285406949441  diafora 7116263669600000692785838734291807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1538518980908773.69344451190908449971471438910697315805009566 ^2 ::== 2367040654616571552604035923821.854248046875 as intpart 2367040654616569418848948365529  diafora 7896389407331027572725275192875719 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 38462974522719342.3361127977271124930847001621714298380538821 ^2 ::== 1479400409135357220377522452388659 as intpart 1479400409135357194521726500912964  diafora 6419356038850286947622397640328284 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 44520343538983028.4777314760434588150617152280119626084342599 ^2 ::== 1982060988829067888517451337729238 as intpart 1982060988829067845979912472048784  diafora 5916695459156576296164211669192464 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11130085884745757.119432869010864703765428807002990652108565 ^2 ::== 123878811801816743032340708608077.375 as intpart 123878811801816740373744529503049  diafora 7774877636183827401770379611738199 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65 ^2 ::== 4225 as intpart 4225  diafora 7898756447985644142144124141237023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 34246418106910021.9059472892641990855733258314330669236369431 ^2 ::== 1172817153153294608590207892147477.875 as intpart 1172817153153294546539308590220441  diafora 6725939294832349595604815551020807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 68492836213820043.8118945785283981711466516628661338472738862 ^2 ::== 4691268612613178434360831568589911.5 as intpart 4691268612613178323142906788521849  diafora 3207487835372465819001217352719399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17123209053455010.9529736446320995427866629157165334618184716 ^2 ::== 293204288288323652147551973036869.46875 as intpart 293204288288323619511618094100100  diafora 7605552159697320522632506047141148 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1113008588474575.71194328690108647035485883725058897653070744 ^2 ::== 1238788118018167430323407086080.773681640625 as intpart 1238788118018165845525421430625  diafora 7897517659867625976298598719810623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 27825214711864392.7985821725271617585462102795190730830654502 ^2 ::== 774242573761354643952129428800483.5 as intpart 774242573761354599510688597529664  diafora 7124513874224289542633435543711584 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 58325568549717102.3049494963737920047441853910186182474717498 ^2 ::== 3401871946647748764689469741181029 as intpart 3401871946647748729116764231278404  diafora 4496884501337895413027359909962844 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14581392137429275.5762373740934480011860463477546545618679374 ^2 ::== 212616996665484297793091858823814.3125 as intpart 212616996665484280988405627025625  diafora 7686139451320159861155718514215623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 76 ^2 ::== 5776 as intpart 5776  diafora 7898756447985644142144124141235472 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 38372084572182304.1479930897196000058602116666861547855660319 ^2 ::== 1472416874414711203553267720386525.75 as intpart 1472416874414711192195661010748416  diafora 6426339573570932949948463130492832 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 76744169144364608.2959861794392000117204233333723095711320639 ^2 ::== 5889667497658844814213070881546103 as intpart 5889667497658844768782644042993664  diafora 2009088950326799373361480098247584 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 19186042286091152.073996544859800002930105833343077392783016 ^2 ::== 368104218603677800888316930096631.4375 as intpart 368104218603677798048915252687104  diafora 7530652229381966344095208888554144 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1458139213742927.55762373740934480020534080857430581090738997 ^2 ::== 2126169966654842977930918588238.143310546875 as intpart 2126169966654841351744842527329  diafora 7896630278018989300792379298713919 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 36453480343573188.9405934352336200038324776073750399518758059 ^2 ::== 1328856229159276861206824117648839.5 as intpart 1328856229159276792631015512483344  diafora 6569900218826367349513108628757904 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9231113885452642.16066707145450865971969545142883362132124603 ^2 ::== 85213463566196575893745293257617.421875 as intpart 85213463566196572927473224780164  diafora 7813542984419447569216650916461084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 23077784713631605.4016676786362716501666003665604876005090773 ^2 ::== 532584147288728599335908082860108.9375 as intpart 532584147288728580796707654876025  diafora 7366172300696915561347416486365223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 25 ^2 ::== 625 as intpart 625  diafora 7898756447985644142144124141240623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 18462227770905284.3213341429090173194393909028576672426424921 ^2 ::== 340853854264786303574981173030469.6875 as intpart 340853854264786291709892899120656  diafora 7557902593720857850434231242120592 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 36924455541810568.6426682858180346388787818057153344852849841 ^2 ::== 1363415417059145214299924692121878.75 as intpart 1363415417059145166839571596482624  diafora 6535341030926498975304552544758624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9231113885452642.16066707145450865971969545142883362132124603 ^2 ::== 85213463566196575893745293257617.421875 as intpart 85213463566196572927473224780164  diafora 7813542984419447569216650916461084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2307778471363160.54016676786362716492992386285720840533031151 ^2 ::== 5325841472887285993359080828601.0888671875 as intpart 5325841472887283500188605185600  diafora 7893430606512756858643935536055648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 57694461784079013.5041691965906791236817774404244119068607688 ^2 ::== 3328650920554553745849425517875680.5 as intpart 3328650920554553687673884627054169  diafora 4570105527431090454470239514187079 from 7898756447985644142144124141241248
the size of xpl vector is 55 64
 of 76744169144364608.2959861794392000117204233333723095711320639 ^2 ::== 5889667497658844814213070881546103 as intpart 5889667497658844768782644042993664  diafora 2009088950326799373361480098247584 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

9 |26| 35 |17| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 78
section h 3894850319519548393562191391144.58984375
7898756447985644142144124141241248 / 26 ::== 303798324922524774697850928509278.78125
            ----->  | *2 607596649845049549395701857018556
            ----->  /2 151899162461262387348925464254639
                 --> 75949581230631193674462732127319.5
                 --> 37974790615315596837231366063659.75
            ----->  section 3894850319519548393562191391144.58984375
                 --> of section *2 7789700639039096787124382782289.1796875
                 --> of section /2 1947425159759774196781095695572.294921875

i insert 3691736889029277392000916450542116 60759664984504954.9395701857018555966383210886760934954509139
i insert 230733555564329821810141032032644 15189916246126238.7348925464254638991595802721690233738627285
i insert 6084 78
i insert 1516985901146152748525174583603289 38948503195195483.9356219139114458974160193349689507158473134
i insert 6067943604584611149894711115195089 77897006390390967.8712438278228917948320386699379014316946268
i insert 379246475286538167657042048303081 19474251597597741.9678109569557229487080096674844753579236567
i insert 2307335555643295787714810940129 1518991624612623.87348925464254638991595802721690233738627285
i insert 1442084722277061462262962680835216 37974790615315596.8372313660636597487663124184109619818627834
CDIS Start 
section_temp 96
section h 452080840658519009967040072186.41668701171875
303798324922524774697850928509278.78125 / 7 ::== 43399760703217824956835846929896.96875
            ----->  | *2 86799521406435649913671693859792
            ----->  /2 21699880351608912478417923464948
                 --> 10849940175804456239208961732474
                 --> 5424970087902228119604480866237
            ----->  section 452080840658519009967040072186.41668701171875
                 --> of section *2 904161681317038019934080144372.8333740234375
                 --> of section /2 226040420329259504983520036093.208343505859375

i insert 7534156916386280466238194778051201 86799521406435649.9136716938597920084630388259938627015799284
i insert 470884807274142518289946997823744 21699880351608912.4784179234649480021157597064984656753949821
i insert 9216 96
i insert 2043770864905132457855672733610000 45208084065851900.9967040072186416771460315544572949875146151
i insert 81750834596205298314226909344400 9041616813170380.19934080144372833508226161569609757862053812
i insert 510942716226283114463918183402500 22604042032925950.4983520036093208385730157772286474937573075
i insert 4708848072741424314904255913881 2169988035160891.24784179234649480029831214444868692226009443
i insert 2943030045463390847811570494442961 54249700879022281.1960448086623700070241227422229712828993797
CDIS End 
section_temp 81
section h 5736206570795674758274599957328.419921875
7898756447985644142144124141241248 / 17 ::== 464632732234449655420242596543602.8125
            ----->  | *2 929265464468899310840485193087204
            ----->  /2 232316366117224827710121298271801
                 --> 116158183058612413855060649135900.5
                 --> 58079091529306206927530324567950.25
            ----->  section 5736206570795674758274599957328.419921875
                 --> of section *2 11472413141591349516549199914656.83984375
                 --> of section /2 2868103285397837379137299978664.2099609375

i insert 86353430345459914738741695354049 9292654644688993.10840485193087204436601655999083959613926709
i insert 539708939659124443885498984240324 23231636611722482.7710121298271801100476796619886954431422055
i insert 6561 81
i insert 3290406582283947378407865622822009 57362065707956747.5827459995732841846471927738093654625117779
i insert 131616263291357885958384111639801 11472413141591349.5165491999146568369294385547618730925023556
i insert 822601645570986815920933551727129 28681032853978373.7913729997866420923235963869046827312558889
i insert 5397089396591243509589525373504 2323163661172248.27710121298271801109150413999770989903481677
i insert 3373180872869527890442551710114436 58079091529306206.9275303245679502733844756789949315134435892
section_temp 55
section h 55946144760319043397982251239.43636322021484375
464632732234449655420242596543602.8125 / 151 ::== 3077037961817547386889023818169.55517578125
            ----->  | *2 6154075923635094773778047636338
            ----->  /2 1538518980908773693444511909084.5
                 --> 769259490454386846722255954542.25
                 --> 384629745227193423361127977271.125
            ----->  section 55946144760319043397982251239.43636322021484375
                 --> of section *2 111892289520638086795964502478.8727264404296875
                 --> of section /2 27973072380159521698991125619.718181610107421875

i insert 3787265047386514393359316147796809 61540759236350947.737780476363379990323299040255733416415751
i insert 236704065461657126507172545605696 15385189809087736.9344451190908449975808247600639333541039377
i insert 3025 55
i insert 3129971113542573909325431148435849 55946144760319043.3979822512394363617782566677760769380256534
i insert 125198844541702942945942503460864 11189228952063808.6795964502478872727025960287505768064875156
i insert 782492778385643449358285406949441 27973072380159521.6989911256197181808891283338880384690128267
i insert 2367040654616569418848948365529 1538518980908773.69344451190908449971471438910697315805009566
i insert 1479400409135357194521726500912964 38462974522719342.3361127977271124930847001621714298380538821
removals 
reporing rt 3
section_temp 21
section h 14320061283843201300521995461481.380859375
303798324922524774697850928509278.78125 - 3077037961817547386889023818169.55517578125 ::== 300721286960707227310961904691109.21875
            ----->  | *2 601442573921414454621923809382218
            ----->  /2 150360643480353613655480952345554.5
                 --> 75180321740176806827740476172777.25
                 --> 37590160870088403413870238086388.625
            ----->  section 14320061283843201300521995461481.380859375
                 --> of section *2 28640122567686402601043990922962.76171875
                 --> of section /2 7160030641921600650260997730740.6904296875

i insert 3617331697252160850637642886688025 60144257392141445.4621923809382218056862612343138607684522867
i insert 226083231078260045646820506400321 15036064348035361.3655480952345554514215653085784651921130717
i insert 441 21
i insert 205064155173024986077484753926401 14320061283843201.3005219954614813809845585979019233491271734
i insert 820256620692099944309939015705604 28640122567686402.6010439909229627619691171958038466982543468
i insert 5126603879325624795137731686592036 71600306419216006.5026099773074069049227929895096167456358671
i insert 2260832310782600155746918103296 1503606434803536.13655480952345554505542035705900616449071094
i insert 1413020194239125322882789035090409 37590160870088403.4138702380863886268191897954693558858707547
section_temp 41
section h 983481042473177501706020075895.780517578125
43399760703217824956835846929896.96875 - 3077037961817547386889023818169.55517578125 ::== 40322722741400277569946823111727.4140625
            ----->  | *2 80645445482800555139893646223454
            ----->  /2 20161361370700138784973411555863.5
                 --> 10080680685350069392486705777931.75
                 --> 5040340342675034696243352888965.875
            ----->  section 983481042473177501706020075895.780517578125
                 --> of section *2 1966962084946355003412040151791.56103515625
                 --> of section /2 491740521236588750853010037947.8902587890625

i insert 6503687877119356441540325908308025 80645445482800555.1398936462234540017979256276703381445258856
i insert 406480492319959747354228313219044 20161361370700138.7849734115558635004494814069175845361314714
i insert 1681 41
i insert 96723496090412796572580694650625 9834810424731775.01706020075895780564734227624512641341425478
i insert 386893984361651186290322778602500 19669620849463550.0341204015179156112946845524902528268285096
i insert 2418087402260319914314517366265625 49174052123658875.0853010037947890265019879052488249726593494
i insert 4064804923199594247724463820169 2016136137070013.87849734115558634995821196689291809889255092
i insert 2540503076999748521770733811119716 50403403426750346.962433528889658752858426993270768434740603
section_temp 25
section h 18462227770905284321334142909017.3203125
464632732234449655420242596543602.8125 - 3077037961817547386889023818169.55517578125 ::== 461555694272632108033353572725433.25
            ----->  | *2 923111388545264216066707145450866
            ----->  /2 230777847136316054016676786362716.5
                 --> 115388923568158027008338393181358.25
                 --> 57694461784079013504169196590679.125
            ----->  section 18462227770905284321334142909017.3203125
                 --> of section *2 36924455541810568642668285818034.640625
                 --> of section /2 9231113885452642160667071454508.66015625

i insert 85213463566196572927473224780164 9231113885452642.16066707145450865971969545142883362132124603
i insert 532584147288728580796707654876025 23077784713631605.4016676786362716501666003665604876005090773
i insert 625 25
i insert 340853854264786291709892899120656 18462227770905284.3213341429090173194393909028576672426424921
i insert 1363415417059145166839571596482624 36924455541810568.6426682858180346388787818057153344852849841
i insert 85213463566196572927473224780164 9231113885452642.16066707145450865971969545142883362132124603
i insert 5325841472887283500188605185600 2307778471363160.54016676786362716492992386285720840533031151
i insert 3328650920554553687673884627054169 57694461784079013.5041691965906791236817774404244119068607688
ending sqti reporting the results 
reporting size of xl vector 55 64
entering amfidromi loop of xl vector  with first 
 of 60759664984504954.9395701857018555966383210886760934954509139 ^2 ::== 3691736889029277506176855875889822 as intpart 3691736889029277392000916450542116  diafora 4207019558956366750143207690699132 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15189916246126238.7348925464254638991595802721690233738627285 ^2 ::== 230733555564329844136053492243113.875 as intpart 230733555564329821810141032032644  diafora 7668022892421314320333983109208604 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 78 ^2 ::== 6084 as intpart 6084  diafora 7898756447985644142144124141235164 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 38948503195195483.9356219139114458974160193349689507158473134 ^2 ::== 1516985901146152821407320790553017.25 as intpart 1516985901146152748525174583603289  diafora 6381770546839491393618949557637959 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 77897006390390967.8712438278228917948320386699379014316946268 ^2 ::== 6067943604584611285629283162212069 as intpart 6067943604584611149894711115195089  diafora 1830812843401032992249413026046159 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 19474251597597741.9678109569557229487080096674844753579236567 ^2 ::== 379246475286538205351830197638254.3125 as intpart 379246475286538167657042048303081  diafora 7519509972699105974487082092938167 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1518991624612623.87348925464254638991595802721690233738627285 ^2 ::== 2307335555643298441360534922431.138916015625 as intpart 2307335555643295787714810940129  diafora 7896449112430000846356409330301119 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37974790615315596.8372313660636597487663124184109619818627834 ^2 ::== 1442084722277061525850334326519462 as intpart 1442084722277061462262962680835216  diafora 6456671725708582679881161460406032 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 86799521406435649.9136716938597920084630388259938627015799284 ^2 ::== 7534156916386280624850726277325873 as intpart 7534156916386280466238194778051201  diafora 364599531599363675905929363190047 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21699880351608912.4784179234649480021157597064984656753949821 ^2 ::== 470884807274142539053170392332867.0625 as intpart 470884807274142518289946997823744  diafora 7427871640711501623854177143417504 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 96 ^2 ::== 9216 as intpart 9216  diafora 7898756447985644142144124141232032 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 45208084065851900.9967040072186416771460315544572949875146151 ^2 ::== 2043770864905132547973829827833624.75 as intpart 2043770864905132457855672733610000  diafora 5854985583080511684288451407631248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9041616813170380.19934080144372833508226161569609757862053812 ^2 ::== 81750834596205301918953193113344.984375 as intpart 81750834596205298314226909344400  diafora 7817005613389438843829897231896848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 22604042032925950.4983520036093208385730157772286474937573075 ^2 ::== 510942716226283136993457456958406.1875 as intpart 510942716226283114463918183402500  diafora 7387813731759361027680205957838748 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2169988035160891.24784179234649480029831214444868692226009443 ^2 ::== 4708848072741425390531703923328.6708984375 as intpart 4708848072741424314904255913881  diafora 7894047599912902717829219885327367 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 54249700879022281.1960448086623700070241227422229712828993797 ^2 ::== 2943030045463390869082314952080419 as intpart 2943030045463390847811570494442961  diafora 4955726402522253294332553646798287 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9292654644688993.10840485193087204436601655999083959613926709 ^2 ::== 86353430345459916753479396958530.3125 as intpart 86353430345459914738741695354049  diafora 7812403017640184227405382445887199 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 23231636611722482.7710121298271801100476796619886954431422055 ^2 ::== 539708939659124479709246230990814.4375 as intpart 539708939659124443885498984240324  diafora 7359047508326519698258625157000924 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 81 ^2 ::== 6561 as intpart 6561  diafora 7898756447985644142144124141234687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 57362065707956747.5827459995732841846471927738093654625117779 ^2 ::== 3290406582283947445262894259965333 as intpart 3290406582283947378407865622822009  diafora 4608349865701696763736258518419239 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11472413141591349.5165491999146568369294385547618730925023556 ^2 ::== 131616263291357897810515770398613.328125 as intpart 131616263291357885958384111639801  diafora 7767140184694286256185740029601447 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28681032853978373.7913729997866420923235963869046827312558889 ^2 ::== 822601645570986861315723564991333.25 as intpart 822601645570986815920933551727129  diafora 7076154802414657326223190589514119 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2323163661172248.27710121298271801109150413999770989903481677 ^2 ::== 5397089396591244797092462309908.14453125 as intpart 5397089396591243509589525373504  diafora 7893359358589052898634534615867744 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 58079091529306206.9275303245679502733844756789949315134435892 ^2 ::== 3373180872869527998182788943692590 as intpart 3373180872869527890442551710114436  diafora 4525575575116116251701572431126812 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61540759236350947.737780476363379990323299040255733416415751 ^2 ::== 3787265047386514484166457478114967 as intpart 3787265047386514393359316147796809  diafora 4111491400599129748784807993444439 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15385189809087736.9344451190908449975808247600639333541039377 ^2 ::== 236704065461657155260403592382185.4375 as intpart 236704065461657126507172545605696  diafora 7662052382523987015636951595635552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 55 ^2 ::== 3025 as intpart 3025  diafora 7898756447985644142144124141238223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 55946144760319043.3979822512394363617782566677760769380256534 ^2 ::== 3129971113542573953856576428194188.5 as intpart 3129971113542573909325431148435849  diafora 4768785334443070232818692992805399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11189228952063808.6795964502478872727025960287505768064875156 ^2 ::== 125198844541702958154263057127767.546875 as intpart 125198844541702942945942503460864  diafora 7773557603443941199198181637780384 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 27973072380159521.6989911256197181808891283338880384690128267 ^2 ::== 782492778385643488464144107048547.125 as intpart 782492778385643449358285406949441  diafora 7116263669600000692785838734291807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1538518980908773.69344451190908449971471438910697315805009566 ^2 ::== 2367040654616571552604035923821.854248046875 as intpart 2367040654616569418848948365529  diafora 7896389407331027572725275192875719 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 38462974522719342.3361127977271124930847001621714298380538821 ^2 ::== 1479400409135357220377522452388659 as intpart 1479400409135357194521726500912964  diafora 6419356038850286947622397640328284 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 60144257392141445.4621923809382218056862612343138607684522867 ^2 ::== 3617331697252160906234077934358228.5 as intpart 3617331697252160850637642886688025  diafora 4281424750733483291506481254553223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15036064348035361.3655480952345554514215653085784651921130717 ^2 ::== 226083231078260056639629870897389.28125 as intpart 226083231078260045646820506400321  diafora 7672673216907384096497303634840927 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21 ^2 ::== 441 as intpart 441  diafora 7898756447985644142144124141240807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14320061283843201.3005219954614813809845585979019233491271734 ^2 ::== 205064155173024994684471538228924.46875 as intpart 205064155173024986077484753926401  diafora 7693692292812619156066639387314847 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28640122567686402.6010439909229627619691171958038466982543468 ^2 ::== 820256620692099978737886152915697.875 as intpart 820256620692099944309939015705604  diafora 7078499827293544197834185125535644 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 71600306419216006.5026099773074069049227929895096167456358671 ^2 ::== 5126603879325624867111788455723111.5 as intpart 5126603879325624795137731686592036  diafora 2772152568660019347006392454649212 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1503606434803536.13655480952345554505542035705900616449071094 ^2 ::== 2260832310782600566396298708973.892333984375 as intpart 2260832310782600155746918103296  diafora 7896495615674861541988377223137952 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37590160870088403.4138702380863886268191897954693558858707547 ^2 ::== 1413020194239125353997686693108682.75 as intpart 1413020194239125322882789035090409  diafora 6485736253746518819261335106150839 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 80645445482800555.1398936462234540017979256276703381445258856 ^2 ::== 6503687877119356464103896748115520 as intpart 6503687877119356441540325908308025  diafora 1395068570866287700603798232933223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20161361370700138.7849734115558635004494814069175845361314714 ^2 ::== 406480492319959779006493546757220 as intpart 406480492319959747354228313219044  diafora 7492275955665684394789895828022204 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 41 ^2 ::== 1681 as intpart 1681  diafora 7898756447985644142144124141239567 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9834810424731775.01706020075895780564734227624512641341425478 ^2 ::== 96723496090412796908148375195055.328125 as intpart 96723496090412796572580694650625  diafora 7802032951895231345571543446590623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 19669620849463550.0341204015179156112946845524902528268285096 ^2 ::== 386893984361651187632593500780221.3125 as intpart 386893984361651186290322778602500  diafora 7511862463623992955853801362638748 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 49174052123658875.0853010037947890265019879052488249726593494 ^2 ::== 2418087402260319922703709379876383.25 as intpart 2418087402260319914314517366265625  diafora 5480669045725324227829606774975623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2016136137070013.87849734115558634995821196689291809889255092 ^2 ::== 4064804923199597790064935467572.19970703125 as intpart 4064804923199594247724463820169  diafora 7894691643062444547896399677421079 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 50403403426750346.962433528889658752858426993270768434740603 ^2 ::== 2540503076999748618790584667232625.25 as intpart 2540503076999748521770733811119716  diafora 5358253370985895620373390330121532 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9231113885452642.16066707145450865971969545142883362132124603 ^2 ::== 85213463566196575893745293257617.421875 as intpart 85213463566196572927473224780164  diafora 7813542984419447569216650916461084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 23077784713631605.4016676786362716501666003665604876005090773 ^2 ::== 532584147288728599335908082860108.9375 as intpart 532584147288728580796707654876025  diafora 7366172300696915561347416486365223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 25 ^2 ::== 625 as intpart 625  diafora 7898756447985644142144124141240623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 18462227770905284.3213341429090173194393909028576672426424921 ^2 ::== 340853854264786303574981173030469.6875 as intpart 340853854264786291709892899120656  diafora 7557902593720857850434231242120592 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 36924455541810568.6426682858180346388787818057153344852849841 ^2 ::== 1363415417059145214299924692121878.75 as intpart 1363415417059145166839571596482624  diafora 6535341030926498975304552544758624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9231113885452642.16066707145450865971969545142883362132124603 ^2 ::== 85213463566196575893745293257617.421875 as intpart 85213463566196572927473224780164  diafora 7813542984419447569216650916461084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2307778471363160.54016676786362716492992386285720840533031151 ^2 ::== 5325841472887285993359080828601.0888671875 as intpart 5325841472887283500188605185600  diafora 7893430606512756858643935536055648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 57694461784079013.5041691965906791236817774404244119068607688 ^2 ::== 3328650920554553745849425517875680.5 as intpart 3328650920554553687673884627054169  diafora 4570105527431090454470239514187079 from 7898756447985644142144124141241248
the size of xpl vector is 55 64
 of 86799521406435649.9136716938597920084630388259938627015799284 ^2 ::== 7534156916386280624850726277325873 as intpart 7534156916386280466238194778051201  diafora 364599531599363675905929363190047 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

10 25 |35 15| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 21
section h 10746607412225366179787924001688.76171875
7898756447985644142144124141241248 / 35 ::== 225678755656732689775546404035464.21875
            ----->  | *2 451357511313465379551092808070928
            ----->  /2 112839377828366344887773202017732
                 --> 56419688914183172443886601008866
                 --> 28209844457091586221943300504433
            ----->  section 10746607412225366179787924001688.76171875
                 --> of section *2 21493214824450732359575848003377.5234375
                 --> of section /2 5373303706112683089893962000844.380859375

i insert 2037236030190850194740486781892369 45135751131346537.955109280807092800302804391776589909568429
i insert 127327251886928131529311532449956 11283937782836634.4887773202017732000757010979441474773921072
i insert 441 21
i insert 115489570872497177596076373833956 10746607412225366.1797879240016887637115816644950427871663123
i insert 461958283489988710384305495335824 21493214824450732.3595758480033775274231633289900855743326247
i insert 2887239271812429439901909345848900 53733037061126830.8989396200084438168231848464984068414196372
i insert 1273272518869280412578092697569 1128393778283663.44887773202017732009430628359325510245980695
i insert 795795324293300878477885991995396 28209844457091586.2219433005044329984545292688835615990683436
CDIS Start 
section_temp 31
section h 1039994265699228985140766838873.0968017578125
225678755656732689775546404035464.21875 / 7 ::== 32239822236676098539363772005066.31640625
            ----->  | *2 64479644473352197078727544010132
            ----->  /2 16119911118338049269681886002533
                 --> 8059955559169024634840943001266.5
                 --> 4029977779584512317420471500633.25
            ----->  section 1039994265699228985140766838873.0968017578125
                 --> of section *2 2079988531398457970281533677746.193603515625
                 --> of section /2 519997132849614492570383419436.54840087890625

i insert 4157624551409898522418038404726809 64479644473352197.0787275440101320098107429146239155670627952
i insert 259851534463118649591171841126401 16119911118338049.2696818860025330024526857286559788917656988
i insert 961 31
i insert 108158807268727831733343805459521 10399942656992289.8514076683887309704434898094405070878565311
i insert 432635229074911368533145849807241 20799885313984579.7028153367774619408869796188810141757130623
i insert 2703970181718196209331301416179601 51999713284961449.2570383419436548522174490472025354392826557
i insert 2598515344631183594327717110416 1611991111833804.92696818860025330020190048596617771181627177
i insert 1624072090394491600244601802885129 40299777795845123.1742047150063325069990760596283507766202092
CDIS End 
section_temp 87
section h 6052686933322332675972508920491.3681640625
7898756447985644142144124141241248 / 15 ::== 526583763199042942809608276082749.875
            ----->  | *2 1053167526398085885619216552165498
            ----->  /2 263291881599521471404804138041374.5
                 --> 131645940799760735702402069020687.25
                 --> 65822970399880367851201034510343.625
            ----->  section 6052686933322332675972508920491.3681640625
                 --> of section *2 12105373866644665351945017840982.736328125
                 --> of section /2 3026343466661166337986254460245.68408203125

i insert 110916183865946275040193390416164 10531675263980858.8561921655216549829209293775988953711930662
i insert 693226149162164324317961329909609 26329188159952147.1404804138041374564349617060088348807767034
i insert 7569 87
i insert 3663501911281090312130372990502276 60526869333223326.7597250892049136825057153998841386055573821
i insert 146540076451243607643065372962225 12105373866644665.3519450178409827371950324703675505588762462
i insert 915875477820272578032593247625569 30263434666611663.3798625446024568412528576999420693027786911
i insert 6932261491621639557093270905796 2632918815995214.71404804138041374573023234439972384279826656
i insert 4332663432263526961164287912054689 65822970399880367.8512010345103436376179573130684730131179094
section_temp 49
section h 71169585511426266091310754978.06122589111328125
526583763199042942809608276082749.875 / 151 ::== 3487309690059887038474226993925.49609375
            ----->  | *2 6974619380119774076948453987850
            ----->  /2 1743654845029943519237113496962.5
                 --> 871827422514971759618556748481.25
                 --> 435913711257485879809278374240.625
            ----->  section 71169585511426266091310754978.06122589111328125
                 --> of section *2 142339171022852532182621509956.1224517822265625
                 --> of section /2 35584792755713133045655377489.030612945556640625

i insert 4864531549754234052325458581107600 69746193801197740.7694845398784999970787090717294631758704782
i insert 304033221859639628270341161319225 17436548450299435.1923711349696249992696772679323657939676195
i insert 2401 49
i insert 5065109901868215480196045554702756 71169585511426266.0913107549780612162693138600388920167461038
i insert 202604396074728613514274981274009 14233917102285253.2182621509956122439477521623985012411139905
i insert 1266277475467053870049011388675689 35584792755713133.0456553774890306081346569300194460083730519
i insert 3040332218596394539048566583249 1743654845029943.51923711349696249992696772679323657939676195
i insert 1900207636622747633098261132496569 43591371125748587.9809278374240624973068314318425109377130866
removals 
reporing rt 3
section_temp 71
section h 3129456985446095813198199676641.38037109375
225678755656732689775546404035464.21875 - 3487309690059887038474226993925.49609375 ::== 222191445966672802737072177041538.71875
            ----->  | *2 444382891933345605474144354083076
            ----->  /2 111095722983336401368536088520769
                 --> 55547861491668200684268044260384.5
                 --> 27773930745834100342134022130192.25
            ----->  section 3129456985446095813198199676641.38037109375
                 --> of section *2 6258913970892191626396399353282.7607421875
                 --> of section /2 1564728492723047906599099838320.690185546875

i insert 1974761546430435139313932090393600 44438289193334560.5474144354083076008388175637264794204384089
i insert 123422596651902196207120755649600 11109572298333640.1368536088520769002097043909316198551096022
i insert 5041 71
i insert 979350102375736545977732746277764 31294569854460958.1319819967664138116170136072469176724553108
i insert 3917400409502946183910930985111056 62589139708921916.2639639935328276232340272144938353449106216
i insert 244837525593934136494433186569441 15647284927230479.0659909983832069058085068036234588362276554
i insert 1234225966519021962071207556496 1110957229833364.01368536088520769006433852599258216287125833
i insert 771391229074388726294504722810000 27773930745834100.34213402213019225225898445330585673218593
section_temp 82
section h 350640396909953798791335914770
32239822236676098539363772005066.31640625 - 3487309690059887038474226993925.49609375 ::== 28752512546616211500889545011140.8203125
            ----->  | *2 57505025093232423001779090022280
            ----->  /2 14376256273308105750444772505570
                 --> 7188128136654052875222386252785
                 --> 3594064068327026437611193126392.5
            ----->  section 350640396909953798791335914770
                 --> of section *2 701280793819907597582671829540
                 --> of section /2 175320198454976899395667957385

i insert 3306827910973290639543434698450929 57505025093232423.001779090022279987415299018493897165171802
i insert 206676744435830643407080258691025 14376256273308105.7504447725055699968538247546234742912929505
i insert 6724 82
i insert 1229486879451699313626175799353641 35064039690995379.879133591476999997488261939793119381647557
i insert 4917947517806797394760861961396081 70128079381990759.758267182953999994976523879586238763295114
i insert 307371719862924810874524104340721 17532019845497689.9395667957384999987441309698965596908237785
i insert 2066767444358304996445175256100 1437625627330810.57504447725055699968538247546234742912929505
i insert 1291729652723941629116173666629696 35940640683270264.3761119312639249930019236245470892754383385
section_temp 37
section h 14137741986729271777598217542941.189453125
526583763199042942809608276082749.875 - 3487309690059887038474226993925.49609375 ::== 523096453508983055771134049088824.375
            ----->  | *2 1046192907017966111542268098177648
            ----->  /2 261548226754491527885567024544412
                 --> 130774113377245763942783512272206
                 --> 65387056688622881971391756136103
            ----->  section 14137741986729271777598217542941.189453125
                 --> of section *2 28275483973458543555196435085882.37890625
                 --> of section /2 7068870993364635888799108771470.5947265625

i insert 109451959869470266177322818074921 10461929070179661.1154226809817764792809313689758710097521544
i insert 684074749184189137453444937519104 26154822675449152.7885567024544411982023284224396775243803859
i insert 1369 37
i insert 199875748483327714668276248191441 14137741986729271.777598217542941188076821568131435924442485
i insert 799502993933310915224072939682849 28275483973458543.5551964350858823761536431362628718488849699
i insert 4996893712083193290839165806664164 70688709933646358.8879910877147059386493843646803725278005004
i insert 6840747491841890328341542357225 2615482267544915.27885567024544411982023284224396775243803859
i insert 4275467182401182239858144236740161 65387056688622881.9713917561361029920363741041455796221271157
ending sqti reporting the results 
reporting size of xl vector 55 64
entering amfidromi loop of xl vector  with first 
 of 45135751131346537.955109280807092800302804391776589909568429 ^2 ::== 2037236030190850280959636385389002.25 as intpart 2037236030190850194740486781892369  diafora 5861520417794793947403637359348879 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11283937782836634.4887773202017732000757010979441474773921072 ^2 ::== 127327251886928142559977274086812.640625 as intpart 127327251886928131529311532449956  diafora 7771429196098716010614812608791292 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21 ^2 ::== 441 as intpart 441  diafora 7898756447985644142144124141240807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10746607412225366.1797879240016887637115816644950427871663123 ^2 ::== 115489570872497181460296847244274.546875 as intpart 115489570872497177596076373833956  diafora 7783266877113146964548047767407292 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21493214824450732.3595758480033775274231633289900855743326247 ^2 ::== 461958283489988725841187388977098.1875 as intpart 461958283489988710384305495335824  diafora 7436798164495655431759818645905424 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 53733037061126830.8989396200084438168231848464984068414196372 ^2 ::== 2887239271812429536507421181106863.5 as intpart 2887239271812429439901909345848900  diafora 5011517176173214702242214795392348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1128393778283663.44887773202017732009430628359325510245980695 ^2 ::== 1273272518869281425599772740868.126708984375 as intpart 1273272518869280412578092697569  diafora 7897483175466774861731546048543679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28209844457091586.2219433005044329984545292688835615990683436 ^2 ::== 795795324293300890999857963042578.875 as intpart 795795324293300878477885991995396  diafora 7102961123692343263666238149245852 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 64479644473352197.0787275440101320098107429146239155670627952 ^2 ::== 4157624551409898532570686500793809.5 as intpart 4157624551409898522418038404726809  diafora 3741131896575745619726085736514439 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16119911118338049.2696818860025330024526857286559788917656988 ^2 ::== 259851534463118658285667906299613.09375 as intpart 259851534463118649591171841126401  diafora 7638904913522525492552952300114847 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 31 ^2 ::== 961 as intpart 961  diafora 7898756447985644142144124141240287 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10399942656992289.8514076683887309704434898094405070878565311 ^2 ::== 108158807268727849442525663392138.671875 as intpart 108158807268727831733343805459521  diafora 7790597640716916310410780335781727 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20799885313984579.7028153367774619408869796188810141757130623 ^2 ::== 432635229074911397770102653568554.6875 as intpart 432635229074911368533145849807241  diafora 7466121218910732773610978291434007 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 51999713284961449.2570383419436548522174490472025354392826557 ^2 ::== 2703970181718196236063141584803467 as intpart 2703970181718196209331301416179601  diafora 5194786266267447932812822725061647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1611991111833804.92696818860025330020190048596617771181627177 ^2 ::== 2598515344631186582856679062996.130859375 as intpart 2598515344631183594327717110416  diafora 7896157932641012958549796424130832 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40299777795845123.1742047150063325069990760596283507766202092 ^2 ::== 1624072090394491614285424414372582 as intpart 1624072090394491600244601802885129  diafora 6274684357591152541899522338356119 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10531675263980858.8561921655216549829209293775988953711930662 ^2 ::== 110916183865946293074469092093401.15625 as intpart 110916183865946275040193390416164  diafora 7787840264119697867103930750825084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 26329188159952147.1404804138041374564349617060088348807767034 ^2 ::== 693226149162164331715431825583757.125 as intpart 693226149162164324317961329909609  diafora 7205530298823479817826162811331639 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 87 ^2 ::== 7569 as intpart 7569  diafora 7898756447985644142144124141233679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 60526869333223326.7597250892049136825057153998841386055573821 ^2 ::== 3663501911281090404097935397456768 as intpart 3663501911281090312130372990502276  diafora 4235254536704553830013751150738972 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 12105373866644665.3519450178409827371950324703675505588762462 ^2 ::== 146540076451243616163917415898270.734375 as intpart 146540076451243607643065372962225  diafora 7752216371534400534501058768279023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 30263434666611663.3798625446024568412528576999420693027786911 ^2 ::== 915875477820272601024483849364192 as intpart 915875477820272578032593247625569  diafora 6982880970165371564111530893615679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2632918815995214.71404804138041374573023234439972384279826656 ^2 ::== 6932261491621643317154318255837.572265625 as intpart 6932261491621639557093270905796  diafora 7891824186494022502587030870335452 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65822970399880367.8512010345103436376179573130684730131179094 ^2 ::== 4332663432263527073221448909898482 as intpart 4332663432263526961164287912054689  diafora 3566093015722117180979836229186559 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 69746193801197740.7694845398784999970787090717294631758704782 ^2 ::== 4864531549754234159662694271890264 as intpart 4864531549754234052325458581107600  diafora 3034224898231410089818665560133648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17436548450299435.1923711349696249992696772679323657939676195 ^2 ::== 304033221859639634978918391993141.5 as intpart 304033221859639628270341161319225  diafora 7594723226126004513873782979922023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 49 ^2 ::== 2401 as intpart 2401  diafora 7898756447985644142144124141238847 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 71169585511426266.0913107549780612162693138600388920167461038 ^2 ::== 5065109901868215493193142723750794.5 as intpart 5065109901868215480196045554702756  diafora 2833646546117428661948078586538492 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14233917102285253.2182621509956122439477521623985012411139905 ^2 ::== 202604396074728619727725708950031.8125 as intpart 202604396074728613514274981274009  diafora 7696152051910915528629849159967239 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35584792755713133.0456553774890306081346569300194460083730519 ^2 ::== 1266277475467053873298285680937698.625 as intpart 1266277475467053870049011388675689  diafora 6632478972518590272095112752565559 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1743654845029943.51923711349696249992696772679323657939676195 ^2 ::== 3040332218596396349789183919931.4150390625 as intpart 3040332218596394539048566583249  diafora 7895716115767047747605075574657999 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43591371125748587.9809278374240624973068314318425109377130866 ^2 ::== 1900207636622747718618239949957134.25 as intpart 1900207636622747633098261132496569  diafora 5998548811362896509045863008744679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 44438289193334560.5474144354083076008388175637264794204384089 ^2 ::== 1974761546430435187966254068954270.75 as intpart 1974761546430435139313932090393600  diafora 5923994901555209002830192050847648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11109572298333640.1368536088520769002097043909316198551096022 ^2 ::== 123422596651902199247890879309641.921875 as intpart 123422596651902196207120755649600  diafora 7775333851333741945937003385591648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 71 ^2 ::== 5041 as intpart 5041  diafora 7898756447985644142144124141236207 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 31294569854460958.1319819967664138116170136072469176724553108 ^2 ::== 979350102375736554238372380953318.625 as intpart 979350102375736545977732746277764  diafora 6919406345609907596166391394963484 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 62589139708921916.2639639935328276232340272144938353449106216 ^2 ::== 3917400409502946216953489523813274.5 as intpart 3917400409502946183910930985111056  diafora 3981356038482697958233193156130192 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15647284927230479.0659909983832069058085068036234588362276554 ^2 ::== 244837525593934138559593095238329.65625 as intpart 244837525593934136494433186569441  diafora 7653918922391710005649690954671807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1110957229833364.01368536088520769006433852599258216287125833 ^2 ::== 1234225966519021992478908793096.4193115234375 as intpart 1234225966519021962071207556496  diafora 7897522222019125120182052933684752 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 27773930745834100.34213402213019225225898445330585673218593 ^2 ::== 771391229074388745299317995685262.125 as intpart 771391229074388726294504722810000  diafora 7127365218911255415849619418431248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 57505025093232423.001779090022279987415299018493897165171802 ^2 ::== 3306827910973290639748047931199589 as intpart 3306827910973290639543434698450929  diafora 4591928537012353502600689442790319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14376256273308105.7504447725055699968538247546234742912929505 ^2 ::== 206676744435830664984252995699974.3125 as intpart 206676744435830643407080258691025  diafora 7692079703549813498737043882550223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 82 ^2 ::== 6724 as intpart 6724  diafora 7898756447985644142144124141234524 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35064039690995379.879133591476999997488261939793119381647557 ^2 ::== 1229486879451699375278126089827331.25 as intpart 1229486879451699313626175799353641  diafora 6669269568533944828517948341887607 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 70128079381990759.758267182953999994976523879586238763295114 ^2 ::== 4917947517806797501112504359309325 as intpart 4917947517806797394760861961396081  diafora 2980808930178846747383262179845167 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17532019845497689.9395667957384999987441309698965596908237785 ^2 ::== 307371719862924843819531522456832.8125 as intpart 307371719862924810874524104340721  diafora 7591384728122719331269600036900527 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1437625627330810.57504447725055699968538247546234742912929505 ^2 ::== 2066767444358306649842529956999.7431640625 as intpart 2066767444358304996445175256100  diafora 7896689680541285837147678965985148 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35940640683270264.3761119312639249930019236245470892754383385 ^2 ::== 1291729652723941656151581223124839.625 as intpart 1291729652723941629116173666629696  diafora 6607026795261702513027950474611552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10461929070179661.1154226809817764792809313689758710097521544 ^2 ::== 109451959869470268592410621117561.90625 as intpart 109451959869470266177322818074921  diafora 7789304488116173875966801323166327 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 26154822675449152.7885567024544411982023284224396775243803859 ^2 ::== 684074749184189178702566381984761.875 as intpart 684074749184189137453444937519104  diafora 7214681698801455004690679203722144 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37 ^2 ::== 1369 as intpart 1369  diafora 7898756447985644142144124141239879 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14137741986729271.777598217542941188076821568131435924442485 ^2 ::== 199875748483327736655242186116804.0625 as intpart 199875748483327714668276248191441  diafora 7698880699502316427475847893049807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28275483973458543.5551964350858823761536431362628718488849699 ^2 ::== 799502993933310946620968744467216.25 as intpart 799502993933310915224072939682849  diafora 7099253454052333226920051201558399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 70688709933646358.8879910877147059386493843646803725278005004 ^2 ::== 4996893712083193416381054652920101 as intpart 4996893712083193290839165806664164  diafora 2901862735902450851304958334577084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2615482267544915.27885567024544411982023284224396775243803859 ^2 ::== 6840747491841891787025663819847.619140625 as intpart 6840747491841890328341542357225  diafora 7891915700493802251815782598884023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65387056688622881.9713917561361029920363741041455796221271157 ^2 ::== 4275467182401182366891039887404761 as intpart 4275467182401182239858144236740161  diafora 3623289265584461902285979904501087 from 7898756447985644142144124141241248
the size of xpl vector is 55 64
 of 71169585511426266.0913107549780612162693138600388920167461038 ^2 ::== 5065109901868215493193142723750794.5 as intpart 5065109901868215480196045554702756  diafora 2833646546117428661948078586538492 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

10 |25| 35 |15| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 90
section h 3510558421326952952064055173884.98876953125
7898756447985644142144124141241248 / 25 ::== 315950257919425765685764965649649.90625
            ----->  | *2 631900515838851531371529931299298
            ----->  /2 157975128959712882842882482824824.5
                 --> 78987564479856441421441241412412.25
                 --> 39493782239928220710720620706206.125
            ----->  section 3510558421326952952064055173884.98876953125
                 --> of section *2 7021116842653905904128110347769.9775390625
                 --> of section /2 1755279210663476476032027586942.494384765625

i insert 3992982619174066533347477893833409 63190051583885153.1371529931299298107894024667530175065621734
i insert 249561413698379150435460920378944 15797512895971288.2842882482824824526973506166882543766405433
i insert 8100 90
i insert 1232402042954958775383763999881841 35105584213269529.5206405517388498875586133607384908827953041
i insert 4929608171819835241957392852605481 70211168426539059.0412811034776997751172267214769817655906081
i insert 308100510738739676293148893335696 17552792106634764.760320275869424943779306680369245441397652
i insert 2495614136983788976752545848384 1579751289597128.82842882482824824522636697476940526030375622
i insert 1559758835614869690221630752368400 39493782239928220.7107206207062061326107382797090394888073206
CDIS Start 
section_temp 84
section h 537330370611268308989396200084.4285888671875
315950257919425765685764965649649.90625 / 7 ::== 45135751131346537955109280807092.84375
            ----->  | *2 90271502262693075910218561614184
            ----->  /2 22567875565673268977554640403546
                 --> 11283937782836634488777320201773
                 --> 5641968891418317244388660100886.5
            ----->  section 537330370611268308989396200084.4285888671875
                 --> of section *2 1074660741222536617978792400168.857177734375
                 --> of section /2 268665185305634154494698100042.21429443359375

i insert 81489441207634000567899290260249 9027150226269307.59102185616141840289461395485659522819332778
i insert 509309007547712526117246129799824 22567875565673268.9775546404035460081038966251298916176892817
i insert 7056 84
i insert 2887239271812429439901909345848900 53733037061126830.8989396200084428661947200112081191036850214
i insert 115489570872497177596076373833956 10746607412225366.1797879240016885728919993070462624018546194
i insert 721809817953107359975477336462225 26866518530563415.4494698100042214330973600056040595518425107
i insert 5093090075477121650312370790276 2256787556567326.89775546404035460072365348871414880704833195
i insert 3183181297173203513911543967981584 56419688914183172.4438866010088650185250180868479219498112798
CDIS End 
section_temp 87
section h 6052686933322332675972508920491.3681640625
7898756447985644142144124141241248 / 15 ::== 526583763199042942809608276082749.875
            ----->  | *2 1053167526398085885619216552165498
            ----->  /2 263291881599521471404804138041374.5
                 --> 131645940799760735702402069020687.25
                 --> 65822970399880367851201034510343.625
            ----->  section 6052686933322332675972508920491.3681640625
                 --> of section *2 12105373866644665351945017840982.736328125
                 --> of section /2 3026343466661166337986254460245.68408203125

i insert 110916183865946275040193390416164 10531675263980858.8561921655216549829209293775988953711930662
i insert 693226149162164324317961329909609 26329188159952147.1404804138041374564349617060088348807767034
i insert 7569 87
i insert 3663501911281090312130372990502276 60526869333223326.7597250892049136825057153998841386055573821
i insert 146540076451243607643065372962225 12105373866644665.3519450178409827371950324703675505588762462
i insert 915875477820272578032593247625569 30263434666611663.3798625446024568412528576999420693027786911
i insert 6932261491621639557093270905796 2632918815995214.71404804138041374573023234439972384279826656
i insert 4332663432263526961164287912054689 65822970399880367.8512010345103436376179573130684730131179094
section_temp 49
section h 71169585511426266091310754978.06122589111328125
526583763199042942809608276082749.875 / 151 ::== 3487309690059887038474226993925.49609375
            ----->  | *2 6974619380119774076948453987850
            ----->  /2 1743654845029943519237113496962.5
                 --> 871827422514971759618556748481.25
                 --> 435913711257485879809278374240.625
            ----->  section 71169585511426266091310754978.06122589111328125
                 --> of section *2 142339171022852532182621509956.1224517822265625
                 --> of section /2 35584792755713133045655377489.030612945556640625

i insert 4864531549754234052325458581107600 69746193801197740.7694845398784999970787090717294631758704782
i insert 304033221859639628270341161319225 17436548450299435.1923711349696249992696772679323657939676195
i insert 2401 49
i insert 5065109901868215480196045554702756 71169585511426266.0913107549780612162693138600388920167461038
i insert 202604396074728613514274981274009 14233917102285253.2182621509956122439477521623985012411139905
i insert 1266277475467053870049011388675689 35584792755713133.0456553774890306081346569300194460083730519
i insert 3040332218596394539048566583249 1743654845029943.51923711349696249992696772679323657939676195
i insert 1900207636622747633098261132496569 43591371125748587.9809278374240624973068314318425109377130866
removals 
reporing rt 3
section_temp 40
section h 7811573705734146966182268466393.099609375
315950257919425765685764965649649.90625 - 3487309690059887038474226993925.49609375 ::== 312462948229365878647290738655724.40625
            ----->  | *2 624925896458731757294581477311448
            ----->  /2 156231474114682939323645369327862
                 --> 78115737057341469661822684663931
                 --> 39057868528670734830911342331965.5
            ----->  section 7811573705734146966182268466393.099609375
                 --> of section *2 15623147411468293932364536932786.19921875
                 --> of section /2 3905786852867073483091134233196.5498046875

i insert 3905323760647495159952308184580625 62492589645873175.7294581477311447778588693324763880809769034
i insert 244082735040468424062298144333849 15623147411468293.9323645369327861944647173331190970202442259
i insert 1600 40
i insert 6102068376011711226483350067077961 78115737057341469.6618226846639309740583101415722921956330538
i insert 244082735040468424062298144333849 15623147411468293.9323645369327861944647173331190970202442259
i insert 1525517094002927767562968988098756 39057868528670734.8309113423319654870291550707861460978165269
i insert 2440827350404683303234136755241 1562314741146829.39323645369327861953320790711075005674501881
i insert 1525517094002927767562968988098756 39057868528670734.8309113423319654870291550707861460978165269
section_temp 34
section h 1224954160037842674018678053328.441162109375
45135751131346537955109280807092.84375 - 3487309690059887038474226993925.49609375 ::== 41648441441286650916635053813167.34375
            ----->  | *2 83296882882573301833270107626334
            ----->  /2 20824220720643325458317526906583.5
                 --> 10412110360321662729158763453291.75
                 --> 5206055180160831364579381726645.875
            ----->  section 1224954160037842674018678053328.441162109375
                 --> of section *2 2449908320075685348037356106656.88232421875
                 --> of section /2 612477080018921337009339026664.2205810546875

i insert 6938370697953132998430595638036601 83296882882573301.8332701076263340500549503531146910972893238
i insert 433648168622070801989801867055625 20824220720643325.458317526906583512513737588278672774322331
i insert 1156 34
i insert 150051269419401650059186406237476 12249541600378426.7401867805332844121868340891978732543066144
i insert 600205077677606649234912026463609 24499083200756853.4803735610665688243736681783957465086132288
i insert 3751281735485041618965908167289689 61247708001892133.700933902666422060934170445989366271533072
i insert 4336481686220705937475946606224 2082422072064332.54583175269065835116463758502902692271163687
i insert 2710301053887942564496813470705969 52060551801608313.6457938172664587778148970187430677469819784
section_temp 37
section h 14137741986729271777598217542941.189453125
526583763199042942809608276082749.875 - 3487309690059887038474226993925.49609375 ::== 523096453508983055771134049088824.375
            ----->  | *2 1046192907017966111542268098177648
            ----->  /2 261548226754491527885567024544412
                 --> 130774113377245763942783512272206
                 --> 65387056688622881971391756136103
            ----->  section 14137741986729271777598217542941.189453125
                 --> of section *2 28275483973458543555196435085882.37890625
                 --> of section /2 7068870993364635888799108771470.5947265625

i insert 109451959869470266177322818074921 10461929070179661.1154226809817764792809313689758710097521544
i insert 684074749184189137453444937519104 26154822675449152.7885567024544411982023284224396775243803859
i insert 1369 37
i insert 199875748483327714668276248191441 14137741986729271.777598217542941188076821568131435924442485
i insert 799502993933310915224072939682849 28275483973458543.5551964350858823761536431362628718488849699
i insert 4996893712083193290839165806664164 70688709933646358.8879910877147059386493843646803725278005004
i insert 6840747491841890328341542357225 2615482267544915.27885567024544411982023284224396775243803859
i insert 4275467182401182239858144236740161 65387056688622881.9713917561361029920363741041455796221271157
ending sqti reporting the results 
reporting size of xl vector 55 64
entering amfidromi loop of xl vector  with first 
 of 63190051583885153.1371529931299298107894024667530175065621734 ^2 ::== 3992982619174066550680887315362430.5 as intpart 3992982619174066533347477893833409  diafora 3905773828811577608796646247407839 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15797512895971288.2842882482824824526973506166882543766405433 ^2 ::== 249561413698379159417555457210151.90625 as intpart 249561413698379150435460920378944  diafora 7649195034287264991708663220862304 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 90 ^2 ::== 8100 as intpart 8100  diafora 7898756447985644142144124141233148 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35105584213269529.5206405517388498875586133607384908827953041 ^2 ::== 1232402042954958811938545467704453.375 as intpart 1232402042954958775383763999881841  diafora 6666354405030685366760360141359407 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 70211168426539059.0412811034776997751172267214769817655906081 ^2 ::== 4929608171819835247754181870817813.5 as intpart 4929608171819835241957392852605481  diafora 2969148276165808900186731288635767 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17552792106634764.760320275869424943779306680369245441397652 ^2 ::== 308100510738739702984636366926113.34375 as intpart 308100510738739676293148893335696  diafora 7590655937246904465850975247905552 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1579751289597128.82842882482824824522636697476940526030375622 ^2 ::== 2495614136983791594175554572101.51904296875 as intpart 2495614136983788976752545848384  diafora 7896260833848660353167371595392864 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39493782239928220.7107206207062061326107382797090394888073206 ^2 ::== 1559758835614869746359721607563449.5 as intpart 1559758835614869690221630752368400  diafora 6338997612370774451922493388872848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9027150226269307.59102185616141840289461395485659522819332778 ^2 ::== 81489441207634011238385455415557.25 as intpart 81489441207634000567899290260249  diafora 7817267006778010141576224850980999 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 22567875565673268.9775546404035460081038966251298916176892817 ^2 ::== 509309007547712570239909096347232.875 as intpart 509309007547712526117246129799824  diafora 7389447440437931616026878011441424 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 84 ^2 ::== 7056 as intpart 7056  diafora 7898756447985644142144124141234192 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 53733037061126830.8989396200084428661947200112081191036850214 ^2 ::== 2887239271812429536507421181106761 as intpart 2887239271812429439901909345848900  diafora 5011517176173214702242214795392348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10746607412225366.1797879240016885728919993070462624018546194 ^2 ::== 115489570872497181460296847244270.4375 as intpart 115489570872497177596076373833956  diafora 7783266877113146964548047767407292 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 26866518530563415.4494698100042214330973600056040595518425107 ^2 ::== 721809817953107384126855295276690.25 as intpart 721809817953107359975477336462225  diafora 7176946630032536782168646804779023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2256787556567326.89775546404035460072365348871414880704833195 ^2 ::== 5093090075477125702399090963472.328125 as intpart 5093090075477121650312370790276  diafora 7893663357910167020493811770450972 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56419688914183172.4438866010088650185250180868479219498112798 ^2 ::== 3183181297173203563999431852170205 as intpart 3183181297173203513911543967981584  diafora 4715575150812440628232580173259664 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10531675263980858.8561921655216549829209293775988953711930662 ^2 ::== 110916183865946293074469092093401.15625 as intpart 110916183865946275040193390416164  diafora 7787840264119697867103930750825084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 26329188159952147.1404804138041374564349617060088348807767034 ^2 ::== 693226149162164331715431825583757.125 as intpart 693226149162164324317961329909609  diafora 7205530298823479817826162811331639 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 87 ^2 ::== 7569 as intpart 7569  diafora 7898756447985644142144124141233679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 60526869333223326.7597250892049136825057153998841386055573821 ^2 ::== 3663501911281090404097935397456768 as intpart 3663501911281090312130372990502276  diafora 4235254536704553830013751150738972 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 12105373866644665.3519450178409827371950324703675505588762462 ^2 ::== 146540076451243616163917415898270.734375 as intpart 146540076451243607643065372962225  diafora 7752216371534400534501058768279023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 30263434666611663.3798625446024568412528576999420693027786911 ^2 ::== 915875477820272601024483849364192 as intpart 915875477820272578032593247625569  diafora 6982880970165371564111530893615679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2632918815995214.71404804138041374573023234439972384279826656 ^2 ::== 6932261491621643317154318255837.572265625 as intpart 6932261491621639557093270905796  diafora 7891824186494022502587030870335452 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65822970399880367.8512010345103436376179573130684730131179094 ^2 ::== 4332663432263527073221448909898482 as intpart 4332663432263526961164287912054689  diafora 3566093015722117180979836229186559 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 69746193801197740.7694845398784999970787090717294631758704782 ^2 ::== 4864531549754234159662694271890264 as intpart 4864531549754234052325458581107600  diafora 3034224898231410089818665560133648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17436548450299435.1923711349696249992696772679323657939676195 ^2 ::== 304033221859639634978918391993141.5 as intpart 304033221859639628270341161319225  diafora 7594723226126004513873782979922023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 49 ^2 ::== 2401 as intpart 2401  diafora 7898756447985644142144124141238847 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 71169585511426266.0913107549780612162693138600388920167461038 ^2 ::== 5065109901868215493193142723750794.5 as intpart 5065109901868215480196045554702756  diafora 2833646546117428661948078586538492 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14233917102285253.2182621509956122439477521623985012411139905 ^2 ::== 202604396074728619727725708950031.8125 as intpart 202604396074728613514274981274009  diafora 7696152051910915528629849159967239 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35584792755713133.0456553774890306081346569300194460083730519 ^2 ::== 1266277475467053873298285680937698.625 as intpart 1266277475467053870049011388675689  diafora 6632478972518590272095112752565559 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1743654845029943.51923711349696249992696772679323657939676195 ^2 ::== 3040332218596396349789183919931.4150390625 as intpart 3040332218596394539048566583249  diafora 7895716115767047747605075574657999 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43591371125748587.9809278374240624973068314318425109377130866 ^2 ::== 1900207636622747718618239949957134.25 as intpart 1900207636622747633098261132496569  diafora 5998548811362896509045863008744679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 62492589645873175.7294581477311447778588693324763880809769034 ^2 ::== 3905323760647495251123765564582951.5 as intpart 3905323760647495159952308184580625  diafora 3993432687338148982191815956660623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15623147411468293.9323645369327861944647173331190970202442259 ^2 ::== 244082735040468453195235347786434.46875 as intpart 244082735040468424062298144333849  diafora 7654673712945175718081825996907399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40 ^2 ::== 1600 as intpart 1600  diafora 7898756447985644142144124141239648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 78115737057341469.6618226846639309740583101415722921956330538 ^2 ::== 6102068376011711329880883694660862 as intpart 6102068376011711226483350067077961  diafora 1796688071973932915660774074163287 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15623147411468293.9323645369327861944647173331190970202442259 ^2 ::== 244082735040468453195235347786434.46875 as intpart 244082735040468424062298144333849  diafora 7654673712945175718081825996907399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39057868528670734.8309113423319654870291550707861460978165269 ^2 ::== 1525517094002927832470220923665215.5 as intpart 1525517094002927767562968988098756  diafora 6373239353982716374581155153142492 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1562314741146829.39323645369327861953320790711075005674501881 ^2 ::== 2440827350404684531952353477864.344970703125 as intpart 2440827350404683303234136755241  diafora 7896315620635239458840890004486007 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39057868528670734.8309113423319654870291550707861460978165269 ^2 ::== 1525517094002927832470220923665215.5 as intpart 1525517094002927767562968988098756  diafora 6373239353982716374581155153142492 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 83296882882573301.8332701076263340500549503531146910972893238 ^2 ::== 6938370697953133137248200767036596 as intpart 6938370697953132998430595638036601  diafora 960385750032511143713528503204647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20824220720643325.458317526906583512513737588278672774322331 ^2 ::== 433648168622070821078012547939787.25 as intpart 433648168622070801989801867055625  diafora 7465108279363573340154322274185623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 34 ^2 ::== 1156 as intpart 1156  diafora 7898756447985644142144124141240092 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 12249541600378426.7401867805332844121868340891978732543066144 ^2 ::== 150051269419401668193083926622763.578125 as intpart 150051269419401650059186406237476  diafora 7748705178566242492084937735003772 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24499083200756853.4803735610665688243736681783957465086132288 ^2 ::== 600205077677606672772335706491054.3125 as intpart 600205077677606649234912026463609  diafora 7298551370308037492909212114777639 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61247708001892133.700933902666422060934170445989366271533072 ^2 ::== 3751281735485041704827098165569089.5 as intpart 3751281735485041618965908167289689  diafora 4147474712500602523178215973951559 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2082422072064332.54583175269065835116463758502902692271163687 ^2 ::== 4336481686220708210780125479397.8720703125 as intpart 4336481686220705937475946606224  diafora 7894419966299423436206648194635024 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 52060551801608313.6457938172664587778148970187430677469819784 ^2 ::== 2710301053887942631737578424623670 as intpart 2710301053887942564496813470705969  diafora 5188455394097701577647310670535279 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10461929070179661.1154226809817764792809313689758710097521544 ^2 ::== 109451959869470268592410621117561.90625 as intpart 109451959869470266177322818074921  diafora 7789304488116173875966801323166327 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 26154822675449152.7885567024544411982023284224396775243803859 ^2 ::== 684074749184189178702566381984761.875 as intpart 684074749184189137453444937519104  diafora 7214681698801455004690679203722144 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37 ^2 ::== 1369 as intpart 1369  diafora 7898756447985644142144124141239879 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14137741986729271.777598217542941188076821568131435924442485 ^2 ::== 199875748483327736655242186116804.0625 as intpart 199875748483327714668276248191441  diafora 7698880699502316427475847893049807 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28275483973458543.5551964350858823761536431362628718488849699 ^2 ::== 799502993933310946620968744467216.25 as intpart 799502993933310915224072939682849  diafora 7099253454052333226920051201558399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 70688709933646358.8879910877147059386493843646803725278005004 ^2 ::== 4996893712083193416381054652920101 as intpart 4996893712083193290839165806664164  diafora 2901862735902450851304958334577084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2615482267544915.27885567024544411982023284224396775243803859 ^2 ::== 6840747491841891787025663819847.619140625 as intpart 6840747491841890328341542357225  diafora 7891915700493802251815782598884023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65387056688622881.9713917561361029920363741041455796221271157 ^2 ::== 4275467182401182366891039887404761 as intpart 4275467182401182239858144236740161  diafora 3623289265584461902285979904501087 from 7898756447985644142144124141241248
the size of xpl vector is 55 64
 of 83296882882573301.8332701076263340500549503531146910972893238 ^2 ::== 6938370697953133137248200767036596 as intpart 6938370697953132998430595638036601  diafora 960385750032511143713528503204647 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

10 26 |36 16| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 43
section h 5102555844951966500093103450414.232421875
7898756447985644142144124141241248 / 36 ::== 219409901332934559504003448367812.4375
            ----->  | *2 438819802665869119008006896735624
            ----->  /2 109704950666467279752001724183906
                 --> 54852475333233639876000862091953
                 --> 27426237666616819938000431045976.5
            ----->  section 5102555844951966500093103450414.232421875
                 --> of section *2 10205111689903933000186206900828.46484375
                 --> of section /2 2551277922475983250046551725207.1162109375

i insert 1925628192117123064596141116521921 43881980266586911.9008006896735623950100979584476590389385819
i insert 120351762007320175081516219812529 10970495066646727.9752001724183905987525244896119147597346455
i insert 1849 43
i insert 2603607615085347679264069221712225 51025558449519665.0009310345041423154222037794625066453590989
i insert 104144304603413907170562768868489 10205111689903933.0001862069008284634313854510878627479542047
i insert 650901903771336894303238080668224 25512779224759832.5004655172520711577111018897312533226795495
i insert 1203517620073200214945852867584 1097049506664672.79752001724183905985356840551148138729331549
i insert 752198512545751176538189373678761 27426237666616819.9380004310459764960139494860413833521306515
CDIS Start 
section_temp 91
section h 344442545263633531403459102618.21978759765625
219409901332934559504003448367812.4375 / 7 ::== 31344271618990651357714778338258.91796875
            ----->  | *2 62688543237981302715429556676516
            ----->  /2 15672135809495325678857389169129
                 --> 7836067904747662839428694584564.5
                 --> 3918033952373831419714347292282.25
            ----->  section 344442545263633531403459102618.21978759765625
                 --> of section *2 688885090527267062806918205236.4395751953125
                 --> of section /2 172221272631816765701729551309.109893798828125

i insert 3929853453300251223881072101615204 62688543237981302.7154295566765159902766768595938629005104303
i insert 245615840831265685820431196855625 15672135809495325.6788573891691289975691692148984657251276076
i insert 8281 91
i insert 1186406669876902331105703381402609 34444254526363353.1403459102618219815628020086251126485876739
i insert 4745626679507609324422813525610436 68888509052726706.2806918205236439631256040172502252971753478
i insert 296601667469225565554298582168976 17222127263181676.570172955130910990781401004312556324293837
i insert 2456158408312655290990731019024 1567213580949532.56788573891691289971354883459042639515246265
i insert 1535099005195410653918713551562596 39180339523738314.1971434729228224921881995612693572184070945
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241248 / 16 ::== 493672277999102758884007758827578
            ----->  | *2 987344555998205517768015517655156
            ----->  /2 246836138999551379442003879413789
                 --> 123418069499775689721001939706894.5
                 --> 61709034749887844860500969853447.25
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929355638851922023025 9873445559982055.17768015517655156090826018555617338279262185
i insert 609280795162058448059210612688769 24683613899955137.9442003879413789005359269879136263625696301
i insert 0 0
i insert 6092807951620581024886160133169 2468361389995513.79442003879413789022706504638904334569815546
i insert 3808004969762865485497170578968336 61709034749887844.8605009698534472478703705178304517176002264
section_temp 15
section h 217956855628742939904639187120.333343505859375
493672277999102758884007758827578 / 151 ::== 3269352834431144098569587806805.15234375
            ----->  | *2 6538705668862288197139175613610
            ----->  /2 1634676417215572049284793903402.5
                 --> 817338208607786024642396951701.25
                 --> 408669104303893012321198475850.625
            ----->  section 217956855628742939904639187120.333343505859375
                 --> of section *2 435913711257485879809278374240.66668701171875
                 --> of section /2 108978427814371469952319593560.1666717529296875

i insert 4275467182401182239858144236740161 65387056688622881.9713917561360999944342076162229204783216119
i insert 267216698900073881817751928718400 16346764172155720.492847939034024998608551904055730119580403
i insert 225 15
i insert 475051909155686886478879720249849 21795685562874293.9904639187120333372604807919969971408136189
i insert 1900207636622747633098261132496569 43591371125748587.9809278374240666745209615839939942816272378
i insert 118762977288921710721877148625316 10897842781437146.9952319593560166686302403959984985704068094
i insert 2672166989000738818177519287184 1634676417215572.0492847939034024998608551904055730119580403
i insert 1670104368125461843094770415268601 40866910430389301.2321198475850624956540180221509217517450452
removals 
reporing rt 3
section_temp 28
section h 7719305303517979121622637877178.8212890625
219409901332934559504003448367812.4375 - 3269352834431144098569587806805.15234375 ::== 216140548498503415405433860561007.28125
            ----->  | *2 432281096997006830810867721122014
            ----->  /2 108070274249251707702716930280503.5
                 --> 54035137124625853851358465140251.75
                 --> 27017568562312926925679232570125.875
            ----->  section 7719305303517979121622637877178.8212890625
                 --> of section *2 15438610607035958243245275754357.642578125
                 --> of section /2 3859652651758989560811318938589.41064453125

i insert 1868669468209356273777939790666489 43228109699700683.0810867721122013954127005774807912530377507
i insert 116791841763084750900580099528900 10807027424925170.7702716930280503488531751443701978132594377
i insert 784 28
i insert 5958767436892079943621463694803681 77193053035179791.2162263787717882135286373568305862136185169
i insert 238350697475683191569414304977764 15438610607035958.2432452757543576427057274713661172427237034
i insert 1489691859223019947308839406111025 38596526517589895.6081131893858941067643186784152931068092585
i insert 1167918417630847509005800995289 1080702742492517.07702716930280503488531751443701978132594377
i insert 729949011019279747163762746681476 27017568562312926.925679232570125871265576122937090985942632
section_temp 76
section h 369406826112625095515068296466.48681640625
31344271618990651357714778338258.91796875 - 3269352834431144098569587806805.15234375 ::== 28074918784559507259145190531453.765625
            ----->  | *2 56149837569119014518290381062906
            ----->  /2 14037459392279753629572595265726.5
                 --> 7018729696139876814786297632863.25
                 --> 3509364848069938407393148816431.625
            ----->  section 369406826112625095515068296466.48681640625
                 --> of section *2 738813652225250191030136592932.9736328125
                 --> of section /2 184703413056312547757534148233.243408203125

i insert 3152804259038449063297888096332196 56149837569119014.5182903810629059804249152421107282862067223
i insert 197050266189903052418658613741009 14037459392279753.6295725952657264951062288105276820715516806
i insert 5776 76
i insert 1364614031786032300624130908975081 36940682611262509.5515068296466486830187392342850216664373875
i insert 5458456127144129350259254080950361 73881365222525019.1030136592932973660374784685700433328747749
i insert 341153507946508056685691421612516 18470341305631254.7757534148233243415093696171425108332186937
i insert 1970502661899029681939022600625 1403745939227975.36295725952657264959735905485160856187576428
i insert 1231564163686894182897561777979456 35093648480699384.0739314881643162377655720263192051788792014
section_temp 87
section h 5636815231777834652706185873801.9765625
493672277999102758884007758827578 - 3269352834431144098569587806805.15234375 ::== 490402925164671614785438171020772.875
            ----->  | *2 980805850329343229570876342041544
            ----->  /2 245201462582335807392719085510386
                 --> 122600731291167903696359542755193
                 --> 61300365645583951848179771377596.5
            ----->  section 5636815231777834652706185873801.9765625
                 --> of section *2 11273630463555669305412371747603.953125
                 --> of section /2 2818407615888917326353092936900.98828125

i insert 96198011604026597454390694338624 9808058503293432.29570876342041544151961751651924714678898454
i insert 601237572525166234089941839616400 24520146258233580.7392719085510386020643203153213107725605369
i insert 7569 87
i insert 3177368595720260320256261186495716 56368152317778346.5270618587380197644920443167393386829644442
i insert 127094743828810408300798262037561 11273630463555669.3054123717476039528984088633478677365928888
i insert 794342148930065080064065296623929 28184076158889173.2635309293690098822460221583696693414822221
i insert 6012375725251662340899418396164 2452014625823358.07392719085510386037990437912981178669724613
i insert 3757734828282289085662867788770401 61300365645583951.8481797713775965016913538363496627425774932
ending sqti reporting the results 
reporting size of xl vector 52 64
entering amfidromi loop of xl vector  with first 
 of 43881980266586911.9008006896735623950100979584476590389385819 ^2 ::== 1925628192117123143653977293288211.5 as intpart 1925628192117123064596141116521921  diafora 5973128255868521077547983024719327 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10970495066646727.9752001724183905987525244896119147597346455 ^2 ::== 120351762007320196478373580830513.21875 as intpart 120351762007320175081516219812529  diafora 7778404685978323967062607921428719 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43 ^2 ::== 1849 as intpart 1849  diafora 7898756447985644142144124141239399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 51025558449519665.0009310345041423154222037794625066453590989 ^2 ::== 2603607615085347679359082332731491.5 as intpart 2603607615085347679264069221712225  diafora 5295148832900296462880054919529023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10205111689903933.0001862069008284634313854510878627479542047 ^2 ::== 104144304603413907174363293309259.671875 as intpart 104144304603413907170562768868489  diafora 7794612143382230234973561372372759 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 25512779224759832.5004655172520711577111018897312533226795495 ^2 ::== 650901903771336919839770583182872.875 as intpart 650901903771336894303238080668224  diafora 7247854544214307247840886060573024 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1097049506664672.79752001724183905985356840551148138729331549 ^2 ::== 1203517620073201964783735808305.132080078125 as intpart 1203517620073200214945852867584  diafora 7897552930365570941929178288373664 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 27426237666616819.9380004310459764960139494860413833521306515 ^2 ::== 752198512545751227989834880190707.5 as intpart 752198512545751176538189373678761  diafora 7146557935439892965605934767562487 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 62688543237981302.7154295566765159902766768595938629005104303 ^2 ::== 3929853453300251313579545496506339 as intpart 3929853453300251223881072101615204  diafora 3968902994685392918263052039626044 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15672135809495325.6788573891691289975691692148984657251276076 ^2 ::== 245615840831265707098721593531646.1875 as intpart 245615840831265685820431196855625  diafora 7653140607154378456323692944385623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 91 ^2 ::== 8281 as intpart 8281  diafora 7898756447985644142144124141232967 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 34444254526363353.1403459102618219815628020086251126485876739 ^2 ::== 1186406669876902340773923890987302.5 as intpart 1186406669876902331105703381402609  diafora 6712349778108741811038420759838639 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 68888509052726706.2806918205236439631256040172502252971753478 ^2 ::== 4745626679507609363095695563949210 as intpart 4745626679507609324422813525610436  diafora 3153129768478034817721310615630812 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 17222127263181676.570172955130910990781401004312556324293837 ^2 ::== 296601667469225585193480972746825.625 as intpart 296601667469225565554298582168976  diafora 7602154780516418576589825559072272 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1567213580949532.56788573891691289971354883459042639515246265 ^2 ::== 2456158408312657070987215935316.461669921875 as intpart 2456158408312655290990731019024  diafora 7896300289577331486853133410222224 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 39180339523738314.1971434729228224921881995612693572184070945 ^2 ::== 1535099005195410669367009959572788.5 as intpart 1535099005195410653918713551562596  diafora 6363657442790233488225410589678652 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9873445559982055.17768015517655156090826018555617338279262185 ^2 ::== 97484927225929359147482600472716.140625 as intpart 97484927225929355638851922023025  diafora 7801271520759714786505272219218223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24683613899955137.9442003879413789005359269879136263625696301 ^2 ::== 609280795162058494671766252954475.8125 as intpart 609280795162058448059210612688769  diafora 7289475652823585694084913528552479 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2468361389995513.79442003879413789022706504638904334569815546 ^2 ::== 6092807951620584946717662529544.7587890625 as intpart 6092807951620581024886160133169  diafora 7892663640034023561119237981108079 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61709034749887844.8605009698534472478703705178304517176002264 ^2 ::== 3808004969762865591698539080965473.5 as intpart 3808004969762865485497170578968336  diafora 4090751478222778656646953562272912 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65387056688622881.9713917561360999944342076162229204783216119 ^2 ::== 4275467182401182366891039887404369 as intpart 4275467182401182239858144236740161  diafora 3623289265584461902285979904501087 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16346764172155720.492847939034024998608551904055730119580403 ^2 ::== 267216698900073897930689992962773.0625 as intpart 267216698900073881817751928718400  diafora 7631539749085570260326372212522848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15 ^2 ::== 225 as intpart 225  diafora 7898756447985644142144124141241023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21795685562874293.9904639187120333372604807919969971408136189 ^2 ::== 475051909155686929654559987489374.625 as intpart 475051909155686886478879720249849  diafora 7423704538829957255665244420991399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43591371125748587.9809278374240666745209615839939942816272378 ^2 ::== 1900207636622747718618239949957498.5 as intpart 1900207636622747633098261132496569  diafora 5998548811362896509045863008744679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10897842781437146.9952319593560166686302403959984985704068094 ^2 ::== 118762977288921732413639996872343.65625 as intpart 118762977288921710721877148625316  diafora 7779993470696722431422246992615932 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1634676417215572.0492847939034024998608551904055730119580403 ^2 ::== 2672166989000738979306899929627.73095703125 as intpart 2672166989000738818177519287184  diafora 7896084280996643403325946621954064 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40866910430389301.2321198475850624956540180221509217517450452 ^2 ::== 1670104368125461862066812456017331.75 as intpart 1670104368125461843094770415268601  diafora 6228652079860182299049353725972647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43228109699700683.0810867721122013954127005774807912530377507 ^2 ::== 1868669468209356280788395550788233 as intpart 1868669468209356273777939790666489  diafora 6030086979776287868366184350574759 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10807027424925170.7702716930280503488531751443701978132594377 ^2 ::== 116791841763084767549274721924264.5625 as intpart 116791841763084750900580099528900  diafora 7781964606222559391243544041712348 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28 ^2 ::== 784 as intpart 784  diafora 7898756447985644142144124141240464 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 77193053035179791.2162263787717882135286373568305862136185169 ^2 ::== 5958767436892079977003812343074724 as intpart 5958767436892079943621463694803681  diafora 1939989011093564198522660446437567 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15438610607035958.2432452757543576427057274713661172427237034 ^2 ::== 238350697475683199080152493722988.9375 as intpart 238350697475683191569414304977764  diafora 7660405750509960950574709836263484 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 38596526517589895.6081131893858941067643186784152931068092585 ^2 ::== 1489691859223019994250953085768681 as intpart 1489691859223019947308839406111025  diafora 6409064588762624194835284735130223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1080702742492517.07702716930280503488531751443701978132594377 ^2 ::== 1167918417630847675492747219242.6456298828125 as intpart 1167918417630847509005800995289  diafora 7897588529568013294635118340245959 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 27017568562312926.925679232570125871265576122937090985942632 ^2 ::== 729949011019279797182967012026653.5 as intpart 729949011019279747163762746681476  diafora 7168807436966364394980361394559772 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56149837569119014.5182903810629059804249152421107282862067223 ^2 ::== 3152804259038449121501729516970132.5 as intpart 3152804259038449063297888096332196  diafora 4745952188947195078846236044909052 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 14037459392279753.6295725952657264951062288105276820715516806 ^2 ::== 197050266189903070093858094810633.28125 as intpart 197050266189903052418658613741009  diafora 7701706181795741089725465527500239 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 76 ^2 ::== 5776 as intpart 5776  diafora 7898756447985644142144124141235472 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 36940682611262509.5515068296466486830187392342850216664373875 ^2 ::== 1364614031786032341370208412816021 as intpart 1364614031786032300624130908975081  diafora 6534142416199611841519993232266167 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 73881365222525019.1030136592932973660374784685700433328747749 ^2 ::== 5458456127144129365480833651264084 as intpart 5458456127144129350259254080950361  diafora 2440300320841514791884870060290887 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 18470341305631254.7757534148233243415093696171425108332186937 ^2 ::== 341153507946508085342552103204005.25 as intpart 341153507946508056685691421612516  diafora 7557602940039136085458432719628732 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1403745939227975.36295725952657264959735905485160856187576428 ^2 ::== 1970502661899030700938580948106.333251953125 as intpart 1970502661899029681939022600625  diafora 7896785945323745112462185118640623 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 35093648480699384.0739314881643162377655720263192051788792014 ^2 ::== 1231564163686894188086613092566458 as intpart 1231564163686894182897561777979456  diafora 6667192284298749959246562363261792 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9808058503293432.29570876342041544151961751651924714678898454 ^2 ::== 96198011604026603255048397466606.984375 as intpart 96198011604026597454390694338624  diafora 7802558436381617544689733446902624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24520146258233580.7392719085510386020643203153213107725605369 ^2 ::== 601237572525166270344052484166293.5625 as intpart 601237572525166234089941839616400  diafora 7297518875460477908054182301624848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 87 ^2 ::== 7569 as intpart 7569  diafora 7898756447985644142144124141233679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56368152317778346.5270618587380197644920443167393386829644442 ^2 ::== 3177368595720260379675267454967860 as intpart 3177368595720260320256261186495716  diafora 4721387852265383821887862954745532 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11273630463555669.3054123717476039528984088633478677365928888 ^2 ::== 127094743828810415187010698198714.40625 as intpart 127094743828810408300798262037561  diafora 7771661704156833733843325879203687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28184076158889173.2635309293690098822460221583696693414822221 ^2 ::== 794342148930065094918816863741965 as intpart 794342148930065080064065296623929  diafora 7104414299055579062080058844617319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2452014625823358.07392719085510386037990437912981178669724613 ^2 ::== 6012375725251662703440524841662.9365234375 as intpart 6012375725251662340899418396164  diafora 7892744072260392479803224722845084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61300365645583951.8481797713775965016913538363496627425774932 ^2 ::== 3757734828282289189650328026039334.5 as intpart 3757734828282289085662867788770401  diafora 4141021619703355056481256352470847 from 7898756447985644142144124141241248
the size of xpl vector is 52 64
 of 77193053035179791.2162263787717882135286373568305862136185169 ^2 ::== 5958767436892079977003812343074724 as intpart 5958767436892079943621463694803681  diafora 1939989011093564198522660446437567 from 7898756447985644142144124141241248

-------------------------------------------------------------------------

10 |26| 36 |16| 88874948371212256.5987075721953532686514520833043206948786974  and main 7898756447985644142144124141241248
-------------------------------------------------------------------------
section_temp 78
section h 3894850319519548393562191391144.58984375
7898756447985644142144124141241248 / 26 ::== 303798324922524774697850928509278.78125
            ----->  | *2 607596649845049549395701857018556
            ----->  /2 151899162461262387348925464254639
                 --> 75949581230631193674462732127319.5
                 --> 37974790615315596837231366063659.75
            ----->  section 3894850319519548393562191391144.58984375
                 --> of section *2 7789700639039096787124382782289.1796875
                 --> of section /2 1947425159759774196781095695572.294921875

i insert 3691736889029277392000916450542116 60759664984504954.9395701857018555966383210886760934954509139
i insert 230733555564329821810141032032644 15189916246126238.7348925464254638991595802721690233738627285
i insert 6084 78
i insert 1516985901146152748525174583603289 38948503195195483.9356219139114458974160193349689507158473134
i insert 6067943604584611149894711115195089 77897006390390967.8712438278228917948320386699379014316946268
i insert 379246475286538167657042048303081 19474251597597741.9678109569557229487080096674844753579236567
i insert 2307335555643295787714810940129 1518991624612623.87348925464254638991595802721690233738627285
i insert 1442084722277061462262962680835216 37974790615315596.8372313660636597487663124184109619818627834
CDIS Start 
section_temp 96
section h 452080840658519009967040072186.41668701171875
303798324922524774697850928509278.78125 / 7 ::== 43399760703217824956835846929896.96875
            ----->  | *2 86799521406435649913671693859792
            ----->  /2 21699880351608912478417923464948
                 --> 10849940175804456239208961732474
                 --> 5424970087902228119604480866237
            ----->  section 452080840658519009967040072186.41668701171875
                 --> of section *2 904161681317038019934080144372.8333740234375
                 --> of section /2 226040420329259504983520036093.208343505859375

i insert 7534156916386280466238194778051201 86799521406435649.9136716938597920084630388259938627015799284
i insert 470884807274142518289946997823744 21699880351608912.4784179234649480021157597064984656753949821
i insert 9216 96
i insert 2043770864905132457855672733610000 45208084065851900.9967040072186416771460315544572949875146151
i insert 81750834596205298314226909344400 9041616813170380.19934080144372833508226161569609757862053812
i insert 510942716226283114463918183402500 22604042032925950.4983520036093208385730157772286474937573075
i insert 4708848072741424314904255913881 2169988035160891.24784179234649480029831214444868692226009443
i insert 2943030045463390847811570494442961 54249700879022281.1960448086623700070241227422229712828993797
CDIS End 
section_temp 0
section h inf
7898756447985644142144124141241248 / 16 ::== 493672277999102758884007758827578
            ----->  | *2 987344555998205517768015517655156
            ----->  /2 246836138999551379442003879413789
                 --> 123418069499775689721001939706894.5
                 --> 61709034749887844860500969853447.25
            ----->  section inf
                 --> of section *2 inf
                 --> of section /2 inf

error continue with the rest 
i insert 97484927225929355638851922023025 9873445559982055.17768015517655156090826018555617338279262185
i insert 609280795162058448059210612688769 24683613899955137.9442003879413789005359269879136263625696301
i insert 0 0
i insert 6092807951620581024886160133169 2468361389995513.79442003879413789022706504638904334569815546
i insert 3808004969762865485497170578968336 61709034749887844.8605009698534472478703705178304517176002264
section_temp 15
section h 217956855628742939904639187120.333343505859375
493672277999102758884007758827578 / 151 ::== 3269352834431144098569587806805.15234375
            ----->  | *2 6538705668862288197139175613610
            ----->  /2 1634676417215572049284793903402.5
                 --> 817338208607786024642396951701.25
                 --> 408669104303893012321198475850.625
            ----->  section 217956855628742939904639187120.333343505859375
                 --> of section *2 435913711257485879809278374240.66668701171875
                 --> of section /2 108978427814371469952319593560.1666717529296875

i insert 4275467182401182239858144236740161 65387056688622881.9713917561360999944342076162229204783216119
i insert 267216698900073881817751928718400 16346764172155720.492847939034024998608551904055730119580403
i insert 225 15
i insert 475051909155686886478879720249849 21795685562874293.9904639187120333372604807919969971408136189
i insert 1900207636622747633098261132496569 43591371125748587.9809278374240666745209615839939942816272378
i insert 118762977288921710721877148625316 10897842781437146.9952319593560166686302403959984985704068094
i insert 2672166989000738818177519287184 1634676417215572.0492847939034024998608551904055730119580403
i insert 1670104368125461843094770415268601 40866910430389301.2321198475850624956540180221509217517450452
removals 
reporing rt 3
section_temp 62
section h 4847241485291832751601311946814.08056640625
303798324922524774697850928509278.78125 - 3269352834431144098569587806805.15234375 ::== 300528972088093630599281340702473.625
            ----->  | *2 601057944176187261198562681404946
            ----->  /2 150264486044046815299640670351236.5
                 --> 75132243022023407649820335175618.25
                 --> 37566121511011703824910167587809.125
            ----->  section 4847241485291832751601311946814.08056640625
                 --> of section *2 9694482970583665503202623893628.1611328125
                 --> of section /2 2423620742645916375800655973407.040283203125

i insert 3612706522573046405402288305863076 60105794417618726.1198562681404946039798176116164540871977806
i insert 225794157660815385311194414711761 15026448604404681.5299640670351236509949544029041135217994452
i insert 3844 62
i insert 2349575001673417236532428532478929 48472414852918327.5160131194681408101088138096201873850077391
i insert 93983000066936681705710764832225 9694482970583665.50320262389362816271565215231476031476631761
i insert 587393750418354284896899706660569 24236207426459163.7580065597340704050544069048100936925038695
i insert 2257941576608153552582972059024 1502644860440468.1529964067035123650561273533909911748196464
i insert 1411213485380096195761086602960209 37566121511011703.8249101675878091274873860072602838044986129
section_temp 81
section h 495437134182551615534151347198.654296875
43399760703217824956835846929896.96875 - 3269352834431144098569587806805.15234375 ::== 40130407868786680858266259123091.81640625
            ----->  | *2 80260815737573361716532518246182
            ----->  /2 20065203934393340429133129561545.5
                 --> 10032601967196670214566564780772.75
                 --> 5016300983598335107283282390386.375
            ----->  section 495437134182551615534151347198.654296875
                 --> of section *2 990874268365103231068302694397.30859375
                 --> of section /2 247718567091275807767075673599.3271484375

i insert 6441798542860703696312892856836321 80260815737573361.7165325182461819847334894006962713319808245
i insert 402612408928793970986953836355600 20065203934393340.4291331295615454961833723501740678329952061
i insert 6561 81
i insert 2454579539270196489642965703135921 49543713418255161.5534151347198654341541512735602736938744783
i insert 98183181570807855622221554665024 9908742683651032.31068302694397308648388555951669331989251077
i insert 613644884817549097638884716656400 24771856709127580.7767075673599327170770756367801368469372392
i insert 4026124089287939709869538363556 2006520393439334.04291331295615454953160106121856642857892439
i insert 2516327555804962418994481149189201 50163009835983351.0728328239038637387237073994583624880760908
section_temp 87
section h 5636815231777834652706185873801.9765625
493672277999102758884007758827578 - 3269352834431144098569587806805.15234375 ::== 490402925164671614785438171020772.875
            ----->  | *2 980805850329343229570876342041544
            ----->  /2 245201462582335807392719085510386
                 --> 122600731291167903696359542755193
                 --> 61300365645583951848179771377596.5
            ----->  section 5636815231777834652706185873801.9765625
                 --> of section *2 11273630463555669305412371747603.953125
                 --> of section /2 2818407615888917326353092936900.98828125

i insert 96198011604026597454390694338624 9808058503293432.29570876342041544151961751651924714678898454
i insert 601237572525166234089941839616400 24520146258233580.7392719085510386020643203153213107725605369
i insert 7569 87
i insert 3177368595720260320256261186495716 56368152317778346.5270618587380197644920443167393386829644442
i insert 127094743828810408300798262037561 11273630463555669.3054123717476039528984088633478677365928888
i insert 794342148930065080064065296623929 28184076158889173.2635309293690098822460221583696693414822221
i insert 6012375725251662340899418396164 2452014625823358.07392719085510386037990437912981178669724613
i insert 3757734828282289085662867788770401 61300365645583951.8481797713775965016913538363496627425774932
ending sqti reporting the results 
reporting size of xl vector 52 64
entering amfidromi loop of xl vector  with first 
 of 60759664984504954.9395701857018555966383210886760934954509139 ^2 ::== 3691736889029277506176855875889822 as intpart 3691736889029277392000916450542116  diafora 4207019558956366750143207690699132 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15189916246126238.7348925464254638991595802721690233738627285 ^2 ::== 230733555564329844136053492243113.875 as intpart 230733555564329821810141032032644  diafora 7668022892421314320333983109208604 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 78 ^2 ::== 6084 as intpart 6084  diafora 7898756447985644142144124141235164 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 38948503195195483.9356219139114458974160193349689507158473134 ^2 ::== 1516985901146152821407320790553017.25 as intpart 1516985901146152748525174583603289  diafora 6381770546839491393618949557637959 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 77897006390390967.8712438278228917948320386699379014316946268 ^2 ::== 6067943604584611285629283162212069 as intpart 6067943604584611149894711115195089  diafora 1830812843401032992249413026046159 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 19474251597597741.9678109569557229487080096674844753579236567 ^2 ::== 379246475286538205351830197638254.3125 as intpart 379246475286538167657042048303081  diafora 7519509972699105974487082092938167 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1518991624612623.87348925464254638991595802721690233738627285 ^2 ::== 2307335555643298441360534922431.138916015625 as intpart 2307335555643295787714810940129  diafora 7896449112430000846356409330301119 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37974790615315596.8372313660636597487663124184109619818627834 ^2 ::== 1442084722277061525850334326519462 as intpart 1442084722277061462262962680835216  diafora 6456671725708582679881161460406032 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 86799521406435649.9136716938597920084630388259938627015799284 ^2 ::== 7534156916386280624850726277325873 as intpart 7534156916386280466238194778051201  diafora 364599531599363675905929363190047 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21699880351608912.4784179234649480021157597064984656753949821 ^2 ::== 470884807274142539053170392332867.0625 as intpart 470884807274142518289946997823744  diafora 7427871640711501623854177143417504 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 96 ^2 ::== 9216 as intpart 9216  diafora 7898756447985644142144124141232032 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 45208084065851900.9967040072186416771460315544572949875146151 ^2 ::== 2043770864905132547973829827833624.75 as intpart 2043770864905132457855672733610000  diafora 5854985583080511684288451407631248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9041616813170380.19934080144372833508226161569609757862053812 ^2 ::== 81750834596205301918953193113344.984375 as intpart 81750834596205298314226909344400  diafora 7817005613389438843829897231896848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 22604042032925950.4983520036093208385730157772286474937573075 ^2 ::== 510942716226283136993457456958406.1875 as intpart 510942716226283114463918183402500  diafora 7387813731759361027680205957838748 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2169988035160891.24784179234649480029831214444868692226009443 ^2 ::== 4708848072741425390531703923328.6708984375 as intpart 4708848072741424314904255913881  diafora 7894047599912902717829219885327367 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 54249700879022281.1960448086623700070241227422229712828993797 ^2 ::== 2943030045463390869082314952080419 as intpart 2943030045463390847811570494442961  diafora 4955726402522253294332553646798287 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9873445559982055.17768015517655156090826018555617338279262185 ^2 ::== 97484927225929359147482600472716.140625 as intpart 97484927225929355638851922023025  diafora 7801271520759714786505272219218223 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24683613899955137.9442003879413789005359269879136263625696301 ^2 ::== 609280795162058494671766252954475.8125 as intpart 609280795162058448059210612688769  diafora 7289475652823585694084913528552479 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 0 ^2 ::== 0 as intpart 0  diafora 7898756447985644142144124141241248 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2468361389995513.79442003879413789022706504638904334569815546 ^2 ::== 6092807951620584946717662529544.7587890625 as intpart 6092807951620581024886160133169  diafora 7892663640034023561119237981108079 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61709034749887844.8605009698534472478703705178304517176002264 ^2 ::== 3808004969762865591698539080965473.5 as intpart 3808004969762865485497170578968336  diafora 4090751478222778656646953562272912 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 65387056688622881.9713917561360999944342076162229204783216119 ^2 ::== 4275467182401182366891039887404369 as intpart 4275467182401182239858144236740161  diafora 3623289265584461902285979904501087 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 16346764172155720.492847939034024998608551904055730119580403 ^2 ::== 267216698900073897930689992962773.0625 as intpart 267216698900073881817751928718400  diafora 7631539749085570260326372212522848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15 ^2 ::== 225 as intpart 225  diafora 7898756447985644142144124141241023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 21795685562874293.9904639187120333372604807919969971408136189 ^2 ::== 475051909155686929654559987489374.625 as intpart 475051909155686886478879720249849  diafora 7423704538829957255665244420991399 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 43591371125748587.9809278374240666745209615839939942816272378 ^2 ::== 1900207636622747718618239949957498.5 as intpart 1900207636622747633098261132496569  diafora 5998548811362896509045863008744679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 10897842781437146.9952319593560166686302403959984985704068094 ^2 ::== 118762977288921732413639996872343.65625 as intpart 118762977288921710721877148625316  diafora 7779993470696722431422246992615932 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1634676417215572.0492847939034024998608551904055730119580403 ^2 ::== 2672166989000738979306899929627.73095703125 as intpart 2672166989000738818177519287184  diafora 7896084280996643403325946621954064 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 40866910430389301.2321198475850624956540180221509217517450452 ^2 ::== 1670104368125461862066812456017331.75 as intpart 1670104368125461843094770415268601  diafora 6228652079860182299049353725972647 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 60105794417618726.1198562681404946039798176116164540871977806 ^2 ::== 3612706522573046419810400730894183.5 as intpart 3612706522573046405402288305863076  diafora 4286049925412597736741835835378172 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 15026448604404681.5299640670351236509949544029041135217994452 ^2 ::== 225794157660815401238150045680886.46875 as intpart 225794157660815385311194414711761  diafora 7672962290324828756832929726529487 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 62 ^2 ::== 3844 as intpart 3844  diafora 7898756447985644142144124141237404 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 48472414852918327.5160131194681408101088138096201873850077391 ^2 ::== 2349575001673417286557232525295384.75 as intpart 2349575001673417236532428532478929  diafora 5549181446312226905611695608762319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9694482970583665.50320262389362816271565215231476031476631761 ^2 ::== 93983000066936691462289301011815.40625 as intpart 93983000066936681705710764832225  diafora 7804773447918707460438413376409023 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24236207426459163.7580065597340704050544069048100936925038695 ^2 ::== 587393750418354321639308131323846.1875 as intpart 587393750418354284896899706660569  diafora 7311362697567289857247224434580679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 1502644860440468.1529964067035123650561273533909911748196464 ^2 ::== 2257941576608154012381500456808.864501953125 as intpart 2257941576608153552582972059024  diafora 7896498506409035988591541169182224 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 37566121511011703.8249101675878091274873860072602838044986129 ^2 ::== 1411213485380096257738437785505540.5 as intpart 1411213485380096195761086602960209  diafora 6487542962605547946383037538281039 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 80260815737573361.7165325182461819847334894006962713319808245 ^2 ::== 6441798542860703811331861690708790 as intpart 6441798542860703696312892856836321  diafora 1456957905124940445831231284404927 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 20065203934393340.4291331295615454961833723501740678329952061 ^2 ::== 402612408928793988208241355669299.375 as intpart 402612408928793970986953836355600  diafora 7496144039056850171157170304885648 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 81 ^2 ::== 6561 as intpart 6561  diafora 7898756447985644142144124141234687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 49543713418255161.5534151347198654341541512735602736938744783 ^2 ::== 2454579539270196544479447374908090.75 as intpart 2454579539270196489642965703135921  diafora 5444176908715447652501158438105327 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9908742683651032.31068302694397308648388555951669331989251077 ^2 ::== 98183181570807861779177894996323.625 as intpart 98183181570807855622221554665024  diafora 7800573266414836286521902586576224 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24771856709127580.7767075673599327170770756367801368469372392 ^2 ::== 613644884817549136119861843727022.6875 as intpart 613644884817549097638884716656400  diafora 7285111563168095044505239424584848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2006520393439334.04291331295615454953160106121856642857892439 ^2 ::== 4026124089287939882082413556692.99365234375 as intpart 4026124089287939709869538363556  diafora 7894730323896356202434254602877692 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 50163009835983351.0728328239038637387237073994583624880760908 ^2 ::== 2516327555804962426301508472933121 as intpart 2516327555804962418994481149189201  diafora 5382428892180681723149642992052047 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 9808058503293432.29570876342041544151961751651924714678898454 ^2 ::== 96198011604026603255048397466606.984375 as intpart 96198011604026597454390694338624  diafora 7802558436381617544689733446902624 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 24520146258233580.7392719085510386020643203153213107725605369 ^2 ::== 601237572525166270344052484166293.5625 as intpart 601237572525166234089941839616400  diafora 7297518875460477908054182301624848 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 87 ^2 ::== 7569 as intpart 7569  diafora 7898756447985644142144124141233679 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 56368152317778346.5270618587380197644920443167393386829644442 ^2 ::== 3177368595720260379675267454967860 as intpart 3177368595720260320256261186495716  diafora 4721387852265383821887862954745532 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 11273630463555669.3054123717476039528984088633478677365928888 ^2 ::== 127094743828810415187010698198714.40625 as intpart 127094743828810408300798262037561  diafora 7771661704156833733843325879203687 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 28184076158889173.2635309293690098822460221583696693414822221 ^2 ::== 794342148930065094918816863741965 as intpart 794342148930065080064065296623929  diafora 7104414299055579062080058844617319 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 2452014625823358.07392719085510386037990437912981178669724613 ^2 ::== 6012375725251662703440524841662.9365234375 as intpart 6012375725251662340899418396164  diafora 7892744072260392479803224722845084 from 7898756447985644142144124141241248
entering amfidromi loop of xl vector  with first 
 of 61300365645583951.8481797713775965016913538363496627425774932 ^2 ::== 3757734828282289189650328026039334.5 as intpart 3757734828282289085662867788770401  diafora 4141021619703355056481256352470847 from 7898756447985644142144124141241248
the size of xpl vector is 52 64
 of 86799521406435649.9136716938597920084630388259938627015799284 ^2 ::== 7534156916386280624850726277325873 as intpart 7534156916386280466238194778051201  diafora 364599531599363675905929363190047 from 7898756447985644142144124141241248

-------------------------------------------------------------------------


 78733419652709330.458697 ^2 ::== 6198951370209635826457585944159346.000000 as intpart 6198951370209635754228009469048900.000000 diafora 1699805077776008387916114672192348.000000 from 7898756447985644142144124141241248.000000 
 83732796593830787.713079 ^2 ::== 7011181225423840764832169955518997.000000 as intpart 7011181225423840645415907589039369.000000 diafora 887575222561803496728216552201879.000000 from 7898756447985644142144124141241248.000000 
 76744169144364608.295986 ^2 ::== 5889667497658844814213070881546103.000000 as intpart 5889667497658844768782644042993664.000000 diafora 2009088950326799373361480098247584.000000 from 7898756447985644142144124141241248.000000 
 86799521406435649.913672 ^2 ::== 7534156916386280624850726277325873.000000 as intpart 7534156916386280466238194778051201.000000 diafora 364599531599363675905929363190047.000000 from 7898756447985644142144124141241248.000000 
 71169585511426266.091311 ^2 ::== 5065109901868215493193142723750794.500000 as intpart 5065109901868215480196045554702756.000000 diafora 2833646546117428661948078586538492.000000 from 7898756447985644142144124141241248.000000 
 83296882882573301.833270 ^2 ::== 6938370697953133137248200767036596.000000 as intpart 6938370697953132998430595638036601.000000 diafora 960385750032511143713528503204647.000000 from 7898756447985644142144124141241248.000000 
 77193053035179791.216226 ^2 ::== 5958767436892079977003812343074724.000000 as intpart 5958767436892079943621463694803681.000000 diafora 1939989011093564198522660446437567.000000 from 7898756447985644142144124141241248.000000 
 86799521406435649.913672 ^2 ::== 7534156916386280624850726277325873.000000 as intpart 7534156916386280466238194778051201.000000 diafora 364599531599363675905929363190047.000000 from 7898756447985644142144124141241248.000000 

---------order of near approximation numbers--------
|----------bigger value is the nearest-------------|

the size of fnl_weirdo vector is 7 8
 86799521406435649  86799521406435649  83732796593830787  83296882882573301  78733419652709330  77193053035179791  76744169144364608 
----------------------------------------------------

auto value is 86799521406435649
lenght of 86799521406435649 17
lenght of 7898756447985644142144124141241248 is 34
moving with ps_ask 18
creating  vcc_part_one instance .... 
entered fill_vcc function @ vcc_part_one class 
-------------------------------------------------------
times 1 7 8
main 2.64575131106459059050161575363926040100932927736941267983065 second 2.82842712474619009760337744841939596869449277831725483251102
main 7 second 7.99999999999999999999999999999999922962802224510565877760882
times of 0.33071891388307382381270196920490759827441476935207291137828
new times of 0.33071891388307382381270196920490759827441476935207291137828
using 86799521406435649 * 0.33071891388307382381270196920490759827441476935207291137828
28706243445107014.3152231443389699079571375506247932207770646  with length of 60 and dot length 17 will move 43
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 28706243445107014.3152231443389699079571375506247932207770646 ^2 ::== 824048412729749425994802553849350.25
 temp fract 0.25 temp int 824048412729749425994802553849350
before loop xstp is 0entering tens with lap of value 10
using t_rst as 287062434451070143.152231443389699072632481602340703830122948
using for fract 82404841272974942599480255384935016
getting the part of 82404841272974942599480255384935016 :: ad 35 and mad 34
have to exit bigger lenght with ad 35 and mad 34
i push_back a near value of 287062434451070143
stopping with ad 35 and mad of 34
    -----------------> 287062434451070143.152231443389699072632481602340703830122948 ^2 ::== 82404841272974942599480255384935016
t_ten increased 
breaking with xbrk of value 1

increasing the digits 2
-------------------------------------------------------
-------------------------------------------------------
times 2 78 86
main 8.8317608663278468547640427269592536887435252431404548810106 second 9.2736184954957037525164160739901743783773190591530410059952
main 78 second 86
times of 0.102694893794509847148419101476270392569370908810020922914067
new times of 0.102694893794509847148419101476270392569370908810020922914067
using 86799521406435649 * 0.102694893794509847148419101476270392569370908810020922914067
8913867632248192.97062367627804917950135044080184343329165131  with length of 60 and dot length 16 will move 44
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 8913867632248192.97062367627804917950135044080184343329165131 ^2 ::== 79457036165242005998726229406164.6328125
 temp fract 0.6328125 temp int 79457036165242005998726229406164
before loop xstp is 0entering tens with lap of value 10
using t_rst as 89138676322481929.7062367627804918002176748359488556161522865
using for fract 7945703616524200599872622940616464
getting the part of 7945703616524200599872622940616464 :: ad 34 and mad 34
i push_back a near value of 89138676322481929
stopping with ad 34 and mad of 34
    -----------------> 89138676322481929.7062367627804918002176748359488556161522865 ^2 ::== 7945703616524200599872622940616464
t_ten increased 
breaking with xbrk of value 1

increasing the digits 3
-------------------------------------------------------
-------------------------------------------------------
times 3 789 867
main 28.0891438103762785374101157849119316364565341309391758510302 second 29.4448637286709139899665878055998310173466099057792206962576
main 789 second 867
times of 0.0323980897466854423730220481948234521021573622255871383029007
new times of 0.0323980897466854423730220481948234521021573622255871383029007
using 86799521406435649 * 0.0323980897466854423730220481948234521021573622255871383029007
2812138684495046.36820576047548090638239504102102728211320937  with length of 60 and dot length 16 will move 44
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 2812138684495046.36820576047548090638239504102102728211320937 ^2 ::== 7908123980833529941055324316149.89453125
 temp fract 0.89453125 temp int 7908123980833529941055324316149
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28121386844950463.6820576047548090638239504102102728211320937
using for fract 790812398083352994105532431614989.375
getting the part of 790812398083352994105532431614989.375 :: ad 33 and mad 34
i push_back a near value of 28121386844950463
stopping with ad 33 and mad of 34
    -----------------> 28121386844950463.6820576047548090638239504102102728211320937 ^2 ::== 790812398083352994105532431614989.375
t_ten increased 
breaking with xbrk of value 1

increasing the digits 4
-------------------------------------------------------
-------------------------------------------------------
times 4 7898 8679
main 88.8706925819755272148915287108884552749120943925277938899693 second 93.1611507013519020970947086032497395552286151622705320031689
main 7898 second 8679
times of 0.0102397387466269762893065478408674330938794664612254880148645
new times of 0.0102397387466269762893065478408674330938794664612254880148645
using 86799521406435649 * 0.0102397387466269762893065478408674330938794664612254880148645
888804422534156.770665947443802795994646781529979762126458809  with length of 60 and dot length 15 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 888804422534156.770665947443802795994646781529979762126458809 ^2 ::== 789973301516275883903591401391.3167724609375
 temp fract 0.3167724609375 temp int 789973301516275883903591401391
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8888044225341567.70665947443802796038014868429399939486756921
using for fract 78997330151627588390359140139131.6796875
getting the part of 78997330151627588390359140139131.6796875 :: ad 32 and mad 34
    -----------------> 8888044225341567.70665947443802796038014868429399939486756921 ^2 ::== 78997330151627588390359140139131.6796875
t_ten increased 
using t_rst as 88880442253415677.0665947443802795968625929390327655710279942
using for fract 7899733015162758839035914013913167
getting the part of 7899733015162758839035914013913167 :: ad 34 and mad 34
i push_back a near value of 88880442253415677
stopping with ad 34 and mad of 34
    -----------------> 88880442253415677.0665947443802795968625929390327655710279942 ^2 ::== 7899733015162758839035914013913167
t_ten increased 
breaking with xbrk of value 1

increasing the digits 5
-------------------------------------------------------
-------------------------------------------------------
times 5 78987 86799
main 281.046259537464757200578205823624787200083865203401387089988 second 294.616700137653432376799299827345067884337341296393953286353
main 78987 second 86799
times of 0.00323789743588595211005401221009026347156847686092324667296548
new times of 0.00323789743588595211005401221009026347156847686092324667296548
using 86799521406435649 * 0.00323789743588595211005401221009026347156847686092324667296548
281047947798025.799531370379796708100852975498185060132527724  with length of 60 and dot length 15 will move 45
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 281047947798025.799531370379796708100852975498185060132527724 ^2 ::== 78987948961481834859495591394.63312530517578125
 temp fract 0.63312530517578125 temp int 78987948961481834859495591394
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810479477980257.99531370379796708100852975498185060132527724
using for fract 7898794896148183485949559139463.3125
getting the part of 7898794896148183485949559139463.3125 :: ad 31 and mad 34
    -----------------> 2810479477980257.99531370379796708100852975498185060132527724 ^2 ::== 7898794896148183485949559139463.3125
t_ten increased 
using t_rst as 28104794779802579.9531370379796708092179358118301024660468102
using for fract 789879489614818348594955913946331.125
getting the part of 789879489614818348594955913946331.125 :: ad 33 and mad 34
i push_back a near value of 28104794779802579
stopping with ad 33 and mad of 34
    -----------------> 28104794779802579.9531370379796708092179358118301024660468102 ^2 ::== 789879489614818348594955913946331.125
t_ten increased 
breaking with xbrk of value 1

increasing the digits 6
-------------------------------------------------------
-------------------------------------------------------
times 6 789875 867995
main 888.749120955964715377794952389180119380598747640776079850108 second 931.662492536862836221047683373247020938609798139736369384897
main 789875 second 867995
times of 0.00102391041533184490161555648637282490847635412870328123437322
new times of 0.00102391041533184490161555648637282490847635412870328123437322
using 86799521406435649 * 0.00102391041533184490161555648637282490847635412870328123437322
88874934013868.8876797803621210640841925412769519709854648681  with length of 60 and dot length 14 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 88874934013868.8876797803621210640841925412769519709854648681 ^2 ::== 7898753895969548954580131681.4857044219970703125
 temp fract 0.4857044219970703125 temp int 7898753895969548954580131681
before loop xstp is 0entering tens with lap of value 10
using t_rst as 888749340138688.876797803621210640814820358457382099004462361
using for fract 789875389596954895458013168148.5704345703125
getting the part of 789875389596954895458013168148.5704345703125 :: ad 30 and mad 34
    -----------------> 888749340138688.876797803621210640814820358457382099004462361 ^2 ::== 789875389596954895458013168148.5704345703125
t_ten increased 
using t_rst as 8887493401386888.76797803621210640814820358457382099004462361
using for fract 78987538959695489545801316814857.0390625
getting the part of 78987538959695489545801316814857.0390625 :: ad 32 and mad 34
    -----------------> 8887493401386888.76797803621210640814820358457382099004462361 ^2 ::== 78987538959695489545801316814857.0390625
t_ten increased 
using t_rst as 88874934013868887.6797803621210640884209297496454382780939341
using for fract 7898753895969548954580131681485705
getting the part of 7898753895969548954580131681485705 :: ad 34 and mad 34
i push_back a near value of 88874934013868887
stopping with ad 34 and mad of 34
    -----------------> 88874934013868887.6797803621210640884209297496454382780939341 ^2 ::== 7898753895969548954580131681485705
t_ten increased 
breaking with xbrk of value 1

increasing the digits 7
-------------------------------------------------------
-------------------------------------------------------
times 7 7898756 8679952
main 2810.47255812968221908238652192772401854538476382119277459165 second 2946.17582638918548302699546008036602659662146787812458558262
main 7898755.99999999999999999999999999919220643305368391125838995 second 8679952
times of 0.000323788951612829451024888907441852673849642250681199521087013
new times of 0.000323788951612829451024888907441852673849642250681199521087013
using 86799521406435649 * 0.000323788951612829451024888907441852673849642250681199521087013
28104726036685.1464914432508977805864067503471837028428126359  with length of 60 and dot length 14 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 28104726036685.1464914432508977805864067503471837028428126359 ^2 ::== 789875625597127982169547795.1614058017730712890625
 temp fract 0.1614058017730712890625 temp int 789875625597127982169547795
before loop xstp is 0entering tens with lap of value 10
using t_rst as 281047260366851.464914432508977805864067503471837028428126359
using for fract 78987562559712798216954779516.14058685302734375
getting the part of 78987562559712798216954779516.14058685302734375 :: ad 29 and mad 34
    -----------------> 281047260366851.464914432508977805864067503471837028428126359 ^2 ::== 78987562559712798216954779516.14058685302734375
t_ten increased 
using t_rst as 2810472603668514.64914432508977805858646492609409506258089095
using for fract 7898756255971279821695477951614.0576171875
getting the part of 7898756255971279821695477951614.0576171875 :: ad 31 and mad 34
    -----------------> 2810472603668514.64914432508977805858646492609409506258089095 ^2 ::== 7898756255971279821695477951614.0576171875
t_ten increased 
using t_rst as 28104726036685146.491443250897780587599372736917757720220834
using for fract 789875625597127982169547795161405.875
getting the part of 789875625597127982169547795161405.875 :: ad 33 and mad 34
i push_back a near value of 28104726036685146
stopping with ad 33 and mad of 34
    -----------------> 28104726036685146.491443250897780587599372736917757720220834 ^2 ::== 789875625597127982169547795161405.875
t_ten increased 
breaking with xbrk of value 1

increasing the digits 8
-------------------------------------------------------
-------------------------------------------------------
times 8 78987564 86799521
main 8887.49481012506695910995183218222193257799646559768741800242 second 9316.62605238613191383303264006112593777383442807278407247541
main 78987563.9999999999999999999999999870753029288589425801342392 second 86799521.0000000000000000000000000129246970711410574198657608
times of 0.000102391058242418952509080687578704731069200300271649899206969
new times of 0.000102391058242418952509080687578704731069200300271649899206969
using 86799521406435649 * 0.000102391058242418952509080687578704731069200300271649899206969
8887494851740.44316766429812511060726688393723859960005029279  with length of 60 and dot length 13 will move 47
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 8887494851740.44316766429812511060726688393723859960005029279 ^2 ::== 78987564739712881881697414.6514396965503692626953125
 temp fract 0.6514396965503692626953125 temp int 78987564739712881881697414
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88874948517404.4316766429812511060760569711614031973567762179
using for fract 7898756473971288188169741465.14396953582763671875
getting the part of 7898756473971288188169741465.14396953582763671875 :: ad 28 and mad 34
    -----------------> 88874948517404.4316766429812511060760569711614031973567762179 ^2 ::== 7898756473971288188169741465.14396953582763671875
t_ten increased 
using t_rst as 888749485174044.316766429812511060679254548677619141017203219
using for fract 789875647397128818816974146514.3968505859375
getting the part of 789875647397128818816974146514.3968505859375 :: ad 30 and mad 34
    -----------------> 888749485174044.316766429812511060679254548677619141017203219 ^2 ::== 789875647397128818816974146514.3968505859375
t_ten increased 
using t_rst as 8887494851740443.16766429812511060744306679026749407057650387
using for fract 78987564739712881881697414651439.6953125
getting the part of 78987564739712881881697414651439.6953125 :: ad 32 and mad 34
    -----------------> 8887494851740443.16766429812511060744306679026749407057650387 ^2 ::== 78987564739712881881697414651439.6953125
t_ten increased 
using t_rst as 88874948517404431.6766429812511060709612209507213265169411898
using for fract 7898756473971288188169741465143969
getting the part of 7898756473971288188169741465143969 :: ad 34 and mad 34
i push_back a near value of 88874948517404431
stopping with ad 34 and mad of 34
    -----------------> 88874948517404431.6766429812511060709612209507213265169411898 ^2 ::== 7898756473971288188169741465143969
t_ten increased 
breaking with xbrk of value 1

increasing the digits 9
-------------------------------------------------------
-------------------------------------------------------
times 9 789875644 867995214
main 28104.7263640833194289696422157408088235148101451609406416015 second 29461.7585014879924767183513229400340307466902303968161910526
main 789875644 second 867995214
times of 3.23788955408725553514050161752859709556496856051513761294968e-05
new times of 3.23788955408725553514050161752859709556496856051513761294968e-05
using 86799521406435649 * 3.23788955408725553514050161752859709556496856051513761294968e-05
2810472636616.7111496056851415487952209595803182429207822679  with length of 59 and dot length 13 will move 46
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 2810472636616.7111496056851415487952209595803182429207822679 ^2 ::== 7898756441171288116946093.202757316641509532928466796875
 temp fract 0.202757316641509532928466796875 temp int 7898756441171288116946093
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28104726366167.1114960568514154879530566287504367295468910015
using for fract 789875644117128811694609320.2757318019866943359375
getting the part of 789875644117128811694609320.2757318019866943359375 :: ad 27 and mad 34
    -----------------> 28104726366167.1114960568514154879530566287504367295468910015 ^2 ::== 789875644117128811694609320.2757318019866943359375
t_ten increased 
using t_rst as 281047263661671.114960568514154879517013760348298490043816855
using for fract 78987564411712881169460932027.5731658935546875
getting the part of 78987564411712881169460932027.5731658935546875 :: ad 29 and mad 34
    -----------------> 281047263661671.114960568514154879517013760348298490043816855 ^2 ::== 78987564411712881169460932027.5731658935546875
t_ten increased 
using t_rst as 2810472636616711.14960568514154879522434771210726012213854119
using for fract 7898756441171288116946093202757.3173828125
getting the part of 7898756441171288116946093202757.3173828125 :: ad 31 and mad 34
    -----------------> 2810472636616711.14960568514154879522434771210726012213854119 ^2 ::== 7898756441171288116946093202757.3173828125
t_ten increased 
using t_rst as 28104726366167111.4960568514154879531108388590610047685913742
using for fract 789875644117128811694609320275731.75
getting the part of 789875644117128811694609320275731.75 :: ad 33 and mad 34
i push_back a near value of 28104726366167111
stopping with ad 33 and mad of 34
    -----------------> 28104726366167111.4960568514154879531108388590610047685913742 ^2 ::== 789875644117128811694609320275731.75
t_ten increased 
breaking with xbrk of value 1

increasing the digits 10
-------------------------------------------------------
-------------------------------------------------------
times 10 7898756447 8679952140
main 88874.9483656671386535581641573476298262441652071777494035099 second 93166.2607385313065833677835530997052235799466537771368660446
main 7898756447 second 8679952140
times of 1.02391058075197104316704405420082908359094311578321772166824e-05
new times of 1.02391058075197104316704405420082908359094311578321772166824e-05
using 86799521406435649 * 1.02391058075197104316704405420082908359094311578321772166824e-05
888749483722.566677586640058493345704035708178952779334736078  with length of 60 and dot length 12 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 888749483722.566677586640058493345704035708178952779334736078 ^2 ::== 789875644817128811798410.682944696978665888309478759765625
 temp fract 0.682944696978665888309478759765625 temp int 789875644817128811798410
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887494837225.66677586640058493345725211531860310287811444141
using for fract 78987564481712881179841068.29446969926357269287109375
getting the part of 78987564481712881179841068.29446969926357269287109375 :: ad 26 and mad 34
    -----------------> 8887494837225.66677586640058493345725211531860310287811444141 ^2 ::== 78987564481712881179841068.29446969926357269287109375
t_ten increased 
using t_rst as 88874948372256.6677586640058493345725211531860310287811444141
using for fract 7898756448171288117984106829.4469699859619140625
getting the part of 7898756448171288117984106829.4469699859619140625 :: ad 28 and mad 34
    -----------------> 88874948372256.6677586640058493345725211531860310287811444141 ^2 ::== 7898756448171288117984106829.4469699859619140625
t_ten increased 
using t_rst as 888749483722566.677586640058493345725211531860310287811444141
using for fract 789875644817128811798410682944.697021484375
getting the part of 789875644817128811798410682944.697021484375 :: ad 30 and mad 34
    -----------------> 888749483722566.677586640058493345725211531860310287811444141 ^2 ::== 789875644817128811798410682944.697021484375
t_ten increased 
using t_rst as 8887494837225666.77586640058493345703527488410600199131295085
using for fract 78987564481712881179841068294469.6953125
getting the part of 78987564481712881179841068294469.6953125 :: ad 32 and mad 34
    -----------------> 8887494837225666.77586640058493345703527488410600199131295085 ^2 ::== 78987564481712881179841068294469.6953125
t_ten increased 
using t_rst as 88874948372256667.7586640058493345772916427449672482907772064
using for fract 7898756448171288117984106829446971
getting the part of 7898756448171288117984106829446971 :: ad 34 and mad 34
i push_back a near value of 88874948372256667
stopping with ad 34 and mad of 34
    -----------------> 88874948372256667.7586640058493345772916427449672482907772064 ^2 ::== 7898756448171288117984106829446971
t_ten increased 
breaking with xbrk of value 1

increasing the digits 11
-------------------------------------------------------
-------------------------------------------------------
times 11 78987564479 86799521406
main 281047.263781378949755947164086584628057414770980225006207723 second 294617.585025062616339367294152223960534373175264700595434118
main 78987564479.0000000000000000000000132348898008484427979425391 second 86799521406.0000000000000000000000132348898008484427979425391
times of 3.23788955548263670982696620983468690751745718952484475734741e-06
new times of 3.23788955548263670982696620983468690751745718952484475734741e-06
using 86799521406435649 * 3.23788955548263670982696620983468690751745718952484475734741e-06
281047263782.789533102903619286584006812249525095182001166449  with length of 60 and dot length 12 will move 48
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 281047263782.789533102903619286584006812249525095182001166449 ^2 ::== 78987564479792881179997.372242038734839297831058502197265625
 temp fract 0.372242038734839297831058502197265625 temp int 78987564479792881179997
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810472637827.89533102903619286584017400161365773936239520481
using for fract 7898756447979288117999737.224203874357044696807861328125
getting the part of 7898756447979288117999737.224203874357044696807861328125 :: ad 25 and mad 34
    -----------------> 2810472637827.89533102903619286584017400161365773936239520481 ^2 ::== 7898756447979288117999737.224203874357044696807861328125
t_ten increased 
using t_rst as 28104726378278.9533102903619286583991989172948144926067470806
using for fract 789875644797928811799973722.42038726806640625
getting the part of 789875644797928811799973722.42038726806640625 :: ad 27 and mad 34
    -----------------> 28104726378278.9533102903619286583991989172948144926067470806 ^2 ::== 789875644797928811799973722.42038726806640625
t_ten increased 
using t_rst as 281047263782789.533102903619286584019094227260282536917657126
using for fract 78987564479792881179997372242.0387420654296875
getting the part of 78987564479792881179997372242.0387420654296875 :: ad 29 and mad 34
    -----------------> 281047263782789.533102903619286584019094227260282536917657126 ^2 ::== 78987564479792881179997372242.0387420654296875
t_ten increased 
using t_rst as 2810472637827895.33102903619286584008252205535427492577582598
using for fract 7898756447979288117999737224203.8740234375
getting the part of 7898756447979288117999737224203.8740234375 :: ad 31 and mad 34
    -----------------> 2810472637827895.33102903619286584008252205535427492577582598 ^2 ::== 7898756447979288117999737224203.8740234375
t_ten increased 
using t_rst as 28104726378278953.3102903619286584008252205535427492577582598
using for fract 789875644797928811799973722420387.375
getting the part of 789875644797928811799973722420387.375 :: ad 33 and mad 34
i push_back a near value of 28104726378278953
stopping with ad 33 and mad of 34
    -----------------> 28104726378278953.3102903619286584008252205535427492577582598 ^2 ::== 789875644797928811799973722420387.375
t_ten increased 
breaking with xbrk of value 1

increasing the digits 12
-------------------------------------------------------
-------------------------------------------------------
times 12 789875644798 867995214064
main 888749.483711805033192538911846415414691237990836063595371033 second 931662.60741966026378467997428181248923810575096855132726497
main 789875644798 second 867995214063.999999999999999999999894120881593212457616459687
times of 1.02391058073999329220400441187842685149548636793310995607213e-06
new times of 1.02391058073999329220400441187842685149548636793310995607213e-06
using 86799521406435649 * 1.02391058073999329220400441187842685149548636793310995607213e-06
88874948371.2170047075466912055153303840262807994365701347306  with length of 60 and dot length 11 will move 49
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 88874948371.2170047075466912055153303840262807994365701347306 ^2 ::== 7898756447986488117999.99936096720648492919281125068664550781
 temp fract 0.9993609672064849291928112506866455078125 temp int 7898756447986488117999
before loop xstp is 0entering tens with lap of value 10
using t_rst as 888749483712.170047075466912055153303840262807994365701347306
using for fract 789875644798648811799999.936096720746718347072601318359375
getting the part of 789875644798648811799999.936096720746718347072601318359375 :: ad 24 and mad 34
    -----------------> 888749483712.170047075466912055153303840262807994365701347306 ^2 ::== 789875644798648811799999.936096720746718347072601318359375
t_ten increased 
using t_rst as 8887494837121.70047075466912055153367367733852066891131471493
using for fract 78987564479864881179999993.60967208445072174072265625
getting the part of 78987564479864881179999993.60967208445072174072265625 :: ad 26 and mad 34
    -----------------> 8887494837121.70047075466912055153367367733852066891131471493 ^2 ::== 78987564479864881179999993.60967208445072174072265625
t_ten increased 
using t_rst as 88874948371217.0047075466912055153299605098071722864006005693
using for fract 7898756447986488117999999360.9672069549560546875
getting the part of 7898756447986488117999999360.9672069549560546875 :: ad 28 and mad 34
    -----------------> 88874948371217.0047075466912055153299605098071722864006005693 ^2 ::== 7898756447986488117999999360.9672069549560546875
t_ten increased 
using t_rst as 888749483712170.047075466912055153353815206695998085706378333
using for fract 789875644798648811799999936096.7208251953125
getting the part of 789875644798648811799999936096.7208251953125 :: ad 30 and mad 34
    -----------------> 888749483712170.047075466912055153353815206695998085706378333 ^2 ::== 789875644798648811799999936096.7208251953125
t_ten increased 
using t_rst as 8887494837121700.47075466912055153288763076346867819665931165
using for fract 78987564479864881179999993609672.0625
getting the part of 78987564479864881179999993609672.0625 :: ad 32 and mad 34
    -----------------> 8887494837121700.47075466912055153288763076346867819665931165 ^2 ::== 78987564479864881179999993609672.0625
t_ten increased 
using t_rst as 88874948371217004.7075466912055153323457545866403961554169655
using for fract 7898756447986488117999999360967207
getting the part of 7898756447986488117999999360967207 :: ad 34 and mad 34
i push_back a near value of 88874948371217004
stopping with ad 34 and mad of 34
    -----------------> 88874948371217004.7075466912055153323457545866403961554169655 ^2 ::== 7898756447986488117999999360967207
t_ten increased 
breaking with xbrk of value 1

increasing the digits 13
-------------------------------------------------------
-------------------------------------------------------
times 13 7898756447985 8679952140643
main 2810472.63782891150921974012976007711959012414469458076681646 second 2946175.85025792375902026950199406032644431553232564589828169
main 7898756447984.9999999999999999999991529670527456996609316775 second 8679952140643.0000000000000000000008470329472543003390683225
times of 3.23788955548401815358640648274872969650676732112653199403353e-07
new times of 3.23788955548401815358640648274872969650676732112653199403353e-07
using 86799521406435649 * 3.23788955548401815358640648274872969650676732112653199403353e-07
28104726378.2909441760072942194557301794915365501792425817484  with length of 60 and dot length 11 will move 49
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 28104726378.2909441760072942194557301794915365501792425817484 ^2 ::== 789875644798602811800.000001653441358939744532108306884765625
 temp fract 1.653441358939744532108306884765625e-06 temp int 789875644798602811800
before loop xstp is 0entering tens with lap of value 10
using t_rst as 281047263782.909441760072942194557275325135763804906829932406
using for fract 78987564479860281180000.000165344114066101610660552978515625
getting the part of 78987564479860281180000.000165344114066101610660552978515625 :: ad 23 and mad 34
    -----------------> 281047263782.909441760072942194557275325135763804906829932406 ^2 ::== 78987564479860281180000.000165344114066101610660552978515625
t_ten increased 
using t_rst as 2810472637829.09441760072942194557296500959445162415306640469
using for fract 7898756447986028118000000.016534413211047649383544921875
getting the part of 7898756447986028118000000.016534413211047649383544921875 :: ad 25 and mad 34
    -----------------> 2810472637829.09441760072942194557296500959445162415306640469 ^2 ::== 7898756447986028118000000.016534413211047649383544921875
t_ten increased 
using t_rst as 28104726378290.9441760072942194557313441618390248422088006919
using for fract 789875644798602811800000001.65344142913818359375
getting the part of 789875644798602811800000001.65344142913818359375 :: ad 27 and mad 34
    -----------------> 28104726378290.9441760072942194557313441618390248422088006919 ^2 ::== 789875644798602811800000001.65344142913818359375
t_ten increased 
using t_rst as 281047263782909.441760072942194557293112827656145213950367179
using for fract 78987564479860281180000000165.34412384033203125
getting the part of 78987564479860281180000000165.34412384033203125 :: ad 29 and mad 34
    -----------------> 281047263782909.441760072942194557293112827656145213950367179 ^2 ::== 78987564479860281180000000165.34412384033203125
t_ten increased 
using t_rst as 2810472637829094.41760072942194557303954849381000258290441707
using for fract 7898756447986028118000000016534.4130859375
getting the part of 7898756447986028118000000016534.4130859375 :: ad 31 and mad 34
    -----------------> 2810472637829094.41760072942194557303954849381000258290441707 ^2 ::== 7898756447986028118000000016534.4130859375
t_ten increased 
using t_rst as 28104726378290944.1760072942194557295281232001116222818382084
using for fract 789875644798602811800000001653441.25
getting the part of 789875644798602811800000001653441.25 :: ad 33 and mad 34
i push_back a near value of 28104726378290944
stopping with ad 33 and mad of 34
    -----------------> 28104726378290944.1760072942194557295281232001116222818382084 ^2 ::== 789875644798602811800000001653441.25
t_ten increased 
breaking with xbrk of value 1

increasing the digits 14
-------------------------------------------------------
-------------------------------------------------------
times 14 78987564479856 86799521406435
main 8887494.83712120082601997411206890398653751051461725167339434 second 9316626.07419848100023471035854657629524539681368849527998144
main 78987564479856.00000000000000000001355252715606880542509316 second 86799521406435.00000000000000000001355252715606880542509316
times of 1.02391058073994338490832053641719710402803704584402830157588e-07
new times of 1.02391058073994338490832053641719710402803704584402830157588e-07
using 86799521406435649 * 1.02391058073994338490832053641719710402803704584402830157588e-07
8887494837.12126727781666413439458286436197946090223553916587  with length of 60 and dot length 10 will move 50
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 8887494837.12126727781666413439458286436197946090223553916587 ^2 ::== 78987564479857181180.0000000066589223024493549019098281860352
 temp fract 6.65892230244935490190982818603515625e-09 temp int 78987564479857181180
before loop xstp is 0entering tens with lap of value 10
using t_rst as 88874948371.212672778166641343945825334897344396911655906024
using for fract 7898756447985718118000.00000066589200287126004695892333984375
getting the part of 7898756447985718118000.00000066589200287126004695892333984375 :: ad 22 and mad 34
    -----------------> 88874948371.212672778166641343945825334897344396911655906024 ^2 ::== 7898756447985718118000.00000066589200287126004695892333984375
t_ten increased 
using t_rst as 888749483712.12672778166641343945825334897344396911655906024
using for fract 789875644798571811800000.000066589214839041233062744140625
getting the part of 789875644798571811800000.000066589214839041233062744140625 :: ad 24 and mad 34
    -----------------> 888749483712.12672778166641343945825334897344396911655906024 ^2 ::== 789875644798571811800000.000066589214839041233062744140625
t_ten increased 
using t_rst as 8887494837121.26727781666413439458316876444488041641989184427
using for fract 78987564479857181180000000.00665892660617828369140625
getting the part of 78987564479857181180000000.00665892660617828369140625 :: ad 26 and mad 34
    -----------------> 8887494837121.26727781666413439458316876444488041641989184427 ^2 ::== 78987564479857181180000000.00665892660617828369140625
t_ten increased 
using t_rst as 88874948371212.6727781666413439458249113808707697614863718627
using for fract 7898756447985718118000000000.6658916473388671875
getting the part of 7898756447985718118000000000.6658916473388671875 :: ad 28 and mad 34
    -----------------> 88874948371212.6727781666413439458249113808707697614863718627 ^2 ::== 7898756447985718118000000000.6658916473388671875
t_ten increased 
using t_rst as 888749483712126.727781666413439458276218863019835225713904947
using for fract 789875644798571811800000000066.5892333984375
getting the part of 789875644798571811800000000066.5892333984375 :: ad 30 and mad 34
    -----------------> 888749483712126.727781666413439458276218863019835225713904947 ^2 ::== 789875644798571811800000000066.5892333984375
t_ten increased 
using t_rst as 8887494837121267.27781666413439458276218863019835225713904947
using for fract 78987564479857181180000000006658.921875
getting the part of 78987564479857181180000000006658.921875 :: ad 32 and mad 34
    -----------------> 8887494837121267.27781666413439458276218863019835225713904947 ^2 ::== 78987564479857181180000000006658.921875
t_ten increased 
using t_rst as 88874948371212672.7781666413439458224177158740531012881547213
using for fract 7898756447985718118000000000665891
getting the part of 7898756447985718118000000000665891 :: ad 34 and mad 34
i push_back a near value of 88874948371212672
stopping with ad 34 and mad of 34
    -----------------> 88874948371212672.7781666413439458224177158740531012881547213 ^2 ::== 7898756447985718118000000000665891
t_ten increased 
breaking with xbrk of value 1

increasing the digits 15
-------------------------------------------------------
-------------------------------------------------------
times 15 789875644798564 867995214064356
main 28104726.3782902536907224066622973405033716981247311934855038 second 29461758.5025801879747494133796351390310025832389162481206313
main 789875644798564 second 867995214064356
times of 3.2378895554839404320027923515575538374558696562929228705993e-08
new times of 3.2378895554839404320027923515575538374558696562929228705993e-08
using 86799521406435649 * 3.2378895554839404320027923515575538374558696562929228705993e-08
2810472637.82902695563812285336054558059180445174756596271592  with length of 60 and dot length 10 will move 50
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 2810472637.82902695563812285336054558059180445174756596271592 ^2 ::== 7898756447985648918.00000000000296740410021811840124428272247
 temp fract 2.96740410021811840124428272247314453125e-12 temp int 7898756447985648918
before loop xstp is 0entering tens with lap of value 10
using t_rst as 28104726378.2902695563812285336054566330986570705033344985679
using for fract 789875644798564891800.000000000296836333291139453649520874023
getting the part of 789875644798564891800.000000000296836333291139453649520874023 :: ad 21 and mad 34
    -----------------> 28104726378.2902695563812285336054566330986570705033344985679 ^2 ::== 789875644798564891800.000000000296836333291139453649520874023
t_ten increased 
using t_rst as 281047263782.902695563812285336054533243762068583926350129332
using for fract 78987564479856489180000.000000029671355150640010833740234375
getting the part of 78987564479856489180000.000000029671355150640010833740234375 :: ad 23 and mad 34
    -----------------> 281047263782.902695563812285336054533243762068583926350129332 ^2 ::== 78987564479856489180000.000000029671355150640010833740234375
t_ten increased 
using t_rst as 2810472637829.02695563812285336054575595409431298943303545457
using for fract 7898756447985648918000000.0000029690563678741455078125
getting the part of 7898756447985648918000000.0000029690563678741455078125 :: ad 25 and mad 34
    -----------------> 2810472637829.02695563812285336054575595409431298943303545457 ^2 ::== 7898756447985648918000000.0000029690563678741455078125
t_ten increased 
using t_rst as 28104726378290.2695563812285336054550184421013669933131495782
using for fract 789875644798564891800000000.00029671192169189453125
getting the part of 789875644798564891800000000.00029671192169189453125 :: ad 27 and mad 34
    -----------------> 28104726378290.2695563812285336054550184421013669933131495782 ^2 ::== 789875644798564891800000000.00029671192169189453125
t_ten increased 
using t_rst as 281047263782902.695563812285336054570513211747773141269135522
using for fract 78987564479856489180000000000.02968597412109375
getting the part of 78987564479856489180000000000.02968597412109375 :: ad 29 and mad 34
    -----------------> 281047263782902.695563812285336054570513211747773141269135522 ^2 ::== 78987564479856489180000000000.02968597412109375
t_ten increased 
using t_rst as 2810472637829026.95563812285336054543408157435635530418949202
using for fract 7898756447985648918000000000002.966796875
getting the part of 7898756447985648918000000000002.966796875 :: ad 31 and mad 34
    -----------------> 2810472637829026.95563812285336054543408157435635530418949202 ^2 ::== 7898756447985648918000000000002.966796875
t_ten increased 
using t_rst as 28104726378290269.5563812285336054569429009575287636835128069
using for fract 789875644798564891800000000000296.875
getting the part of 789875644798564891800000000000296.875 :: ad 33 and mad 34
i push_back a near value of 28104726378290269
stopping with ad 33 and mad of 34
    -----------------> 28104726378290269.5563812285336054569429009575287636835128069 ^2 ::== 789875644798564891800000000000296.875
t_ten increased 
breaking with xbrk of value 1

increasing the digits 16
-------------------------------------------------------
-------------------------------------------------------
times 16 7898756447985644 8679952140643564
main 88874948.3712122557990214584688244176063058886493387089622331 second 93166260.7419851534743266072056557333250894051159104927023469
main 7898756447985644 second 8679952140643564.00000000000000000086736173798840354720596224
times of 1.02391058073993868714105927612075427542664097832726272279166e-08
new times of 1.02391058073993868714105927612075427542664097832726272279166e-08
using 86799521406435649 * 1.02391058073993868714105927612075427542664097832726272279166e-08
888749483.712122650142166851282725876697586302080215936438634  with length of 60 and dot length 9 will move 51
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 888749483.712122650142166851282725876697586302080215936438634 ^2 ::== 789875644798564563.800000000000024025226252888387534767389297
 temp fract 0.8000000000000240252262528883875347673892974853515625 temp int 789875644798564563
before loop xstp is 0entering tens with lap of value 10
using t_rst as 8887494837.12122650142166851282725959415647557382983423579503
using for fract 78987564479856456380.0000000000024158453015843406319618225098
getting the part of 78987564479856456380.0000000000024158453015843406319618225098 :: ad 20 and mad 34
    -----------------> 8887494837.12122650142166851282725959415647557382983423579503 ^2 ::== 78987564479856456380.0000000000024158453015843406319618225098
t_ten increased 
using t_rst as 88874948371.2122650142166851282725893241198553140769433866808
using for fract 7898756447985645638000.0000000002401066012680530548095703125
getting the part of 7898756447985645638000.0000000002401066012680530548095703125 :: ad 22 and mad 34
    -----------------> 88874948371.2122650142166851282725893241198553140769433866808 ^2 ::== 7898756447985645638000.0000000002401066012680530548095703125
t_ten increased 
using t_rst as 888749483712.122650142166851282725893241198553140769433866808
using for fract 789875644798564563800000.00000002398155629634857177734375
getting the part of 789875644798564563800000.00000002398155629634857177734375 :: ad 24 and mad 34
    -----------------> 888749483712.122650142166851282725893241198553140769433866808 ^2 ::== 789875644798564563800000.00000002398155629634857177734375
t_ten increased 
using t_rst as 8887494837121.22650142166851282725808537903827710735527034558
using for fract 78987564479856456380000000.000002384185791015625
getting the part of 78987564479856456380000000.000002384185791015625 :: ad 26 and mad 34
    -----------------> 8887494837121.22650142166851282725808537903827710735527034558 ^2 ::== 78987564479856456380000000.000002384185791015625
t_ten increased 
using t_rst as 88874948371212.2650142166851282725842419221717882749089767458
using for fract 7898756447985645638000000000.00023937225341796875
getting the part of 7898756447985645638000000000.00023937225341796875 :: ad 28 and mad 34
    -----------------> 88874948371212.2650142166851282725842419221717882749089767458 ^2 ::== 7898756447985645638000000000.00023937225341796875
t_ten increased 
using t_rst as 888749483712122.650142166851282725923734384654295581640326418
using for fract 789875644798564563800000000000.0240478515625
getting the part of 789875644798564563800000000000.0240478515625 :: ad 30 and mad 34
    -----------------> 888749483712122.650142166851282725923734384654295581640326418 ^2 ::== 789875644798564563800000000000.0240478515625
t_ten increased 
using t_rst as 8887494837121226.50142166851282725902050341204585492960177362
using for fract 78987564479856456380000000000002.40625
getting the part of 78987564479856456380000000000002.40625 :: ad 32 and mad 34
    -----------------> 8887494837121226.50142166851282725902050341204585492960177362 ^2 ::== 78987564479856456380000000000002.40625
t_ten increased 
using t_rst as 88874948371212265.0142166851282725936744810724121634848415852
using for fract 7898756447985645638000000000000241
getting the part of 7898756447985645638000000000000241 :: ad 34 and mad 34
i push_back a near value of 88874948371212265
stopping with ad 34 and mad of 34
    -----------------> 88874948371212265.0142166851282725936744810724121634848415852 ^2 ::== 7898756447985645638000000000000241
t_ten increased 
breaking with xbrk of value 1

increasing the digits 17
-------------------------------------------------------
-------------------------------------------------------
times 17 78987564479856441 86799521406435649
main 281047263.782902609848692074777662312617503294920350866148429 second 294617585.025801962906141971651471657401930999997685146907234
main 78987564479856441.0000000000000000138777878078144567552953959 second 86799521406435649.0000000000000000138777878078144567552953959
times of 3.2378895554839394444959625707755487565087240823887796307974e-09
new times of 3.2378895554839394444959625707755487565087240823887796307974e-09
using 86799521406435649 * 3.2378895554839394444959625707755487565087240823887796307974e-09
281047263.782902609848692074777662260918715010356121186685385  with length of 60 and dot length 9 will move 51
lap for tens is more than ten will lower it 

 trying to reach the main number 7898756447985644142144124141241248  main number intpart lenght 34 
 fract 0 int 7898756447985644142144124141241248
    -----------------> 281047263.782902609848692074777662260918715010356121186685385 ^2 ::== 78987564479856440.9999999999999999861222121921855432447046041
 temp fract 0.99999999999999998612221219218554324470460414886474609375 temp int 78987564479856440
before loop xstp is 0entering tens with lap of value 10
using t_rst as 2810472637.82902609848692074777662260918715010356121186685385
using for fract 7898756447985644099.99999999999999822364316059974953532218933
getting the part of 7898756447985644099.99999999999999822364316059974953532218933 :: ad 19 and mad 34
    -----------------> 2810472637.82902609848692074777662260918715010356121186685385 ^2 ::== 7898756447985644099.99999999999999822364316059974953532218933
t_ten increased 
using t_rst as 28104726378.2902609848692074777662277462327261416674684113559
using for fract 789875644798564409999.999999999999886313162278383970260620117
getting the part of 789875644798564409999.999999999999886313162278383970260620117 :: ad 21 and mad 34
    -----------------> 28104726378.2902609848692074777662277462327261416674684113559 ^2 ::== 789875644798564409999.999999999999886313162278383970260620117
t_ten increased 
using t_rst as 281047263782.902609848692074777662250992547659719789088228481
using for fract 78987564479856440999999.999999999985448084771633148193359375
getting the part of 78987564479856440999999.999999999985448084771633148193359375 :: ad 23 and mad 34
    -----------------> 281047263782.902609848692074777662250992547659719789088228481 ^2 ::== 78987564479856440999999.999999999985448084771633148193359375
t_ten increased 
using t_rst as 2810472637829.02609848692074777662261580459500398543326582512
using for fract 7898756447985644099999999.99999999813735485076904296875
getting the part of 7898756447985644099999999.99999999813735485076904296875 :: ad 25 and mad 34
    -----------------> 2810472637829.02609848692074777662261580459500398543326582512 ^2 ::== 7898756447985644099999999.99999999813735485076904296875
t_ten increased 
using t_rst as 28104726378290.2609848692074777662270050788972941546717265737
using for fract 789875644798564409999999999.99999988079071044921875
getting the part of 789875644798564409999999999.99999988079071044921875 :: ad 27 and mad 34
    -----------------> 28104726378290.2609848692074777662270050788972941546717265737 ^2 ::== 789875644798564409999999999.99999988079071044921875
t_ten increased 
using t_rst as 281047263782902.609848692074777662256498261816872741292172577
using for fract 78987564479856440999999999999.9999847412109375
getting the part of 78987564479856440999999999999.9999847412109375 :: ad 29 and mad 34
    -----------------> 281047263782902.609848692074777662256498261816872741292172577 ^2 ::== 78987564479856440999999999999.9999847412109375
t_ten increased 
using t_rst as 2810472637829026.09848692074777662267340283541727785632247105
using for fract 7898756447985644099999999999999.9990234375
getting the part of 7898756447985644099999999999999.9990234375 :: ad 31 and mad 34
    -----------------> 2810472637829026.09848692074777662267340283541727785632247105 ^2 ::== 7898756447985644099999999999999.9990234375
t_ten increased 
using t_rst as 28104726378290260.9848692074777662258666666161843750160187483
using for fract 789875644798564409999999999999999.875
getting the part of 789875644798564409999999999999999.875 :: ad 33 and mad 34
i push_back a near value of 28104726378290260
stopping with ad 33 and mad of 34
    -----------------> 28104726378290260.9848692074777662258666666161843750160187483 ^2 ::== 789875644798564409999999999999999.875
t_ten increased 
breaking with xbrk of value 1

increasing the digits 18


Approximated with value : 86799521406435649
entered show_vcc function @ vcc_part_one class 
----------------- v_cc vector reports -------- 
u enter as approximation 86799521406435649 with main number to find the power 7898756447985644142144124141241248 with psifia 34
as of the entered 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7534156916386280466238194778051201
with string of it 7534156916386280466238194778051201
leaving function fcnt @@ eql_digits_cnt.cpp/h 
86799521406435649 ^2 ::== 7534156916386280466238194778051201               me idia psifia 1               me diafora 364599531599363675905929363190047
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875625597127954545791937041316
with string of it 789875625597127954545791937041316
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726036685146 ^2 ::== 789875625597127954545791937041316            me idia psifia 7            me diafora 7108880822388516187598332204199932
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644117128783811525178086321
with string of it 789875644117128783811525178086321
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726366167111 ^2 ::== 789875644117128783811525178086321            me idia psifia 9            me diafora 7108880803868515358332598963154927
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644797928794358722282776209
with string of it 789875644797928794358722282776209
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378278953 ^2 ::== 789875644797928794358722282776209            me idia psifia 11            me diafora 7108880803187715347785401858465039
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564354641040810867600
with string of it 789875644798564354641040810867600
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290260 ^2 ::== 789875644798564354641040810867600            me idia psifia 15            me diafora 7108880803187079787503083330373648
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798564860526115620092361
with string of it 789875644798564860526115620092361
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290269 ^2 ::== 789875644798564860526115620092361            me idia psifia 15            me diafora 7108880803187079281618008521148887
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789875644798602801906726312411136
with string of it 789875644798602801906726312411136
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104726378290944 ^2 ::== 789875644798602801906726312411136            me idia psifia 12            me diafora 7108880803187041340237397828830112
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 789879489614818295019514215051241
with string of it 789879489614818295019514215051241
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28104794779802579 ^2 ::== 789879489614818295019514215051241            me idia psifia 5            me diafora 7108876958370825847124609926190007
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 790812398083352955744720923914369
with string of it 790812398083352955744720923914369
leaving function fcnt @@ eql_digits_cnt.cpp/h 
28121386844950463 ^2 ::== 790812398083352955744720923914369            me idia psifia 1            me diafora 7107944049902291186399403217326879
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898753895969548833749262026618769
with string of it 7898753895969548833749262026618769
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874934013868887 ^2 ::== 7898753895969548833749262026618769            me idia psifia 6            me diafora 2552016095308394862114622479
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645635472985686430225
with string of it 7898756447985645635472985686430225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212265 ^2 ::== 7898756447985645635472985686430225            me idia psifia 15            me diafora 1493328861545188977
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985717979680959853379584
with string of it 7898756447985717979680959853379584
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371212672 ^2 ::== 7898756447985717979680959853379584            me idia psifia 13            me diafora 73837536835712138336
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447986487992233648058736016
with string of it 7898756447986487992233648058736016
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948371217004 ^2 ::== 7898756447986487992233648058736016            me idia psifia 12            me diafora 843850089523917494768
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756448171287983131658125948889
with string of it 7898756448171287983131658125948889
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948372256667 ^2 ::== 7898756448171287983131658125948889            me idia psifia 9            me diafora 185643840987533984707641
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756473971288067896521218433761
with string of it 7898756473971288067896521218433761
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88874948517404431 ^2 ::== 7898756473971288067896521218433761            me idia psifia 8            me diafora 25985643925752397077192513
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7899733015162758827197973349368329
with string of it 7899733015162758827197973349368329
leaving function fcnt @@ eql_digits_cnt.cpp/h 
88880442253415677 ^2 ::== 7899733015162758827197973349368329            me idia psifia 3            me diafora 976567177114685053849208127081
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7945703616524200473966602531561041
with string of it 7945703616524200473966602531561041
leaving function fcnt @@ eql_digits_cnt.cpp/h 
89138676322481929 ^2 ::== 7945703616524200473966602531561041            me idia psifia 1            me diafora 46947168538556331822478390319793
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 82404841272974942512080397906040448
with string of it 82404841272974942512080397906040448
leaving function fcnt @@ eql_digits_cnt.cpp/h 
287062434451070143 ^2 ::== 82404841272974942512080397906040448            me idia psifia 0            me diafora 74506084824989298369936273764799200


-------------------------Approximation Result Set-----------------------------------------------------

possible approximation < ::== 88874948371212265 ^2 7898756447985645635472985686430225               me idia psifia 15               me diafora 1493328861545188977


possible approximation > ::== 88874948371212265 ^2 7898756447985645635472985686430225               me idia psifia 15               me diafora 1493328861545188977

----removing using main number 7898756447985644142144124141241248

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645457723088944005696
with string of it 7898756447985645457723088944005696
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212264 with ^2  7898756447985645457723088944005696             me idia psifia 15             me diafora 1315578964802764448

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645279973192201581169
with string of it 7898756447985645279973192201581169
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212263 with ^2  7898756447985645279973192201581169             me idia psifia 15             me diafora 1137829068060339921

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645102223295459156644
with string of it 7898756447985645102223295459156644
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212262 with ^2  7898756447985645102223295459156644             me idia psifia 15             me diafora 960079171317915396

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644924473398716732121
with string of it 7898756447985644924473398716732121
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212261 with ^2  7898756447985644924473398716732121             me idia psifia 16             me diafora 782329274575490873

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644746723501974307600
with string of it 7898756447985644746723501974307600
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212260 with ^2  7898756447985644746723501974307600             me idia psifia 16             me diafora 604579377833066352

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644568973605231883081
with string of it 7898756447985644568973605231883081
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212259 with ^2  7898756447985644568973605231883081             me idia psifia 16             me diafora 426829481090641833

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644391223708489458564
with string of it 7898756447985644391223708489458564
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212258 with ^2  7898756447985644391223708489458564             me idia psifia 16             me diafora 249079584348217316

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644213473811747034049
with string of it 7898756447985644213473811747034049
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212257 with ^2  7898756447985644213473811747034049             me idia psifia 16             me diafora 71329687605792801

entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644035723915004609536
with string of it 7898756447985644035723915004609536
leaving function fcnt @@ eql_digits_cnt.cpp/h 
possible approximation of minus ::== 88874948371212256 with ^2  7898756447985644035723915004609536             me idia psifia 16             me diafora 106420209136631712
will pass value of 88874948371212256



------------------------Bee-----------------------------

-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 86799521406435649

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 86799521406435649 
     doted 0 
     makes 86799521406435649

result 91000000000000000 
     doted 0.95788689608001253983360356869525276124477386474609375 
     makes 91000000000000000.9578868960800125398336035686952527612447739


for the integer string 91000000000000000.000000
the numbers are 17
the retrievable integer digit is 0

entering with number of 0.95788689608001253983360356869525276124477386474609375
recheck values of 86799521406435649 and result of 7534156916386280466238194778051201 with intpart 7534156916386280466238194778051201

     ----> using 0.95788689608001253983360356869525276124477386474609375 rst is 0.478943448040006269916801784347626380622386932373046875
     ----> using 0.478943448040006269916801784347626380622386932373046875 with intpart 0 and fract 0.478943448040006269916801784347626380622386932373046875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7534156916386280549382318919292450
with string of it 7534156916386280549382318919292450
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 86799521406435649.4789434480400062699168017843476263806223869 sq of rst 7534156916386280549382318919292450
                     with intpart 7534156916386280549382318919292450 and other part 0
                     the int string is 0.478943

     ----> using 0.478943448040006269916801784347626380622386932373046875 rst is 0.2394717240200031349584008921738131903111934661865234375
     ----> using 0.2394717240200031349584008921738131903111934661865234375 with intpart 0 and fract 0.2394717240200031349584008921738131903111934661865234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7534156916386280507810256848671825
with string of it 7534156916386280507810256848671825
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 86799521406435649.2394717240200031349584008921738131903111935 sq of rst 7534156916386280507810256848671825
                     with intpart 7534156916386280507810256848671825 and other part 0
                     the int string is 0.239472

     ----> using 0.2394717240200031349584008921738131903111934661865234375 rst is 0.11973586201000156747920044608690659515559673309326171875
     ----> using 0.11973586201000156747920044608690659515559673309326171875 with intpart 0 and fract 0.11973586201000156747920044608690659515559673309326171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7534156916386280487024225813361513
with string of it 7534156916386280487024225813361513
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 86799521406435649.1197358620100015674792004460869065951555967 sq of rst 7534156916386280487024225813361513
                     with intpart 7534156916386280487024225813361513 and other part 0
                     the int string is 0.119736

     ----> using 0.11973586201000156747920044608690659515559673309326171875 rst is 0.059867931005000783739600223043453297577798366546630859375
     ----> using 0.059867931005000783739600223043453297577798366546630859375 with intpart 0 and fract 0.059867931005000783739600223043453297577798366546630859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7534156916386280476631210295706358
with string of it 7534156916386280476631210295706358
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 1
                     with combination da_rst 86799521406435649.0598679310050007906784941269506816752254963 sq of rst 7534156916386280476631210295706358
                     with intpart 7534156916386280476631210295706358 and other part 0
                     the int string is 0.059868


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212265

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212265 
     doted 0 
     makes 88874948371212265

result 88874948371212248 
     doted 0.19741514439070732833680921203267644159495830535888671875 
     makes 88874948371212248.1974151443907073283368092120326764415949583


for the integer string 88874948371212248.000000
the numbers are 17
the retrievable integer digit is 8

entering with number of 8.19741514439070732833680921203267644159495830535888671875
recheck values of 88874948371212265 and result of 7898756447985645635472985686430225 with intpart 7898756447985645635472985686430225

recheck power 88874948371212265 of result 7898756447985645635472985686430225
lowering second to value of 88874948371212265

     ----> using 8.19741514439070732833680921203267644159495830535888671875 rst is 4.098707572195353664168404606016338220797479152679443359375
     ----> using 4.098707572195353664168404606016338220797479152679443359375 with intpart 4 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 4.098708

from new int t  of 8 ---> 7 with 7.19741514439070732833680921203267644159495830535888671875
     ----> using 7.19741514439070732833680921203267644159495830535888671875 rst is 3.598707572195353664168404606016338220797479152679443359375
     ----> using 3.598707572195353664168404606016338220797479152679443359375 with intpart 3 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 3.598708

     ----> using 3.598707572195353664168404606016338220797479152679443359375 rst is 1.7993537860976768320842023030081691103987395763397216796875
     ----> using 1.7993537860976768320842023030081691103987395763397216796875 with intpart 1 and fract 0.7993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645599808141883533857
with string of it 7898756447985645599808141883533857
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.7993537860976768355536492549617832992225885 sq of rst 7898756447985645599808141883533857
                     with intpart 7898756447985645599808141883533857 and other part 0
                     the int string is 1.799354

     ----> using 1.7993537860976768320842023030081691103987395763397216796875 rst is 0.89967689304883841604210115150408455519936978816986083984375
     ----> using 0.89967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.89967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645617640563784982040
with string of it 7898756447985645617640563784982040
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.8996768930488384108379307235736632719635963 sq of rst 7898756447985645617640563784982040
                     with intpart 7898756447985645617640563784982040 and other part 0
                     the int string is 0.899677

     ----> using 0.89967689304883841604210115150408455519936978816986083984375 rst is 0.449838446524419208021050575752042277599684894084930419921875
     ----> using 0.449838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.449838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645537681826364493868
with string of it 7898756447985645537681826364493868
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.4498384465244192054189653617868316359817982 sq of rst 7898756447985645537681826364493868
                     with intpart 7898756447985645537681826364493868 and other part 0
                     the int string is 0.449838

     ----> using 0.449838446524419208021050575752042277599684894084930419921875 rst is 0.224919223262209604010525287876021138799842447042465209960938
     ----> using 0.224919223262209604010525287876021138799842447042465209960938 with intpart 0 and fract 0.224919223262209604010525287876021138799842447042465209960938
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645497702457654249782
with string of it 7898756447985645497702457654249782
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.2249192232622096027094826808934158179908991 sq of rst 7898756447985645497702457654249782
                     with intpart 7898756447985645497702457654249782 and other part 0
                     the int string is 0.224919

     ----> using 0.224919223262209604010525287876021138799842447042465209960938 rst is 0.112459611631104802005262643938010569399921223521232604980469
     ----> using 0.112459611631104802005262643938010569399921223521232604980469 with intpart 0 and fract 0.112459611631104802005262643938010569399921223521232604980469
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645477712773299127740
with string of it 7898756447985645477712773299127740
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1124596116311048082936352443539362866431475 sq of rst 7898756447985645477712773299127740
                     with intpart 7898756447985645477712773299127740 and other part 0
                     the int string is 0.112460

     ----> using 0.112459611631104802005262643938010569399921223521232604980469 rst is 0.0562298058155524010026313219690052846999606117606163024902344
     ----> using 0.0562298058155524010026313219690052846999606117606163024902344 with intpart 0 and fract 0.0562298058155524010026313219690052846999606117606163024902344
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645467717931121566717
with string of it 7898756447985645467717931121566717
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0562298058155523972079237182697397656738758 sq of rst 7898756447985645467717931121566717
                     with intpart 7898756447985645467717931121566717 and other part 0
                     the int string is 0.056230

from new int t  of 7 ---> 6 with 6.19741514439070732833680921203267644159495830535888671875
     ----> using 6.19741514439070732833680921203267644159495830535888671875 rst is 3.098707572195353664168404606016338220797479152679443359375
     ----> using 3.098707572195353664168404606016338220797479152679443359375 with intpart 3 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 3.098708

from new int t  of 6 ---> 5 with 5.19741514439070732833680921203267644159495830535888671875
     ----> using 5.19741514439070732833680921203267644159495830535888671875 rst is 2.598707572195353664168404606016338220797479152679443359375
     ----> using 2.598707572195353664168404606016338220797479152679443359375 with intpart 2 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 2.598708

     ----> using 2.598707572195353664168404606016338220797479152679443359375 rst is 1.2993537860976768320842023030081691103987395763397216796875
     ----> using 1.2993537860976768320842023030081691103987395763397216796875 with intpart 1 and fract 0.2993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645510933193512321593
with string of it 7898756447985645510933193512321593
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.2993537860976768355536492549617832992225885 sq of rst 7898756447985645510933193512321593
                     with intpart 7898756447985645510933193512321593 and other part 0
                     the int string is 1.299354

     ----> using 1.2993537860976768320842023030081691103987395763397216796875 rst is 0.64967689304883841604210115150408455519936978816986083984375
     ----> using 0.64967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.64967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645573203089599375908
with string of it 7898756447985645573203089599375908
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.6496768930488384108379307235736632719635963 sq of rst 7898756447985645573203089599375908
                     with intpart 7898756447985645573203089599375908 and other part 0
                     the int string is 0.649677

     ----> using 0.64967689304883841604210115150408455519936978816986083984375 rst is 0.324838446524419208021050575752042277599684894084930419921875
     ----> using 0.324838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.324838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645515463089271690802
with string of it 7898756447985645515463089271690802
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.3248384465244192054189653617868316359817982 sq of rst 7898756447985645515463089271690802
                     with intpart 7898756447985645515463089271690802 and other part 0
                     the int string is 0.324838

     ----> using 0.324838446524419208021050575752042277599684894084930419921875 rst is 0.162419223262209604010525287876021138799842447042465209960938
     ----> using 0.162419223262209604010525287876021138799842447042465209960938 with intpart 0 and fract 0.162419223262209604010525287876021138799842447042465209960938
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645486593089107848249
with string of it 7898756447985645486593089107848249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1624192232622096027094826808934158179908991 sq of rst 7898756447985645486593089107848249
                     with intpart 7898756447985645486593089107848249 and other part 0
                     the int string is 0.162419

     ----> using 0.162419223262209604010525287876021138799842447042465209960938 rst is 0.0812096116311048020052626439380105693999212235212326049804688
     ----> using 0.0812096116311048020052626439380105693999212235212326049804688 with intpart 0 and fract 0.0812096116311048020052626439380105693999212235212326049804688
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645472158089025926974
with string of it 7898756447985645472158089025926974
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0812096116311048082936352443539362866431475 sq of rst 7898756447985645472158089025926974
                     with intpart 7898756447985645472158089025926974 and other part 0
                     the int string is 0.081210

from new int t  of 5 ---> 4 with 4.19741514439070732833680921203267644159495830535888671875
     ----> using 4.19741514439070732833680921203267644159495830535888671875 rst is 2.098707572195353664168404606016338220797479152679443359375
     ----> using 2.098707572195353664168404606016338220797479152679443359375 with intpart 2 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.19741514439070732833680921203267644159495830535888671875
     ----> using 3.19741514439070732833680921203267644159495830535888671875 rst is 1.598707572195353664168404606016338220797479152679443359375
     ----> using 1.598707572195353664168404606016338220797479152679443359375 with intpart 1 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 1.598708

     ----> using 1.598707572195353664168404606016338220797479152679443359375 rst is 0.7993537860976768320842023030081691103987395763397216796875
     ----> using 0.7993537860976768320842023030081691103987395763397216796875 with intpart 0 and fract 0.7993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645599808141883533857
with string of it 7898756447985645599808141883533857
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.7993537860976768355536492549617832992225885 sq of rst 7898756447985645599808141883533857
                     with intpart 7898756447985645599808141883533857 and other part 0
                     the int string is 0.799354

     ----> using 0.7993537860976768320842023030081691103987395763397216796875 rst is 0.39967689304883841604210115150408455519936978816986083984375
     ----> using 0.39967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.39967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645528765615413769775
with string of it 7898756447985645528765615413769775
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.3996768930488384108379307235736632719635963 sq of rst 7898756447985645528765615413769775
                     with intpart 7898756447985645528765615413769775 and other part 0
                     the int string is 0.399677

     ----> using 0.39967689304883841604210115150408455519936978816986083984375 rst is 0.199838446524419208021050575752042277599684894084930419921875
     ----> using 0.199838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.199838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645493244352178887736
with string of it 7898756447985645493244352178887736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1998384465244192054189653617868316359817982 sq of rst 7898756447985645493244352178887736
                     with intpart 7898756447985645493244352178887736 and other part 0
                     the int string is 0.199838

     ----> using 0.199838446524419208021050575752042277599684894084930419921875 rst is 0.0999192232622096040105252878760211387998424470424652099609375
     ----> using 0.0999192232622096040105252878760211387998424470424652099609375 with intpart 0 and fract 0.0999192232622096040105252878760211387998424470424652099609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475483720561446716
with string of it 7898756447985645475483720561446716
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0999192232622096027094826808934158179908991 sq of rst 7898756447985645475483720561446716
                     with intpart 7898756447985645475483720561446716 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.19741514439070732833680921203267644159495830535888671875
     ----> using 2.19741514439070732833680921203267644159495830535888671875 rst is 1.098707572195353664168404606016338220797479152679443359375
     ----> using 1.098707572195353664168404606016338220797479152679443359375 with intpart 1 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.19741514439070732833680921203267644159495830535888671875
     ----> using 1.19741514439070732833680921203267644159495830535888671875 rst is 0.598707572195353664168404606016338220797479152679443359375
     ----> using 0.598707572195353664168404606016338220797479152679443359375 with intpart 0 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 0.598708

     ----> using 0.598707572195353664168404606016338220797479152679443359375 rst is 0.2993537860976768320842023030081691103987395763397216796875
     ----> using 0.2993537860976768320842023030081691103987395763397216796875 with intpart 0 and fract 0.2993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645510933193512321593
with string of it 7898756447985645510933193512321593
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.2993537860976768355536492549617832992225885 sq of rst 7898756447985645510933193512321593
                     with intpart 7898756447985645510933193512321593 and other part 0
                     the int string is 0.299354

     ----> using 0.2993537860976768320842023030081691103987395763397216796875 rst is 0.14967689304883841604210115150408455519936978816986083984375
     ----> using 0.14967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.14967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645484328141228163643
with string of it 7898756447985645484328141228163643
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1496768930488384108379307235736632719635963 sq of rst 7898756447985645484328141228163643
                     with intpart 7898756447985645484328141228163643 and other part 0
                     the int string is 0.149677

     ----> using 0.14967689304883841604210115150408455519936978816986083984375 rst is 0.074838446524419208021050575752042277599684894084930419921875
     ----> using 0.074838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.074838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645471025615086084670
with string of it 7898756447985645471025615086084670
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0748384465244192054189653617868316359817982 sq of rst 7898756447985645471025615086084670
                     with intpart 7898756447985645471025615086084670 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.19741514439070732833680921203267644159495830535888671875
     ----> using 0.19741514439070732833680921203267644159495830535888671875 rst is 0.098707572195353664168404606016338220797479152679443359375
     ----> using 0.098707572195353664168404606016338220797479152679443359375 with intpart 0 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212265

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212265 
     doted 0 
     makes 88874948371212265

result 88874948371212248 
     doted 0.19741514439070732833680921203267644159495830535888671875 
     makes 88874948371212248.1974151443907073283368092120326764415949583


for the integer string 88874948371212248.000000
the numbers are 17
the retrievable integer digit is 8

entering with number of 8.19741514439070732833680921203267644159495830535888671875
recheck values of 88874948371212265 and result of 7898756447985645635472985686430225 with intpart 7898756447985645635472985686430225

recheck power 88874948371212265 of result 7898756447985645635472985686430225
lowering second to value of 88874948371212265

     ----> using 8.19741514439070732833680921203267644159495830535888671875 rst is 4.098707572195353664168404606016338220797479152679443359375
     ----> using 4.098707572195353664168404606016338220797479152679443359375 with intpart 4 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 4.098708

from new int t  of 8 ---> 7 with 7.19741514439070732833680921203267644159495830535888671875
     ----> using 7.19741514439070732833680921203267644159495830535888671875 rst is 3.598707572195353664168404606016338220797479152679443359375
     ----> using 3.598707572195353664168404606016338220797479152679443359375 with intpart 3 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 3.598708

     ----> using 3.598707572195353664168404606016338220797479152679443359375 rst is 1.7993537860976768320842023030081691103987395763397216796875
     ----> using 1.7993537860976768320842023030081691103987395763397216796875 with intpart 1 and fract 0.7993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645599808141883533857
with string of it 7898756447985645599808141883533857
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.7993537860976768355536492549617832992225885 sq of rst 7898756447985645599808141883533857
                     with intpart 7898756447985645599808141883533857 and other part 0
                     the int string is 1.799354

     ----> using 1.7993537860976768320842023030081691103987395763397216796875 rst is 0.89967689304883841604210115150408455519936978816986083984375
     ----> using 0.89967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.89967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645617640563784982040
with string of it 7898756447985645617640563784982040
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.8996768930488384108379307235736632719635963 sq of rst 7898756447985645617640563784982040
                     with intpart 7898756447985645617640563784982040 and other part 0
                     the int string is 0.899677

     ----> using 0.89967689304883841604210115150408455519936978816986083984375 rst is 0.449838446524419208021050575752042277599684894084930419921875
     ----> using 0.449838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.449838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645537681826364493868
with string of it 7898756447985645537681826364493868
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.4498384465244192054189653617868316359817982 sq of rst 7898756447985645537681826364493868
                     with intpart 7898756447985645537681826364493868 and other part 0
                     the int string is 0.449838

     ----> using 0.449838446524419208021050575752042277599684894084930419921875 rst is 0.224919223262209604010525287876021138799842447042465209960938
     ----> using 0.224919223262209604010525287876021138799842447042465209960938 with intpart 0 and fract 0.224919223262209604010525287876021138799842447042465209960938
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645497702457654249782
with string of it 7898756447985645497702457654249782
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.2249192232622096027094826808934158179908991 sq of rst 7898756447985645497702457654249782
                     with intpart 7898756447985645497702457654249782 and other part 0
                     the int string is 0.224919

     ----> using 0.224919223262209604010525287876021138799842447042465209960938 rst is 0.112459611631104802005262643938010569399921223521232604980469
     ----> using 0.112459611631104802005262643938010569399921223521232604980469 with intpart 0 and fract 0.112459611631104802005262643938010569399921223521232604980469
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645477712773299127740
with string of it 7898756447985645477712773299127740
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1124596116311048082936352443539362866431475 sq of rst 7898756447985645477712773299127740
                     with intpart 7898756447985645477712773299127740 and other part 0
                     the int string is 0.112460

     ----> using 0.112459611631104802005262643938010569399921223521232604980469 rst is 0.0562298058155524010026313219690052846999606117606163024902344
     ----> using 0.0562298058155524010026313219690052846999606117606163024902344 with intpart 0 and fract 0.0562298058155524010026313219690052846999606117606163024902344
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645467717931121566717
with string of it 7898756447985645467717931121566717
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0562298058155523972079237182697397656738758 sq of rst 7898756447985645467717931121566717
                     with intpart 7898756447985645467717931121566717 and other part 0
                     the int string is 0.056230

from new int t  of 7 ---> 6 with 6.19741514439070732833680921203267644159495830535888671875
     ----> using 6.19741514439070732833680921203267644159495830535888671875 rst is 3.098707572195353664168404606016338220797479152679443359375
     ----> using 3.098707572195353664168404606016338220797479152679443359375 with intpart 3 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 3.098708

from new int t  of 6 ---> 5 with 5.19741514439070732833680921203267644159495830535888671875
     ----> using 5.19741514439070732833680921203267644159495830535888671875 rst is 2.598707572195353664168404606016338220797479152679443359375
     ----> using 2.598707572195353664168404606016338220797479152679443359375 with intpart 2 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 2.598708

     ----> using 2.598707572195353664168404606016338220797479152679443359375 rst is 1.2993537860976768320842023030081691103987395763397216796875
     ----> using 1.2993537860976768320842023030081691103987395763397216796875 with intpart 1 and fract 0.2993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645510933193512321593
with string of it 7898756447985645510933193512321593
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.2993537860976768355536492549617832992225885 sq of rst 7898756447985645510933193512321593
                     with intpart 7898756447985645510933193512321593 and other part 0
                     the int string is 1.299354

     ----> using 1.2993537860976768320842023030081691103987395763397216796875 rst is 0.64967689304883841604210115150408455519936978816986083984375
     ----> using 0.64967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.64967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645573203089599375908
with string of it 7898756447985645573203089599375908
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.6496768930488384108379307235736632719635963 sq of rst 7898756447985645573203089599375908
                     with intpart 7898756447985645573203089599375908 and other part 0
                     the int string is 0.649677

     ----> using 0.64967689304883841604210115150408455519936978816986083984375 rst is 0.324838446524419208021050575752042277599684894084930419921875
     ----> using 0.324838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.324838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645515463089271690802
with string of it 7898756447985645515463089271690802
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.3248384465244192054189653617868316359817982 sq of rst 7898756447985645515463089271690802
                     with intpart 7898756447985645515463089271690802 and other part 0
                     the int string is 0.324838

     ----> using 0.324838446524419208021050575752042277599684894084930419921875 rst is 0.162419223262209604010525287876021138799842447042465209960938
     ----> using 0.162419223262209604010525287876021138799842447042465209960938 with intpart 0 and fract 0.162419223262209604010525287876021138799842447042465209960938
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645486593089107848249
with string of it 7898756447985645486593089107848249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1624192232622096027094826808934158179908991 sq of rst 7898756447985645486593089107848249
                     with intpart 7898756447985645486593089107848249 and other part 0
                     the int string is 0.162419

     ----> using 0.162419223262209604010525287876021138799842447042465209960938 rst is 0.0812096116311048020052626439380105693999212235212326049804688
     ----> using 0.0812096116311048020052626439380105693999212235212326049804688 with intpart 0 and fract 0.0812096116311048020052626439380105693999212235212326049804688
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645472158089025926974
with string of it 7898756447985645472158089025926974
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0812096116311048082936352443539362866431475 sq of rst 7898756447985645472158089025926974
                     with intpart 7898756447985645472158089025926974 and other part 0
                     the int string is 0.081210

from new int t  of 5 ---> 4 with 4.19741514439070732833680921203267644159495830535888671875
     ----> using 4.19741514439070732833680921203267644159495830535888671875 rst is 2.098707572195353664168404606016338220797479152679443359375
     ----> using 2.098707572195353664168404606016338220797479152679443359375 with intpart 2 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.19741514439070732833680921203267644159495830535888671875
     ----> using 3.19741514439070732833680921203267644159495830535888671875 rst is 1.598707572195353664168404606016338220797479152679443359375
     ----> using 1.598707572195353664168404606016338220797479152679443359375 with intpart 1 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 1.598708

     ----> using 1.598707572195353664168404606016338220797479152679443359375 rst is 0.7993537860976768320842023030081691103987395763397216796875
     ----> using 0.7993537860976768320842023030081691103987395763397216796875 with intpart 0 and fract 0.7993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645599808141883533857
with string of it 7898756447985645599808141883533857
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.7993537860976768355536492549617832992225885 sq of rst 7898756447985645599808141883533857
                     with intpart 7898756447985645599808141883533857 and other part 0
                     the int string is 0.799354

     ----> using 0.7993537860976768320842023030081691103987395763397216796875 rst is 0.39967689304883841604210115150408455519936978816986083984375
     ----> using 0.39967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.39967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645528765615413769775
with string of it 7898756447985645528765615413769775
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.3996768930488384108379307235736632719635963 sq of rst 7898756447985645528765615413769775
                     with intpart 7898756447985645528765615413769775 and other part 0
                     the int string is 0.399677

     ----> using 0.39967689304883841604210115150408455519936978816986083984375 rst is 0.199838446524419208021050575752042277599684894084930419921875
     ----> using 0.199838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.199838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645493244352178887736
with string of it 7898756447985645493244352178887736
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1998384465244192054189653617868316359817982 sq of rst 7898756447985645493244352178887736
                     with intpart 7898756447985645493244352178887736 and other part 0
                     the int string is 0.199838

     ----> using 0.199838446524419208021050575752042277599684894084930419921875 rst is 0.0999192232622096040105252878760211387998424470424652099609375
     ----> using 0.0999192232622096040105252878760211387998424470424652099609375 with intpart 0 and fract 0.0999192232622096040105252878760211387998424470424652099609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475483720561446716
with string of it 7898756447985645475483720561446716
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0999192232622096027094826808934158179908991 sq of rst 7898756447985645475483720561446716
                     with intpart 7898756447985645475483720561446716 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.19741514439070732833680921203267644159495830535888671875
     ----> using 2.19741514439070732833680921203267644159495830535888671875 rst is 1.098707572195353664168404606016338220797479152679443359375
     ----> using 1.098707572195353664168404606016338220797479152679443359375 with intpart 1 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.19741514439070732833680921203267644159495830535888671875
     ----> using 1.19741514439070732833680921203267644159495830535888671875 rst is 0.598707572195353664168404606016338220797479152679443359375
     ----> using 0.598707572195353664168404606016338220797479152679443359375 with intpart 0 and fract 0.598707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645564143298080637490
with string of it 7898756447985645564143298080637490
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.5987075721953536711072985099235665984451771 sq of rst 7898756447985645564143298080637490
                     with intpart 7898756447985645564143298080637490 and other part 0
                     the int string is 0.598708

     ----> using 0.598707572195353664168404606016338220797479152679443359375 rst is 0.2993537860976768320842023030081691103987395763397216796875
     ----> using 0.2993537860976768320842023030081691103987395763397216796875 with intpart 0 and fract 0.2993537860976768320842023030081691103987395763397216796875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645510933193512321593
with string of it 7898756447985645510933193512321593
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.2993537860976768355536492549617832992225885 sq of rst 7898756447985645510933193512321593
                     with intpart 7898756447985645510933193512321593 and other part 0
                     the int string is 0.299354

     ----> using 0.2993537860976768320842023030081691103987395763397216796875 rst is 0.14967689304883841604210115150408455519936978816986083984375
     ----> using 0.14967689304883841604210115150408455519936978816986083984375 with intpart 0 and fract 0.14967689304883841604210115150408455519936978816986083984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645484328141228163643
with string of it 7898756447985645484328141228163643
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.1496768930488384108379307235736632719635963 sq of rst 7898756447985645484328141228163643
                     with intpart 7898756447985645484328141228163643 and other part 0
                     the int string is 0.149677

     ----> using 0.14967689304883841604210115150408455519936978816986083984375 rst is 0.074838446524419208021050575752042277599684894084930419921875
     ----> using 0.074838446524419208021050575752042277599684894084930419921875 with intpart 0 and fract 0.074838446524419208021050575752042277599684894084930419921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645471025615086084670
with string of it 7898756447985645471025615086084670
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0748384465244192054189653617868316359817982 sq of rst 7898756447985645471025615086084670
                     with intpart 7898756447985645471025615086084670 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.19741514439070732833680921203267644159495830535888671875
     ----> using 0.19741514439070732833680921203267644159495830535888671875 rst is 0.098707572195353664168404606016338220797479152679443359375
     ----> using 0.098707572195353664168404606016338220797479152679443359375 with intpart 0 and fract 0.098707572195353664168404606016338220797479152679443359375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645475268349709425225
with string of it 7898756447985645475268349709425225
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212264.0987075721953536711072985099235665984451771 sq of rst 7898756447985645475268349709425225
                     with intpart 7898756447985645475268349709425225 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212264

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212264 
     doted 0 
     makes 88874948371212264

result 88874948371212249 
     doted 0.1974151443907071479255677104447386227548122406005859375 
     makes 88874948371212249.1974151443907071479255677104447386227548122


for the integer string 88874948371212249.000000
the numbers are 17
the retrievable integer digit is 9

entering with number of 9.1974151443907071479255677104447386227548122406005859375
recheck values of 88874948371212264 and result of 7898756447985645457723088944005696 with intpart 7898756447985645457723088944005696

recheck power 88874948371212264 of result 7898756447985645457723088944005696
lowering second to value of 88874948371212264

     ----> using 9.1974151443907071479255677104447386227548122406005859375 rst is 4.59870757219535357396278385522236931137740612030029296875
     ----> using 4.59870757219535357396278385522236931137740612030029296875 with intpart 4 and fract 0.59870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645386393401338212944
with string of it 7898756447985645386393401338212944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.5987075721953535739627838552223693113774061 sq of rst 7898756447985645386393401338212944
                     with intpart 7898756447985645386393401338212944 and other part 0
                     the int string is 4.598708

     ----> using 4.59870757219535357396278385522236931137740612030029296875 rst is 2.299353786097676786981391927611184655688703060150146484375
     ----> using 2.299353786097676786981391927611184655688703060150146484375 with intpart 2 and fract 0.299353786097676786981391927611184655688703060150146484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645333183296769897058
with string of it 7898756447985645333183296769897058
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.299353786097676793920285831518413033336401 sq of rst 7898756447985645333183296769897058
                     with intpart 7898756447985645333183296769897058 and other part 0
                     the int string is 2.299354

     ----> using 2.299353786097676786981391927611184655688703060150146484375 rst is 1.1496768930488383934906959638055923278443515300750732421875
     ----> using 1.1496768930488383934906959638055923278443515300750732421875 with intpart 1 and fract 0.1496768930488383934906959638055923278443515300750732421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645306578244485739113
with string of it 7898756447985645306578244485739113
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.1496768930488383969601429157592065166682005 sq of rst 7898756447985645306578244485739113
                     with intpart 7898756447985645306578244485739113 and other part 0
                     the int string is 1.149677

     ----> using 1.1496768930488383934906959638055923278443515300750732421875 rst is 0.57483844652441919674534798190279616392217576503753662109375
     ----> using 0.57483844652441919674534798190279616392217576503753662109375 with intpart 0 and fract 0.57483844652441919674534798190279616392217576503753662109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645382150666714872403
with string of it 7898756447985645382150666714872403
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.5748384465244191915411775539723748806864023 sq of rst 7898756447985645382150666714872403
                     with intpart 7898756447985645382150666714872403 and other part 0
                     the int string is 0.574838

     ----> using 0.57483844652441919674534798190279616392217576503753662109375 rst is 0.287419223262209598372673990951398081961087882518768310546875
     ----> using 0.287419223262209598372673990951398081961087882518768310546875 with intpart 0 and fract 0.287419223262209598372673990951398081961087882518768310546875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645331061929458226787
with string of it 7898756447985645331061929458226787
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.2874192232622096027094826808934158179908991 sq of rst 7898756447985645331061929458226787
                     with intpart 7898756447985645331061929458226787 and other part 0
                     the int string is 0.287419

     ----> using 0.287419223262209598372673990951398081961087882518768310546875 rst is 0.143709611631104799186336995475699040980543941259384155273438
     ----> using 0.143709611631104799186336995475699040980543941259384155273438 with intpart 0 and fract 0.143709611631104799186336995475699040980543941259384155273438
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645305517560829903977
with string of it 7898756447985645305517560829903977
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.1437096116311047944158474365394795313477516 sq of rst 7898756447985645305517560829903977
                     with intpart 7898756447985645305517560829903977 and other part 0
                     the int string is 0.143710

     ----> using 0.143709611631104799186336995475699040980543941259384155273438 rst is 0.0718548058155523995931684977378495204902719706296920776367188
     ----> using 0.0718548058155523995931684977378495204902719706296920776367188 with intpart 0 and fract 0.0718548058155523995931684977378495204902719706296920776367188
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645292745376515742573
with string of it 7898756447985645292745376515742573
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0718548058155523972079237182697397656738758 sq of rst 7898756447985645292745376515742573
                     with intpart 7898756447985645292745376515742573 and other part 0
                     the int string is 0.071855

from new int t  of 9 ---> 8 with 8.1974151443907071479255677104447386227548122406005859375
     ----> using 8.1974151443907071479255677104447386227548122406005859375 rst is 4.09870757219535357396278385522236931137740612030029296875
     ----> using 4.09870757219535357396278385522236931137740612030029296875 with intpart 4 and fract 0.09870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645297518452967000681
with string of it 7898756447985645297518452967000681
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0987075721953535739627838552223693113774061 sq of rst 7898756447985645297518452967000681
                     with intpart 7898756447985645297518452967000681 and other part 0
                     the int string is 4.098708

from new int t  of 8 ---> 7 with 7.1974151443907071479255677104447386227548122406005859375
     ----> using 7.1974151443907071479255677104447386227548122406005859375 rst is 3.59870757219535357396278385522236931137740612030029296875
     ----> using 3.59870757219535357396278385522236931137740612030029296875 with intpart 3 and fract 0.59870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645386393401338212944
with string of it 7898756447985645386393401338212944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.5987075721953535739627838552223693113774061 sq of rst 7898756447985645386393401338212944
                     with intpart 7898756447985645386393401338212944 and other part 0
                     the int string is 3.598708

     ----> using 3.59870757219535357396278385522236931137740612030029296875 rst is 1.799353786097676786981391927611184655688703060150146484375
     ----> using 1.799353786097676786981391927611184655688703060150146484375 with intpart 1 and fract 0.799353786097676786981391927611184655688703060150146484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645422058245141109321
with string of it 7898756447985645422058245141109321
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.799353786097676793920285831518413033336401 sq of rst 7898756447985645422058245141109321
                     with intpart 7898756447985645422058245141109321 and other part 0
                     the int string is 1.799354

     ----> using 1.799353786097676786981391927611184655688703060150146484375 rst is 0.8996768930488383934906959638055923278443515300750732421875
     ----> using 0.8996768930488383934906959638055923278443515300750732421875 with intpart 0 and fract 0.8996768930488383934906959638055923278443515300750732421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645439890667042557509
with string of it 7898756447985645439890667042557509
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.8996768930488383969601429157592065166682005 sq of rst 7898756447985645439890667042557509
                     with intpart 7898756447985645439890667042557509 and other part 0
                     the int string is 0.899677

     ----> using 0.8996768930488383934906959638055923278443515300750732421875 rst is 0.44983844652441919674534798190279616392217576503753662109375
     ----> using 0.44983844652441919674534798190279616392217576503753662109375 with intpart 0 and fract 0.44983844652441919674534798190279616392217576503753662109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645359931929622069337
with string of it 7898756447985645359931929622069337
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.4498384465244191915411775539723748806864023 sq of rst 7898756447985645359931929622069337
                     with intpart 7898756447985645359931929622069337 and other part 0
                     the int string is 0.449838

     ----> using 0.44983844652441919674534798190279616392217576503753662109375 rst is 0.224919223262209598372673990951398081961087882518768310546875
     ----> using 0.224919223262209598372673990951398081961087882518768310546875 with intpart 0 and fract 0.224919223262209598372673990951398081961087882518768310546875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645319952560911825254
with string of it 7898756447985645319952560911825254
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.2249192232622096027094826808934158179908991 sq of rst 7898756447985645319952560911825254
                     with intpart 7898756447985645319952560911825254 and other part 0
                     the int string is 0.224919

     ----> using 0.224919223262209598372673990951398081961087882518768310546875 rst is 0.112459611631104799186336995475699040980543941259384155273438
     ----> using 0.112459611631104799186336995475699040980543941259384155273438 with intpart 0 and fract 0.112459611631104799186336995475699040980543941259384155273438
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645299962876556703210
with string of it 7898756447985645299962876556703210
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.1124596116311047944158474365394795313477516 sq of rst 7898756447985645299962876556703210
                     with intpart 7898756447985645299962876556703210 and other part 0
                     the int string is 0.112460

     ----> using 0.112459611631104799186336995475699040980543941259384155273438 rst is 0.0562298058155523995931684977378495204902719706296920776367188
     ----> using 0.0562298058155523995931684977378495204902719706296920776367188 with intpart 0 and fract 0.0562298058155523995931684977378495204902719706296920776367188
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645289968034379142190
with string of it 7898756447985645289968034379142190
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0562298058155523972079237182697397656738758 sq of rst 7898756447985645289968034379142190
                     with intpart 7898756447985645289968034379142190 and other part 0
                     the int string is 0.056230

from new int t  of 7 ---> 6 with 6.1974151443907071479255677104447386227548122406005859375
     ----> using 6.1974151443907071479255677104447386227548122406005859375 rst is 3.09870757219535357396278385522236931137740612030029296875
     ----> using 3.09870757219535357396278385522236931137740612030029296875 with intpart 3 and fract 0.09870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645297518452967000681
with string of it 7898756447985645297518452967000681
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0987075721953535739627838552223693113774061 sq of rst 7898756447985645297518452967000681
                     with intpart 7898756447985645297518452967000681 and other part 0
                     the int string is 3.098708

from new int t  of 6 ---> 5 with 5.1974151443907071479255677104447386227548122406005859375
     ----> using 5.1974151443907071479255677104447386227548122406005859375 rst is 2.59870757219535357396278385522236931137740612030029296875
     ----> using 2.59870757219535357396278385522236931137740612030029296875 with intpart 2 and fract 0.59870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645386393401338212944
with string of it 7898756447985645386393401338212944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.5987075721953535739627838552223693113774061 sq of rst 7898756447985645386393401338212944
                     with intpart 7898756447985645386393401338212944 and other part 0
                     the int string is 2.598708

     ----> using 2.59870757219535357396278385522236931137740612030029296875 rst is 1.299353786097676786981391927611184655688703060150146484375
     ----> using 1.299353786097676786981391927611184655688703060150146484375 with intpart 1 and fract 0.299353786097676786981391927611184655688703060150146484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645333183296769897058
with string of it 7898756447985645333183296769897058
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.299353786097676793920285831518413033336401 sq of rst 7898756447985645333183296769897058
                     with intpart 7898756447985645333183296769897058 and other part 0
                     the int string is 1.299354

     ----> using 1.299353786097676786981391927611184655688703060150146484375 rst is 0.6496768930488383934906959638055923278443515300750732421875
     ----> using 0.6496768930488383934906959638055923278443515300750732421875 with intpart 0 and fract 0.6496768930488383934906959638055923278443515300750732421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645395453192856951377
with string of it 7898756447985645395453192856951377
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.6496768930488383969601429157592065166682005 sq of rst 7898756447985645395453192856951377
                     with intpart 7898756447985645395453192856951377 and other part 0
                     the int string is 0.649677

     ----> using 0.6496768930488383934906959638055923278443515300750732421875 rst is 0.32483844652441919674534798190279616392217576503753662109375
     ----> using 0.32483844652441919674534798190279616392217576503753662109375 with intpart 0 and fract 0.32483844652441919674534798190279616392217576503753662109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645337713192529266272
with string of it 7898756447985645337713192529266272
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.3248384465244191915411775539723748806864023 sq of rst 7898756447985645337713192529266272
                     with intpart 7898756447985645337713192529266272 and other part 0
                     the int string is 0.324838

     ----> using 0.32483844652441919674534798190279616392217576503753662109375 rst is 0.162419223262209598372673990951398081961087882518768310546875
     ----> using 0.162419223262209598372673990951398081961087882518768310546875 with intpart 0 and fract 0.162419223262209598372673990951398081961087882518768310546875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645308843192365423721
with string of it 7898756447985645308843192365423721
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.1624192232622096027094826808934158179908991 sq of rst 7898756447985645308843192365423721
                     with intpart 7898756447985645308843192365423721 and other part 0
                     the int string is 0.162419

     ----> using 0.162419223262209598372673990951398081961087882518768310546875 rst is 0.0812096116311047991863369954756990409805439412593841552734375
     ----> using 0.0812096116311047991863369954756990409805439412593841552734375 with intpart 0 and fract 0.0812096116311047991863369954756990409805439412593841552734375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645294408192283502444
with string of it 7898756447985645294408192283502444
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0812096116311047944158474365394795313477516 sq of rst 7898756447985645294408192283502444
                     with intpart 7898756447985645294408192283502444 and other part 0
                     the int string is 0.081210

from new int t  of 5 ---> 4 with 4.1974151443907071479255677104447386227548122406005859375
     ----> using 4.1974151443907071479255677104447386227548122406005859375 rst is 2.09870757219535357396278385522236931137740612030029296875
     ----> using 2.09870757219535357396278385522236931137740612030029296875 with intpart 2 and fract 0.09870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645297518452967000681
with string of it 7898756447985645297518452967000681
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0987075721953535739627838552223693113774061 sq of rst 7898756447985645297518452967000681
                     with intpart 7898756447985645297518452967000681 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.1974151443907071479255677104447386227548122406005859375
     ----> using 3.1974151443907071479255677104447386227548122406005859375 rst is 1.59870757219535357396278385522236931137740612030029296875
     ----> using 1.59870757219535357396278385522236931137740612030029296875 with intpart 1 and fract 0.59870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645386393401338212944
with string of it 7898756447985645386393401338212944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.5987075721953535739627838552223693113774061 sq of rst 7898756447985645386393401338212944
                     with intpart 7898756447985645386393401338212944 and other part 0
                     the int string is 1.598708

     ----> using 1.59870757219535357396278385522236931137740612030029296875 rst is 0.799353786097676786981391927611184655688703060150146484375
     ----> using 0.799353786097676786981391927611184655688703060150146484375 with intpart 0 and fract 0.799353786097676786981391927611184655688703060150146484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645422058245141109321
with string of it 7898756447985645422058245141109321
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.799353786097676793920285831518413033336401 sq of rst 7898756447985645422058245141109321
                     with intpart 7898756447985645422058245141109321 and other part 0
                     the int string is 0.799354

     ----> using 0.799353786097676786981391927611184655688703060150146484375 rst is 0.3996768930488383934906959638055923278443515300750732421875
     ----> using 0.3996768930488383934906959638055923278443515300750732421875 with intpart 0 and fract 0.3996768930488383934906959638055923278443515300750732421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645351015718671345245
with string of it 7898756447985645351015718671345245
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.3996768930488383969601429157592065166682005 sq of rst 7898756447985645351015718671345245
                     with intpart 7898756447985645351015718671345245 and other part 0
                     the int string is 0.399677

     ----> using 0.3996768930488383934906959638055923278443515300750732421875 rst is 0.19983844652441919674534798190279616392217576503753662109375
     ----> using 0.19983844652441919674534798190279616392217576503753662109375 with intpart 0 and fract 0.19983844652441919674534798190279616392217576503753662109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645315494455436463206
with string of it 7898756447985645315494455436463206
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.1998384465244191915411775539723748806864023 sq of rst 7898756447985645315494455436463206
                     with intpart 7898756447985645315494455436463206 and other part 0
                     the int string is 0.199838

     ----> using 0.19983844652441919674534798190279616392217576503753662109375 rst is 0.099919223262209598372673990951398081961087882518768310546875
     ----> using 0.099919223262209598372673990951398081961087882518768310546875 with intpart 0 and fract 0.099919223262209598372673990951398081961087882518768310546875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645297733823819022189
with string of it 7898756447985645297733823819022189
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0999192232622096027094826808934158179908991 sq of rst 7898756447985645297733823819022189
                     with intpart 7898756447985645297733823819022189 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.1974151443907071479255677104447386227548122406005859375
     ----> using 2.1974151443907071479255677104447386227548122406005859375 rst is 1.09870757219535357396278385522236931137740612030029296875
     ----> using 1.09870757219535357396278385522236931137740612030029296875 with intpart 1 and fract 0.09870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645297518452967000681
with string of it 7898756447985645297518452967000681
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0987075721953535739627838552223693113774061 sq of rst 7898756447985645297518452967000681
                     with intpart 7898756447985645297518452967000681 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.1974151443907071479255677104447386227548122406005859375
     ----> using 1.1974151443907071479255677104447386227548122406005859375 rst is 0.59870757219535357396278385522236931137740612030029296875
     ----> using 0.59870757219535357396278385522236931137740612030029296875 with intpart 0 and fract 0.59870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645386393401338212944
with string of it 7898756447985645386393401338212944
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.5987075721953535739627838552223693113774061 sq of rst 7898756447985645386393401338212944
                     with intpart 7898756447985645386393401338212944 and other part 0
                     the int string is 0.598708

     ----> using 0.59870757219535357396278385522236931137740612030029296875 rst is 0.299353786097676786981391927611184655688703060150146484375
     ----> using 0.299353786097676786981391927611184655688703060150146484375 with intpart 0 and fract 0.299353786097676786981391927611184655688703060150146484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645333183296769897058
with string of it 7898756447985645333183296769897058
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.299353786097676793920285831518413033336401 sq of rst 7898756447985645333183296769897058
                     with intpart 7898756447985645333183296769897058 and other part 0
                     the int string is 0.299354

     ----> using 0.299353786097676786981391927611184655688703060150146484375 rst is 0.1496768930488383934906959638055923278443515300750732421875
     ----> using 0.1496768930488383934906959638055923278443515300750732421875 with intpart 0 and fract 0.1496768930488383934906959638055923278443515300750732421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645306578244485739113
with string of it 7898756447985645306578244485739113
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.1496768930488383969601429157592065166682005 sq of rst 7898756447985645306578244485739113
                     with intpart 7898756447985645306578244485739113 and other part 0
                     the int string is 0.149677

     ----> using 0.1496768930488383934906959638055923278443515300750732421875 rst is 0.07483844652441919674534798190279616392217576503753662109375
     ----> using 0.07483844652441919674534798190279616392217576503753662109375 with intpart 0 and fract 0.07483844652441919674534798190279616392217576503753662109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645293275718343660140
with string of it 7898756447985645293275718343660140
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0748384465244191915411775539723748806864023 sq of rst 7898756447985645293275718343660140
                     with intpart 7898756447985645293275718343660140 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.1974151443907071479255677104447386227548122406005859375
     ----> using 0.1974151443907071479255677104447386227548122406005859375 rst is 0.09870757219535357396278385522236931137740612030029296875
     ----> using 0.09870757219535357396278385522236931137740612030029296875 with intpart 0 and fract 0.09870757219535357396278385522236931137740612030029296875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645297518452967000681
with string of it 7898756447985645297518452967000681
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212263.0987075721953535739627838552223693113774061 sq of rst 7898756447985645297518452967000681
                     with intpart 7898756447985645297518452967000681 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212263

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212263 
     doted 0 
     makes 88874948371212263

result 88874948371212250 
     doted 0.19741514439070699526990182448571431450545787811279296875 
     makes 88874948371212250.1974151443907069952699018244857143145054579


for the integer string 88874948371212250.000000
the numbers are 17
the retrievable integer digit is 0

entering with number of 0.19741514439070699526990182448571431450545787811279296875
recheck values of 88874948371212263 and result of 7898756447985645279973192201581169 with intpart 7898756447985645279973192201581169

recheck power 88874948371212263 of result 7898756447985645279973192201581169
lowering second to value of 88874948371212263

     ----> using 0.19741514439070699526990182448571431450545787811279296875 rst is 0.098707572195353497634950912242857157252728939056396484375
     ----> using 0.098707572195353497634950912242857157252728939056396484375 with intpart 0 and fract 0.098707572195353497634950912242857157252728939056396484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645119768556224576143
with string of it 7898756447985645119768556224576143
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212262.0987075721953535045738448161500855349004269 sq of rst 7898756447985645119768556224576143
                     with intpart 7898756447985645119768556224576143 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212262

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212262 
     doted 0 
     makes 88874948371212262

result 88874948371212251 
     doted 0.19741514439070685649202374634114676155149936676025390625 
     makes 88874948371212251.1974151443907068564920237463411467615514994


for the integer string 88874948371212251.000000
the numbers are 17
the retrievable integer digit is 1

entering with number of 1.19741514439070685649202374634114676155149936676025390625
recheck values of 88874948371212262 and result of 7898756447985645102223295459156644 with intpart 7898756447985645102223295459156644

recheck power 88874948371212262 of result 7898756447985645102223295459156644
lowering second to value of 88874948371212262

     ----> using 1.19741514439070685649202374634114676155149936676025390625 rst is 0.598707572195353428246011873170573380775749683380126953125
     ----> using 0.598707572195353428246011873170573380775749683380126953125 with intpart 0 and fract 0.598707572195353428246011873170573380775749683380126953125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985645030893607853363867
with string of it 7898756447985645030893607853363867
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 15
                     with combination da_rst 88874948371212261.5987075721953534213071179692633450031280518 sq of rst 7898756447985645030893607853363867
                     with intpart 7898756447985645030893607853363867 and other part 0
                     the int string is 0.598708

     ----> using 0.598707572195353428246011873170573380775749683380126953125 rst is 0.2993537860976767141230059365852866903878748416900634765625
     ----> using 0.2993537860976767141230059365852866903878748416900634765625 with intpart 0 and fract 0.2993537860976767141230059365852866903878748416900634765625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644977683503285047994
with string of it 7898756447985644977683503285047994
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212261.2993537860976767106535589846316725015640259 sq of rst 7898756447985644977683503285047994
                     with intpart 7898756447985644977683503285047994 and other part 0
                     the int string is 0.299354

     ----> using 0.2993537860976767141230059365852866903878748416900634765625 rst is 0.14967689304883835706150296829264334519393742084503173828125
     ----> using 0.14967689304883835706150296829264334519393742084503173828125 with intpart 0 and fract 0.14967689304883835706150296829264334519393742084503173828125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644951078451000890057
with string of it 7898756447985644951078451000890057
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212261.1496768930488383553267794923158362507820129 sq of rst 7898756447985644951078451000890057
                     with intpart 7898756447985644951078451000890057 and other part 0
                     the int string is 0.149677

     ----> using 0.14967689304883835706150296829264334519393742084503173828125 rst is 0.074838446524419178530751484146321672596968710422515869140625
     ----> using 0.074838446524419178530751484146321672596968710422515869140625 with intpart 0 and fract 0.074838446524419178530751484146321672596968710422515869140625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644937775924858811089
with string of it 7898756447985644937775924858811089
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212261.0748384465244191776633897461579181253910065 sq of rst 7898756447985644937775924858811089
                     with intpart 7898756447985644937775924858811089 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.19741514439070685649202374634114676155149936676025390625
     ----> using 0.19741514439070685649202374634114676155149936676025390625 rst is 0.098707572195353428246011873170573380775749683380126953125
     ----> using 0.098707572195353428246011873170573380775749683380126953125 with intpart 0 and fract 0.098707572195353428246011873170573380775749683380126953125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644942018659482151605
with string of it 7898756447985644942018659482151605
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212261.0987075721953534213071179692633450031280518 sq of rst 7898756447985644942018659482151605
                     with intpart 7898756447985644942018659482151605 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212261

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212261 
     doted 0 
     makes 88874948371212261

result 88874948371212252 
     doted 0.19741514439070674546972128382549271918833255767822265625 
     makes 88874948371212252.1974151443907067454697212838254927191883326


for the integer string 88874948371212252.000000
the numbers are 17
the retrievable integer digit is 2

entering with number of 2.19741514439070674546972128382549271918833255767822265625
recheck values of 88874948371212261 and result of 7898756447985644924473398716732121 with intpart 7898756447985644924473398716732121

recheck power 88874948371212261 of result 7898756447985644924473398716732121
lowering second to value of 88874948371212261

     ----> using 2.19741514439070674546972128382549271918833255767822265625 rst is 1.098707572195353372734860641912746359594166278839111328125
     ----> using 1.098707572195353372734860641912746359594166278839111328125 with intpart 1 and fract 0.098707572195353372734860641912746359594166278839111328125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644764268762739727074
with string of it 7898756447985644764268762739727074
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212260.0987075721953533657959667380055179819464684 sq of rst 7898756447985644764268762739727074
                     with intpart 7898756447985644764268762739727074 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.19741514439070674546972128382549271918833255767822265625
     ----> using 1.19741514439070674546972128382549271918833255767822265625 rst is 0.598707572195353372734860641912746359594166278839111328125
     ----> using 0.598707572195353372734860641912746359594166278839111328125 with intpart 0 and fract 0.598707572195353372734860641912746359594166278839111328125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644853143711110939335
with string of it 7898756447985644853143711110939335
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212260.5987075721953533657959667380055179819464684 sq of rst 7898756447985644853143711110939335
                     with intpart 7898756447985644853143711110939335 and other part 0
                     the int string is 0.598708

     ----> using 0.598707572195353372734860641912746359594166278839111328125 rst is 0.2993537860976766863674303209563731797970831394195556640625
     ----> using 0.2993537860976766863674303209563731797970831394195556640625 with intpart 0 and fract 0.2993537860976766863674303209563731797970831394195556640625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644799933606542623467
with string of it 7898756447985644799933606542623467
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212260.2993537860976766828979833690027589909732342 sq of rst 7898756447985644799933606542623467
                     with intpart 7898756447985644799933606542623467 and other part 0
                     the int string is 0.299354

     ----> using 0.2993537860976766863674303209563731797970831394195556640625 rst is 0.14967689304883834318371516047818658989854156970977783203125
     ----> using 0.14967689304883834318371516047818658989854156970977783203125 with intpart 0 and fract 0.14967689304883834318371516047818658989854156970977783203125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644773328554258465534
with string of it 7898756447985644773328554258465534
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212260.1496768930488383414489916845013794954866171 sq of rst 7898756447985644773328554258465534
                     with intpart 7898756447985644773328554258465534 and other part 0
                     the int string is 0.149677

     ----> using 0.14967689304883834318371516047818658989854156970977783203125 rst is 0.074838446524419171591857580239093294949270784854888916015625
     ----> using 0.074838446524419171591857580239093294949270784854888916015625 with intpart 0 and fract 0.074838446524419171591857580239093294949270784854888916015625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644760026028116386568
with string of it 7898756447985644760026028116386568
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212260.0748384465244191776633897461579181253910065 sq of rst 7898756447985644760026028116386568
                     with intpart 7898756447985644760026028116386568 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.19741514439070674546972128382549271918833255767822265625
     ----> using 0.19741514439070674546972128382549271918833255767822265625 rst is 0.098707572195353372734860641912746359594166278839111328125
     ----> using 0.098707572195353372734860641912746359594166278839111328125 with intpart 0 and fract 0.098707572195353372734860641912746359594166278839111328125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644764268762739727074
with string of it 7898756447985644764268762739727074
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212260.0987075721953533657959667380055179819464684 sq of rst 7898756447985644764268762739727074
                     with intpart 7898756447985644764268762739727074 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212260

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212260 
     doted 0 
     makes 88874948371212260

result 88874948371212253 
     doted 0.19741514439070666220299443693875218741595745086669921875 
     makes 88874948371212253.1974151443907066622029944369387521874159575


for the integer string 88874948371212253.000000
the numbers are 17
the retrievable integer digit is 3

entering with number of 3.19741514439070666220299443693875218741595745086669921875
recheck values of 88874948371212260 and result of 7898756447985644746723501974307600 with intpart 7898756447985644746723501974307600

recheck power 88874948371212260 of result 7898756447985644746723501974307600
lowering second to value of 88874948371212260

     ----> using 3.19741514439070666220299443693875218741595745086669921875 rst is 1.598707572195353331101497218469376093707978725433349609375
     ----> using 1.598707572195353331101497218469376093707978725433349609375 with intpart 1 and fract 0.598707572195353331101497218469376093707978725433349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644675393814368514810
with string of it 7898756447985644675393814368514810
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.5987075721953533380403911223766044713556767 sq of rst 7898756447985644675393814368514810
                     with intpart 7898756447985644675393814368514810 and other part 0
                     the int string is 1.598708

     ----> using 1.598707572195353331101497218469376093707978725433349609375 rst is 0.7993537860976766655507486092346880468539893627166748046875
     ----> using 0.7993537860976766655507486092346880468539893627166748046875 with intpart 0 and fract 0.7993537860976766655507486092346880468539893627166748046875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644711058658171411205
with string of it 7898756447985644711058658171411205
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.7993537860976766690201955611883022356778383 sq of rst 7898756447985644711058658171411205
                     with intpart 7898756447985644711058658171411205 and other part 0
                     the int string is 0.799354

     ----> using 0.7993537860976766655507486092346880468539893627166748046875 rst is 0.39967689304883833277537430461734402342699468135833740234375
     ----> using 0.39967689304883833277537430461734402342699468135833740234375 with intpart 0 and fract 0.39967689304883833277537430461734402342699468135833740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644640016131701647141
with string of it 7898756447985644640016131701647141
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.3996768930488383275712038766869227401912212 sq of rst 7898756447985644640016131701647141
                     with intpart 7898756447985644640016131701647141 and other part 0
                     the int string is 0.399677

     ----> using 0.39967689304883833277537430461734402342699468135833740234375 rst is 0.199838446524419166387687152308672011713497340679168701171875
     ----> using 0.199838446524419166387687152308672011713497340679168701171875 with intpart 0 and fract 0.199838446524419166387687152308672011713497340679168701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644604494868466765111
with string of it 7898756447985644604494868466765111
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.1998384465244191637856019383434613700956106 sq of rst 7898756447985644604494868466765111
                     with intpart 7898756447985644604494868466765111 and other part 0
                     the int string is 0.199838

     ----> using 0.199838446524419166387687152308672011713497340679168701171875 rst is 0.0999192232622095831938435761543360058567486703395843505859375
     ----> using 0.0999192232622095831938435761543360058567486703395843505859375 with intpart 0 and fract 0.0999192232622095831938435761543360058567486703395843505859375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644586734236849324097
with string of it 7898756447985644586734236849324097
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.0999192232622095888316948730789590626955032 sq of rst 7898756447985644586734236849324097
                     with intpart 7898756447985644586734236849324097 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.19741514439070666220299443693875218741595745086669921875
     ----> using 2.19741514439070666220299443693875218741595745086669921875 rst is 1.098707572195353331101497218469376093707978725433349609375
     ----> using 1.098707572195353331101497218469376093707978725433349609375 with intpart 1 and fract 0.098707572195353331101497218469376093707978725433349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644586518865997302550
with string of it 7898756447985644586518865997302550
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.0987075721953533380403911223766044713556767 sq of rst 7898756447985644586518865997302550
                     with intpart 7898756447985644586518865997302550 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.19741514439070666220299443693875218741595745086669921875
     ----> using 1.19741514439070666220299443693875218741595745086669921875 rst is 0.598707572195353331101497218469376093707978725433349609375
     ----> using 0.598707572195353331101497218469376093707978725433349609375 with intpart 0 and fract 0.598707572195353331101497218469376093707978725433349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644675393814368514810
with string of it 7898756447985644675393814368514810
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.5987075721953533380403911223766044713556767 sq of rst 7898756447985644675393814368514810
                     with intpart 7898756447985644675393814368514810 and other part 0
                     the int string is 0.598708

     ----> using 0.598707572195353331101497218469376093707978725433349609375 rst is 0.2993537860976766655507486092346880468539893627166748046875
     ----> using 0.2993537860976766655507486092346880468539893627166748046875 with intpart 0 and fract 0.2993537860976766655507486092346880468539893627166748046875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644622183709800198945
with string of it 7898756447985644622183709800198945
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.2993537860976766690201955611883022356778383 sq of rst 7898756447985644622183709800198945
                     with intpart 7898756447985644622183709800198945 and other part 0
                     the int string is 0.299354

     ----> using 0.2993537860976766655507486092346880468539893627166748046875 rst is 0.14967689304883833277537430461734402342699468135833740234375
     ----> using 0.14967689304883833277537430461734402342699468135833740234375 with intpart 0 and fract 0.14967689304883833277537430461734402342699468135833740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644595578657516041012
with string of it 7898756447985644595578657516041012
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.1496768930488383275712038766869227401912212 sq of rst 7898756447985644595578657516041012
                     with intpart 7898756447985644595578657516041012 and other part 0
                     the int string is 0.149677

     ----> using 0.14967689304883833277537430461734402342699468135833740234375 rst is 0.074838446524419166387687152308672011713497340679168701171875
     ----> using 0.074838446524419166387687152308672011713497340679168701171875 with intpart 0 and fract 0.074838446524419166387687152308672011713497340679168701171875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644582276131373962046
with string of it 7898756447985644582276131373962046
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.0748384465244191637856019383434613700956106 sq of rst 7898756447985644582276131373962046
                     with intpart 7898756447985644582276131373962046 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.19741514439070666220299443693875218741595745086669921875
     ----> using 0.19741514439070666220299443693875218741595745086669921875 rst is 0.098707572195353331101497218469376093707978725433349609375
     ----> using 0.098707572195353331101497218469376093707978725433349609375 with intpart 0 and fract 0.098707572195353331101497218469376093707978725433349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644586518865997302550
with string of it 7898756447985644586518865997302550
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212259.0987075721953533380403911223766044713556767 sq of rst 7898756447985644586518865997302550
                     with intpart 7898756447985644586518865997302550 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212259

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212259 
     doted 0 
     makes 88874948371212259

result 88874948371212254 
     doted 0.1974151443907065928140553978664684109389781951904296875 
     makes 88874948371212254.1974151443907065928140553978664684109389782


for the integer string 88874948371212254.000000
the numbers are 17
the retrievable integer digit is 4

entering with number of 4.1974151443907065928140553978664684109389781951904296875
recheck values of 88874948371212259 and result of 7898756447985644568973605231883081 with intpart 7898756447985644568973605231883081

recheck power 88874948371212259 of result 7898756447985644568973605231883081
lowering second to value of 88874948371212259

     ----> using 4.1974151443907065928140553978664684109389781951904296875 rst is 2.09870757219535329640702769893323420546948909759521484375
     ----> using 2.09870757219535329640702769893323420546948909759521484375 with intpart 2 and fract 0.09870757219535329640702769893323420546948909759521484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644408768969254878026
with string of it 7898756447985644408768969254878026
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.0987075721953532964070276989332342054694891 sq of rst 7898756447985644408768969254878026
                     with intpart 7898756447985644408768969254878026 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.1974151443907065928140553978664684109389781951904296875
     ----> using 3.1974151443907065928140553978664684109389781951904296875 rst is 1.59870757219535329640702769893323420546948909759521484375
     ----> using 1.59870757219535329640702769893323420546948909759521484375 with intpart 1 and fract 0.59870757219535329640702769893323420546948909759521484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644497643917626090284
with string of it 7898756447985644497643917626090284
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.5987075721953532964070276989332342054694891 sq of rst 7898756447985644497643917626090284
                     with intpart 7898756447985644497643917626090284 and other part 0
                     the int string is 1.598708

     ----> using 1.59870757219535329640702769893323420546948909759521484375 rst is 0.799353786097676648203513849466617102734744548797607421875
     ----> using 0.799353786097676648203513849466617102734744548797607421875 with intpart 0 and fract 0.799353786097676648203513849466617102734744548797607421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644533308761428986684
with string of it 7898756447985644533308761428986684
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.7993537860976766551424077533738454803824425 sq of rst 7898756447985644533308761428986684
                     with intpart 7898756447985644533308761428986684 and other part 0
                     the int string is 0.799354

     ----> using 0.799353786097676648203513849466617102734744548797607421875 rst is 0.3996768930488383241017569247333085513673722743988037109375
     ----> using 0.3996768930488383241017569247333085513673722743988037109375 with intpart 0 and fract 0.3996768930488383241017569247333085513673722743988037109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644462266234959222624
with string of it 7898756447985644462266234959222624
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.3996768930488383275712038766869227401912212 sq of rst 7898756447985644462266234959222624
                     with intpart 7898756447985644462266234959222624 and other part 0
                     the int string is 0.399677

     ----> using 0.3996768930488383241017569247333085513673722743988037109375 rst is 0.19983844652441916205087846236665427568368613719940185546875
     ----> using 0.19983844652441916205087846236665427568368613719940185546875 with intpart 0 and fract 0.19983844652441916205087846236665427568368613719940185546875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644426744971724340594
with string of it 7898756447985644426744971724340594
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.1998384465244191637856019383434613700956106 sq of rst 7898756447985644426744971724340594
                     with intpart 7898756447985644426744971724340594 and other part 0
                     the int string is 0.199838

     ----> using 0.19983844652441916205087846236665427568368613719940185546875 rst is 0.099919223262209581025439231183327137841843068599700927734375
     ----> using 0.099919223262209581025439231183327137841843068599700927734375 with intpart 0 and fract 0.099919223262209581025439231183327137841843068599700927734375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644408984340106899578
with string of it 7898756447985644408984340106899578
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.0999192232622095749539070652645023074001074 sq of rst 7898756447985644408984340106899578
                     with intpart 7898756447985644408984340106899578 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.1974151443907065928140553978664684109389781951904296875
     ----> using 2.1974151443907065928140553978664684109389781951904296875 rst is 1.09870757219535329640702769893323420546948909759521484375
     ----> using 1.09870757219535329640702769893323420546948909759521484375 with intpart 1 and fract 0.09870757219535329640702769893323420546948909759521484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644408768969254878026
with string of it 7898756447985644408768969254878026
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.0987075721953532964070276989332342054694891 sq of rst 7898756447985644408768969254878026
                     with intpart 7898756447985644408768969254878026 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.1974151443907065928140553978664684109389781951904296875
     ----> using 1.1974151443907065928140553978664684109389781951904296875 rst is 0.59870757219535329640702769893323420546948909759521484375
     ----> using 0.59870757219535329640702769893323420546948909759521484375 with intpart 0 and fract 0.59870757219535329640702769893323420546948909759521484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644497643917626090284
with string of it 7898756447985644497643917626090284
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.5987075721953532964070276989332342054694891 sq of rst 7898756447985644497643917626090284
                     with intpart 7898756447985644497643917626090284 and other part 0
                     the int string is 0.598708

     ----> using 0.59870757219535329640702769893323420546948909759521484375 rst is 0.299353786097676648203513849466617102734744548797607421875
     ----> using 0.299353786097676648203513849466617102734744548797607421875 with intpart 0 and fract 0.299353786097676648203513849466617102734744548797607421875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644444433813057774425
with string of it 7898756447985644444433813057774425
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.2993537860976766551424077533738454803824425 sq of rst 7898756447985644444433813057774425
                     with intpart 7898756447985644444433813057774425 and other part 0
                     the int string is 0.299354

     ----> using 0.299353786097676648203513849466617102734744548797607421875 rst is 0.1496768930488383241017569247333085513673722743988037109375
     ----> using 0.1496768930488383241017569247333085513673722743988037109375 with intpart 0 and fract 0.1496768930488383241017569247333085513673722743988037109375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644417828760773616495
with string of it 7898756447985644417828760773616495
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.1496768930488383275712038766869227401912212 sq of rst 7898756447985644417828760773616495
                     with intpart 7898756447985644417828760773616495 and other part 0
                     the int string is 0.149677

     ----> using 0.1496768930488383241017569247333085513673722743988037109375 rst is 0.07483844652441916205087846236665427568368613719940185546875
     ----> using 0.07483844652441916205087846236665427568368613719940185546875 with intpart 0 and fract 0.07483844652441916205087846236665427568368613719940185546875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644404526234631537529
with string of it 7898756447985644404526234631537529
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.0748384465244191637856019383434613700956106 sq of rst 7898756447985644404526234631537529
                     with intpart 7898756447985644404526234631537529 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.1974151443907065928140553978664684109389781951904296875
     ----> using 0.1974151443907065928140553978664684109389781951904296875 rst is 0.09870757219535329640702769893323420546948909759521484375
     ----> using 0.09870757219535329640702769893323420546948909759521484375 with intpart 0 and fract 0.09870757219535329640702769893323420546948909759521484375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644408768969254878026
with string of it 7898756447985644408768969254878026
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212258.0987075721953532964070276989332342054694891 sq of rst 7898756447985644408768969254878026
                     with intpart 7898756447985644408768969254878026 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212258

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212258 
     doted 0 
     makes 88874948371212258

result 88874948371212255 
     doted 0.19741514439070655118069197442309814505279064178466796875 
     makes 88874948371212255.1974151443907065511806919744230981450527906


for the integer string 88874948371212255.000000
the numbers are 17
the retrievable integer digit is 5

entering with number of 5.19741514439070655118069197442309814505279064178466796875
recheck values of 88874948371212258 and result of 7898756447985644391223708489458564 with intpart 7898756447985644391223708489458564

recheck power 88874948371212258 of result 7898756447985644391223708489458564
lowering second to value of 88874948371212258

     ----> using 5.19741514439070655118069197442309814505279064178466796875 rst is 2.598707572195353275590345987211549072526395320892333984375
     ----> using 2.598707572195353275590345987211549072526395320892333984375 with intpart 2 and fract 0.598707572195353275590345987211549072526395320892333984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644319894020883665765
with string of it 7898756447985644319894020883665765
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.5987075721953532825292398911187774501740932 sq of rst 7898756447985644319894020883665765
                     with intpart 7898756447985644319894020883665765 and other part 0
                     the int string is 2.598708

     ----> using 2.598707572195353275590345987211549072526395320892333984375 rst is 1.2993537860976766377951729936057745362631976604461669921875
     ----> using 1.2993537860976766377951729936057745362631976604461669921875 with intpart 1 and fract 0.2993537860976766377951729936057745362631976604461669921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644266683916315349907
with string of it 7898756447985644266683916315349907
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.2993537860976766412646199455593887250870466 sq of rst 7898756447985644266683916315349907
                     with intpart 7898756447985644266683916315349907 and other part 0
                     the int string is 1.299354

     ----> using 1.2993537860976766377951729936057745362631976604461669921875 rst is 0.64967689304883831889758649680288726813159883022308349609375
     ----> using 0.64967689304883831889758649680288726813159883022308349609375 with intpart 0 and fract 0.64967689304883831889758649680288726813159883022308349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644328953812402404234
with string of it 7898756447985644328953812402404234
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.6496768930488383136934160688724659848958254 sq of rst 7898756447985644328953812402404234
                     with intpart 7898756447985644328953812402404234 and other part 0
                     the int string is 0.649677

     ----> using 0.64967689304883831889758649680288726813159883022308349609375 rst is 0.324838446524419159448793248401443634065799415111541748046875
     ----> using 0.324838446524419159448793248401443634065799415111541748046875 with intpart 0 and fract 0.324838446524419159448793248401443634065799415111541748046875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644271213812074719143
with string of it 7898756447985644271213812074719143
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.3248384465244191637856019383434613700956106 sq of rst 7898756447985644271213812074719143
                     with intpart 7898756447985644271213812074719143 and other part 0
                     the int string is 0.324838

     ----> using 0.324838446524419159448793248401443634065799415111541748046875 rst is 0.162419223262209579724396624200721817032899707555770874023438
     ----> using 0.162419223262209579724396624200721817032899707555770874023438 with intpart 0 and fract 0.162419223262209579724396624200721817032899707555770874023438
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644242343811910876595
with string of it 7898756447985644242343811910876595
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.1624192232622095749539070652645023074001074 sq of rst 7898756447985644242343811910876595
                     with intpart 7898756447985644242343811910876595 and other part 0
                     the int string is 0.162419

     ----> using 0.162419223262209579724396624200721817032899707555770874023438 rst is 0.0812096116311047898621983121003609085164498537778854370117188
     ----> using 0.0812096116311047898621983121003609085164498537778854370117188 with intpart 0 and fract 0.0812096116311047898621983121003609085164498537778854370117188
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644227908811828955323
with string of it 7898756447985644227908811828955323
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.0812096116311047944158474365394795313477516 sq of rst 7898756447985644227908811828955323
                     with intpart 7898756447985644227908811828955323 and other part 0
                     the int string is 0.081210

from new int t  of 5 ---> 4 with 4.19741514439070655118069197442309814505279064178466796875
     ----> using 4.19741514439070655118069197442309814505279064178466796875 rst is 2.098707572195353275590345987211549072526395320892333984375
     ----> using 2.098707572195353275590345987211549072526395320892333984375 with intpart 2 and fract 0.098707572195353275590345987211549072526395320892333984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644231019072512453508
with string of it 7898756447985644231019072512453508
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.0987075721953532825292398911187774501740932 sq of rst 7898756447985644231019072512453508
                     with intpart 7898756447985644231019072512453508 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.19741514439070655118069197442309814505279064178466796875
     ----> using 3.19741514439070655118069197442309814505279064178466796875 rst is 1.598707572195353275590345987211549072526395320892333984375
     ----> using 1.598707572195353275590345987211549072526395320892333984375 with intpart 1 and fract 0.598707572195353275590345987211549072526395320892333984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644319894020883665765
with string of it 7898756447985644319894020883665765
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.5987075721953532825292398911187774501740932 sq of rst 7898756447985644319894020883665765
                     with intpart 7898756447985644319894020883665765 and other part 0
                     the int string is 1.598708

     ----> using 1.598707572195353275590345987211549072526395320892333984375 rst is 0.7993537860976766377951729936057745362631976604461669921875
     ----> using 0.7993537860976766377951729936057745362631976604461669921875 with intpart 0 and fract 0.7993537860976766377951729936057745362631976604461669921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644355558864686562165
with string of it 7898756447985644355558864686562165
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.7993537860976766412646199455593887250870466 sq of rst 7898756447985644355558864686562165
                     with intpart 7898756447985644355558864686562165 and other part 0
                     the int string is 0.799354

     ----> using 0.7993537860976766377951729936057745362631976604461669921875 rst is 0.39967689304883831889758649680288726813159883022308349609375
     ----> using 0.39967689304883831889758649680288726813159883022308349609375 with intpart 0 and fract 0.39967689304883831889758649680288726813159883022308349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644284516338216798105
with string of it 7898756447985644284516338216798105
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.3996768930488383136934160688724659848958254 sq of rst 7898756447985644284516338216798105
                     with intpart 7898756447985644284516338216798105 and other part 0
                     the int string is 0.399677

     ----> using 0.39967689304883831889758649680288726813159883022308349609375 rst is 0.199838446524419159448793248401443634065799415111541748046875
     ----> using 0.199838446524419159448793248401443634065799415111541748046875 with intpart 0 and fract 0.199838446524419159448793248401443634065799415111541748046875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644248995074981916078
with string of it 7898756447985644248995074981916078
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.1998384465244191637856019383434613700956106 sq of rst 7898756447985644248995074981916078
                     with intpart 7898756447985644248995074981916078 and other part 0
                     the int string is 0.199838

     ----> using 0.199838446524419159448793248401443634065799415111541748046875 rst is 0.0999192232622095797243966242007218170328997075557708740234375
     ----> using 0.0999192232622095797243966242007218170328997075557708740234375 with intpart 0 and fract 0.0999192232622095797243966242007218170328997075557708740234375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644231234443364475062
with string of it 7898756447985644231234443364475062
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.0999192232622095749539070652645023074001074 sq of rst 7898756447985644231234443364475062
                     with intpart 7898756447985644231234443364475062 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.19741514439070655118069197442309814505279064178466796875
     ----> using 2.19741514439070655118069197442309814505279064178466796875 rst is 1.098707572195353275590345987211549072526395320892333984375
     ----> using 1.098707572195353275590345987211549072526395320892333984375 with intpart 1 and fract 0.098707572195353275590345987211549072526395320892333984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644231019072512453508
with string of it 7898756447985644231019072512453508
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.0987075721953532825292398911187774501740932 sq of rst 7898756447985644231019072512453508
                     with intpart 7898756447985644231019072512453508 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.19741514439070655118069197442309814505279064178466796875
     ----> using 1.19741514439070655118069197442309814505279064178466796875 rst is 0.598707572195353275590345987211549072526395320892333984375
     ----> using 0.598707572195353275590345987211549072526395320892333984375 with intpart 0 and fract 0.598707572195353275590345987211549072526395320892333984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644319894020883665765
with string of it 7898756447985644319894020883665765
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.5987075721953532825292398911187774501740932 sq of rst 7898756447985644319894020883665765
                     with intpart 7898756447985644319894020883665765 and other part 0
                     the int string is 0.598708

     ----> using 0.598707572195353275590345987211549072526395320892333984375 rst is 0.2993537860976766377951729936057745362631976604461669921875
     ----> using 0.2993537860976766377951729936057745362631976604461669921875 with intpart 0 and fract 0.2993537860976766377951729936057745362631976604461669921875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644266683916315349907
with string of it 7898756447985644266683916315349907
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.2993537860976766412646199455593887250870466 sq of rst 7898756447985644266683916315349907
                     with intpart 7898756447985644266683916315349907 and other part 0
                     the int string is 0.299354

     ----> using 0.2993537860976766377951729936057745362631976604461669921875 rst is 0.14967689304883831889758649680288726813159883022308349609375
     ----> using 0.14967689304883831889758649680288726813159883022308349609375 with intpart 0 and fract 0.14967689304883831889758649680288726813159883022308349609375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644240078864031191977
with string of it 7898756447985644240078864031191977
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.1496768930488383136934160688724659848958254 sq of rst 7898756447985644240078864031191977
                     with intpart 7898756447985644240078864031191977 and other part 0
                     the int string is 0.149677

     ----> using 0.14967689304883831889758649680288726813159883022308349609375 rst is 0.074838446524419159448793248401443634065799415111541748046875
     ----> using 0.074838446524419159448793248401443634065799415111541748046875 with intpart 0 and fract 0.074838446524419159448793248401443634065799415111541748046875
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644226776337889113014
with string of it 7898756447985644226776337889113014
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.0748384465244191637856019383434613700956106 sq of rst 7898756447985644226776337889113014
                     with intpart 7898756447985644226776337889113014 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.19741514439070655118069197442309814505279064178466796875
     ----> using 0.19741514439070655118069197442309814505279064178466796875 rst is 0.098707572195353275590345987211549072526395320892333984375
     ----> using 0.098707572195353275590345987211549072526395320892333984375 with intpart 0 and fract 0.098707572195353275590345987211549072526395320892333984375
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644231019072512453508
with string of it 7898756447985644231019072512453508
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212257.0987075721953532825292398911187774501740932 sq of rst 7898756447985644231019072512453508
                     with intpart 7898756447985644231019072512453508 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212257

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212257 
     doted 0 
     makes 88874948371212257

result 88874948371212256 
     doted 0.1974151443907065373029041666086413897573947906494140625 
     makes 88874948371212256.1974151443907065373029041666086413897573948

u can easily almost retrieve the dots digits 

for the integer string 88874948371212256.000000
the numbers are 17
the retrievable integer digit is 6

entering with number of 6.1974151443907065373029041666086413897573947906494140625
recheck values of 88874948371212257 and result of 7898756447985644213473811747034049 with intpart 7898756447985644213473811747034049

recheck power 88874948371212257 of result 7898756447985644213473811747034049
lowering second to value of 88874948371212257

     ----> using 6.1974151443907065373029041666086413897573947906494140625 rst is 3.09870757219535326865145208330432069487869739532470703125
     ----> using 3.09870757219535326865145208330432069487869739532470703125 with intpart 3 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 3.098708

from new int t  of 6 ---> 5 with 5.1974151443907065373029041666086413897573947906494140625
     ----> using 5.1974151443907065373029041666086413897573947906494140625 rst is 2.59870757219535326865145208330432069487869739532470703125
     ----> using 2.59870757219535326865145208330432069487869739532470703125 with intpart 2 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 2.598708

     ----> using 2.59870757219535326865145208330432069487869739532470703125 rst is 1.299353786097676634325726041652160347439348697662353515625
     ----> using 1.299353786097676634325726041652160347439348697662353515625 with intpart 1 and fract 0.299353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644088934019572925391
with string of it 7898756447985644088934019572925391
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.2993537860976766273868321377449319697916508 sq of rst 7898756447985644088934019572925391
                     with intpart 7898756447985644088934019572925391 and other part 0
                     the int string is 1.299354

     ----> using 1.299353786097676634325726041652160347439348697662353515625 rst is 0.6496768930488383171628630208260801737196743488311767578125
     ----> using 0.6496768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.6496768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644151203915659979720
with string of it 7898756447985644151203915659979720
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.6496768930488383136934160688724659848958254 sq of rst 7898756447985644151203915659979720
                     with intpart 7898756447985644151203915659979720 and other part 0
                     the int string is 0.649677

     ----> using 0.6496768930488383171628630208260801737196743488311767578125 rst is 0.32483844652441915858143151041304008685983717441558837890625
     ----> using 0.32483844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.32483844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644093463915332294629
with string of it 7898756447985644093463915332294629
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.3248384465244191637856019383434613700956106 sq of rst 7898756447985644093463915332294629
                     with intpart 7898756447985644093463915332294629 and other part 0
                     the int string is 0.324838

     ----> using 0.32483844652441915858143151041304008685983717441558837890625 rst is 0.162419223262209579290715755206520043429918587207794189453125
     ----> using 0.162419223262209579290715755206520043429918587207794189453125 with intpart 0 and fract 0.162419223262209579290715755206520043429918587207794189453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644064593915168452081
with string of it 7898756447985644064593915168452081
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1624192232622095749539070652645023074001074 sq of rst 7898756447985644064593915168452081
                     with intpart 7898756447985644064593915168452081 and other part 0
                     the int string is 0.162419

     ----> using 0.162419223262209579290715755206520043429918587207794189453125 rst is 0.0812096116311047896453578776032600217149592936038970947265625
     ----> using 0.0812096116311047896453578776032600217149592936038970947265625 with intpart 0 and fract 0.0812096116311047896453578776032600217149592936038970947265625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644050158915086530810
with string of it 7898756447985644050158915086530810
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0812096116311047944158474365394795313477516 sq of rst 7898756447985644050158915086530810
                     with intpart 7898756447985644050158915086530810 and other part 0
                     the int string is 0.081210

from new int t  of 5 ---> 4 with 4.1974151443907065373029041666086413897573947906494140625
     ----> using 4.1974151443907065373029041666086413897573947906494140625 rst is 2.09870757219535326865145208330432069487869739532470703125
     ----> using 2.09870757219535326865145208330432069487869739532470703125 with intpart 2 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.1974151443907065373029041666086413897573947906494140625
     ----> using 3.1974151443907065373029041666086413897573947906494140625 rst is 1.59870757219535326865145208330432069487869739532470703125
     ----> using 1.59870757219535326865145208330432069487869739532470703125 with intpart 1 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 1.598708

     ----> using 1.59870757219535326865145208330432069487869739532470703125 rst is 0.799353786097676634325726041652160347439348697662353515625
     ----> using 0.799353786097676634325726041652160347439348697662353515625 with intpart 0 and fract 0.799353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644177808967944137648
with string of it 7898756447985644177808967944137648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.7993537860976766273868321377449319697916508 sq of rst 7898756447985644177808967944137648
                     with intpart 7898756447985644177808967944137648 and other part 0
                     the int string is 0.799354

     ----> using 0.799353786097676634325726041652160347439348697662353515625 rst is 0.3996768930488383171628630208260801737196743488311767578125
     ----> using 0.3996768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.3996768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644106766441474373592
with string of it 7898756447985644106766441474373592
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.3996768930488383136934160688724659848958254 sq of rst 7898756447985644106766441474373592
                     with intpart 7898756447985644106766441474373592 and other part 0
                     the int string is 0.399677

     ----> using 0.3996768930488383171628630208260801737196743488311767578125 rst is 0.19983844652441915858143151041304008685983717441558837890625
     ----> using 0.19983844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.19983844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644071245178239491565
with string of it 7898756447985644071245178239491565
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1998384465244191637856019383434613700956106 sq of rst 7898756447985644071245178239491565
                     with intpart 7898756447985644071245178239491565 and other part 0
                     the int string is 0.199838

     ----> using 0.19983844652441915858143151041304008685983717441558837890625 rst is 0.099919223262209579290715755206520043429918587207794189453125
     ----> using 0.099919223262209579290715755206520043429918587207794189453125 with intpart 0 and fract 0.099919223262209579290715755206520043429918587207794189453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053484546622050549
with string of it 7898756447985644053484546622050549
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0999192232622095749539070652645023074001074 sq of rst 7898756447985644053484546622050549
                     with intpart 7898756447985644053484546622050549 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.1974151443907065373029041666086413897573947906494140625
     ----> using 2.1974151443907065373029041666086413897573947906494140625 rst is 1.09870757219535326865145208330432069487869739532470703125
     ----> using 1.09870757219535326865145208330432069487869739532470703125 with intpart 1 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.1974151443907065373029041666086413897573947906494140625
     ----> using 1.1974151443907065373029041666086413897573947906494140625 rst is 0.59870757219535326865145208330432069487869739532470703125
     ----> using 0.59870757219535326865145208330432069487869739532470703125 with intpart 0 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 0.598708

     ----> using 0.59870757219535326865145208330432069487869739532470703125 rst is 0.299353786097676634325726041652160347439348697662353515625
     ----> using 0.299353786097676634325726041652160347439348697662353515625 with intpart 0 and fract 0.299353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644088934019572925391
with string of it 7898756447985644088934019572925391
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.2993537860976766273868321377449319697916508 sq of rst 7898756447985644088934019572925391
                     with intpart 7898756447985644088934019572925391 and other part 0
                     the int string is 0.299354

     ----> using 0.299353786097676634325726041652160347439348697662353515625 rst is 0.1496768930488383171628630208260801737196743488311767578125
     ----> using 0.1496768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.1496768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644062328967288767463
with string of it 7898756447985644062328967288767463
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1496768930488383136934160688724659848958254 sq of rst 7898756447985644062328967288767463
                     with intpart 7898756447985644062328967288767463 and other part 0
                     the int string is 0.149677

     ----> using 0.1496768930488383171628630208260801737196743488311767578125 rst is 0.07483844652441915858143151041304008685983717441558837890625
     ----> using 0.07483844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.07483844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644049026441146688501
with string of it 7898756447985644049026441146688501
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0748384465244191637856019383434613700956106 sq of rst 7898756447985644049026441146688501
                     with intpart 7898756447985644049026441146688501 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.1974151443907065373029041666086413897573947906494140625
     ----> using 0.1974151443907065373029041666086413897573947906494140625 rst is 0.09870757219535326865145208330432069487869739532470703125
     ----> using 0.09870757219535326865145208330432069487869739532470703125 with intpart 0 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 0.098708


-------------------Calculation Bee--------------------------------
first number second number is the qube one dimension and third the precision 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241248
with string of it 7898756447985644142144124141241248
leaving function fcnt @@ eql_digits_cnt.cpp/h 
Main Number 7898756447985644142144124141241248 has number of digits 34
Using Power of 88874948371212256

first 7898756447985644142144124141241248 
     doted 0
     makes 7898756447985644142144124141241248

second 88874948371212256 
     doted 0 
     makes 88874948371212256

result 88874948371212257 
     doted 0.1974151443907065373029041666086413897573947906494140625 
     makes 88874948371212257.1974151443907065373029041666086413897573948

u can easily almost retrieve the dots digits 

for the integer string 88874948371212257.000000
the numbers are 17
the retrievable integer digit is 7

entering with number of 7.1974151443907065373029041666086413897573947906494140625
recheck values of 88874948371212256 and result of 7898756447985644035723915004609536 with intpart 7898756447985644035723915004609536

     ----> using 7.1974151443907065373029041666086413897573947906494140625 rst is 3.59870757219535326865145208330432069487869739532470703125
     ----> using 3.59870757219535326865145208330432069487869739532470703125 with intpart 3 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 3.598708

     ----> using 3.59870757219535326865145208330432069487869739532470703125 rst is 1.799353786097676634325726041652160347439348697662353515625
     ----> using 1.799353786097676634325726041652160347439348697662353515625 with intpart 1 and fract 0.799353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644177808967944137648
with string of it 7898756447985644177808967944137648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.7993537860976766273868321377449319697916508 sq of rst 7898756447985644177808967944137648
                     with intpart 7898756447985644177808967944137648 and other part 0
                     the int string is 1.799354

     ----> using 1.799353786097676634325726041652160347439348697662353515625 rst is 0.8996768930488383171628630208260801737196743488311767578125
     ----> using 0.8996768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.8996768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644195641389845585848
with string of it 7898756447985644195641389845585848
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.8996768930488383136934160688724659848958254 sq of rst 7898756447985644195641389845585848
                     with intpart 7898756447985644195641389845585848 and other part 0
                     the int string is 0.899677

     ----> using 0.8996768930488383171628630208260801737196743488311767578125 rst is 0.44983844652441915858143151041304008685983717441558837890625
     ----> using 0.44983844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.44983844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644115682652425097693
with string of it 7898756447985644115682652425097693
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.4498384465244191637856019383434613700956106 sq of rst 7898756447985644115682652425097693
                     with intpart 7898756447985644115682652425097693 and other part 0
                     the int string is 0.449838

     ----> using 0.44983844652441915858143151041304008685983717441558837890625 rst is 0.224919223262209579290715755206520043429918587207794189453125
     ----> using 0.224919223262209579290715755206520043429918587207794189453125 with intpart 0 and fract 0.224919223262209579290715755206520043429918587207794189453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644075703283714853613
with string of it 7898756447985644075703283714853613
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.2249192232622095749539070652645023074001074 sq of rst 7898756447985644075703283714853613
                     with intpart 7898756447985644075703283714853613 and other part 0
                     the int string is 0.224919

     ----> using 0.224919223262209579290715755206520043429918587207794189453125 rst is 0.112459611631104789645357877603260021714959293603897094726562
     ----> using 0.112459611631104789645357877603260021714959293603897094726562 with intpart 0 and fract 0.112459611631104789645357877603260021714959293603897094726562
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644055713599359731576
with string of it 7898756447985644055713599359731576
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1124596116311047944158474365394795313477516 sq of rst 7898756447985644055713599359731576
                     with intpart 7898756447985644055713599359731576 and other part 0
                     the int string is 0.112460

     ----> using 0.112459611631104789645357877603260021714959293603897094726562 rst is 0.0562298058155523948226789388016300108574796468019485473632812
     ----> using 0.0562298058155523948226789388016300108574796468019485473632812 with intpart 0 and fract 0.0562298058155523948226789388016300108574796468019485473632812
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644045718757182170556
with string of it 7898756447985644045718757182170556
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0562298058155523972079237182697397656738758 sq of rst 7898756447985644045718757182170556
                     with intpart 7898756447985644045718757182170556 and other part 0
                     the int string is 0.056230

from new int t  of 7 ---> 6 with 6.1974151443907065373029041666086413897573947906494140625
     ----> using 6.1974151443907065373029041666086413897573947906494140625 rst is 3.09870757219535326865145208330432069487869739532470703125
     ----> using 3.09870757219535326865145208330432069487869739532470703125 with intpart 3 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 3.098708

from new int t  of 6 ---> 5 with 5.1974151443907065373029041666086413897573947906494140625
     ----> using 5.1974151443907065373029041666086413897573947906494140625 rst is 2.59870757219535326865145208330432069487869739532470703125
     ----> using 2.59870757219535326865145208330432069487869739532470703125 with intpart 2 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 2.598708

     ----> using 2.59870757219535326865145208330432069487869739532470703125 rst is 1.299353786097676634325726041652160347439348697662353515625
     ----> using 1.299353786097676634325726041652160347439348697662353515625 with intpart 1 and fract 0.299353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644088934019572925391
with string of it 7898756447985644088934019572925391
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.2993537860976766273868321377449319697916508 sq of rst 7898756447985644088934019572925391
                     with intpart 7898756447985644088934019572925391 and other part 0
                     the int string is 1.299354

     ----> using 1.299353786097676634325726041652160347439348697662353515625 rst is 0.6496768930488383171628630208260801737196743488311767578125
     ----> using 0.6496768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.6496768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644151203915659979720
with string of it 7898756447985644151203915659979720
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.6496768930488383136934160688724659848958254 sq of rst 7898756447985644151203915659979720
                     with intpart 7898756447985644151203915659979720 and other part 0
                     the int string is 0.649677

     ----> using 0.6496768930488383171628630208260801737196743488311767578125 rst is 0.32483844652441915858143151041304008685983717441558837890625
     ----> using 0.32483844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.32483844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644093463915332294629
with string of it 7898756447985644093463915332294629
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.3248384465244191637856019383434613700956106 sq of rst 7898756447985644093463915332294629
                     with intpart 7898756447985644093463915332294629 and other part 0
                     the int string is 0.324838

     ----> using 0.32483844652441915858143151041304008685983717441558837890625 rst is 0.162419223262209579290715755206520043429918587207794189453125
     ----> using 0.162419223262209579290715755206520043429918587207794189453125 with intpart 0 and fract 0.162419223262209579290715755206520043429918587207794189453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644064593915168452081
with string of it 7898756447985644064593915168452081
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1624192232622095749539070652645023074001074 sq of rst 7898756447985644064593915168452081
                     with intpart 7898756447985644064593915168452081 and other part 0
                     the int string is 0.162419

     ----> using 0.162419223262209579290715755206520043429918587207794189453125 rst is 0.0812096116311047896453578776032600217149592936038970947265625
     ----> using 0.0812096116311047896453578776032600217149592936038970947265625 with intpart 0 and fract 0.0812096116311047896453578776032600217149592936038970947265625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644050158915086530810
with string of it 7898756447985644050158915086530810
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0812096116311047944158474365394795313477516 sq of rst 7898756447985644050158915086530810
                     with intpart 7898756447985644050158915086530810 and other part 0
                     the int string is 0.081210

from new int t  of 5 ---> 4 with 4.1974151443907065373029041666086413897573947906494140625
     ----> using 4.1974151443907065373029041666086413897573947906494140625 rst is 2.09870757219535326865145208330432069487869739532470703125
     ----> using 2.09870757219535326865145208330432069487869739532470703125 with intpart 2 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 2.098708

from new int t  of 4 ---> 3 with 3.1974151443907065373029041666086413897573947906494140625
     ----> using 3.1974151443907065373029041666086413897573947906494140625 rst is 1.59870757219535326865145208330432069487869739532470703125
     ----> using 1.59870757219535326865145208330432069487869739532470703125 with intpart 1 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 1.598708

     ----> using 1.59870757219535326865145208330432069487869739532470703125 rst is 0.799353786097676634325726041652160347439348697662353515625
     ----> using 0.799353786097676634325726041652160347439348697662353515625 with intpart 0 and fract 0.799353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644177808967944137648
with string of it 7898756447985644177808967944137648
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.7993537860976766273868321377449319697916508 sq of rst 7898756447985644177808967944137648
                     with intpart 7898756447985644177808967944137648 and other part 0
                     the int string is 0.799354

     ----> using 0.799353786097676634325726041652160347439348697662353515625 rst is 0.3996768930488383171628630208260801737196743488311767578125
     ----> using 0.3996768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.3996768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644106766441474373592
with string of it 7898756447985644106766441474373592
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 17
                     with combination da_rst 88874948371212256.3996768930488383136934160688724659848958254 sq of rst 7898756447985644106766441474373592
                     with intpart 7898756447985644106766441474373592 and other part 0
                     the int string is 0.399677

     ----> using 0.3996768930488383171628630208260801737196743488311767578125 rst is 0.19983844652441915858143151041304008685983717441558837890625
     ----> using 0.19983844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.19983844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644071245178239491565
with string of it 7898756447985644071245178239491565
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1998384465244191637856019383434613700956106 sq of rst 7898756447985644071245178239491565
                     with intpart 7898756447985644071245178239491565 and other part 0
                     the int string is 0.199838

     ----> using 0.19983844652441915858143151041304008685983717441558837890625 rst is 0.099919223262209579290715755206520043429918587207794189453125
     ----> using 0.099919223262209579290715755206520043429918587207794189453125 with intpart 0 and fract 0.099919223262209579290715755206520043429918587207794189453125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053484546622050549
with string of it 7898756447985644053484546622050549
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0999192232622095749539070652645023074001074 sq of rst 7898756447985644053484546622050549
                     with intpart 7898756447985644053484546622050549 and other part 0
                     the int string is 0.099919

from new int t  of 3 ---> 2 with 2.1974151443907065373029041666086413897573947906494140625
     ----> using 2.1974151443907065373029041666086413897573947906494140625 rst is 1.09870757219535326865145208330432069487869739532470703125
     ----> using 1.09870757219535326865145208330432069487869739532470703125 with intpart 1 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 1.098708

from new int t  of 2 ---> 1 with 1.1974151443907065373029041666086413897573947906494140625
     ----> using 1.1974151443907065373029041666086413897573947906494140625 rst is 0.59870757219535326865145208330432069487869739532470703125
     ----> using 0.59870757219535326865145208330432069487869739532470703125 with intpart 0 and fract 0.59870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644142144124141241249
with string of it 7898756447985644142144124141241249
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 33
                     with combination da_rst 88874948371212256.5987075721953532686514520833043206948786974 sq of rst 7898756447985644142144124141241249
                     with intpart 7898756447985644142144124141241249 and other part 0
                     the int string is 0.598708

     ----> using 0.59870757219535326865145208330432069487869739532470703125 rst is 0.299353786097676634325726041652160347439348697662353515625
     ----> using 0.299353786097676634325726041652160347439348697662353515625 with intpart 0 and fract 0.299353786097676634325726041652160347439348697662353515625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644088934019572925391
with string of it 7898756447985644088934019572925391
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.2993537860976766273868321377449319697916508 sq of rst 7898756447985644088934019572925391
                     with intpart 7898756447985644088934019572925391 and other part 0
                     the int string is 0.299354

     ----> using 0.299353786097676634325726041652160347439348697662353515625 rst is 0.1496768930488383171628630208260801737196743488311767578125
     ----> using 0.1496768930488383171628630208260801737196743488311767578125 with intpart 0 and fract 0.1496768930488383171628630208260801737196743488311767578125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644062328967288767463
with string of it 7898756447985644062328967288767463
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.1496768930488383136934160688724659848958254 sq of rst 7898756447985644062328967288767463
                     with intpart 7898756447985644062328967288767463 and other part 0
                     the int string is 0.149677

     ----> using 0.1496768930488383171628630208260801737196743488311767578125 rst is 0.07483844652441915858143151041304008685983717441558837890625
     ----> using 0.07483844652441915858143151041304008685983717441558837890625 with intpart 0 and fract 0.07483844652441915858143151041304008685983717441558837890625
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644049026441146688501
with string of it 7898756447985644049026441146688501
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0748384465244191637856019383434613700956106 sq of rst 7898756447985644049026441146688501
                     with intpart 7898756447985644049026441146688501 and other part 0
                     the int string is 0.074838

from new int t  of 1 ---> 0 with 0.1974151443907065373029041666086413897573947906494140625
     ----> using 0.1974151443907065373029041666086413897573947906494140625 rst is 0.09870757219535326865145208330432069487869739532470703125
     ----> using 0.09870757219535326865145208330432069487869739532470703125 with intpart 0 and fract 0.09870757219535326865145208330432069487869739532470703125
trying to retrieve digits 
entering function fcnt @@ eql_digits_cnt.cpp/h 
will count the digit from 7898756447985644053269175770028992
with string of it 7898756447985644053269175770028992
leaving function fcnt @@ eql_digits_cnt.cpp/h 
digits retrieved 16
                     with combination da_rst 88874948371212256.0987075721953532686514520833043206948786974 sq of rst 7898756447985644053269175770028992
                     with intpart 7898756447985644053269175770028992 and other part 0
                     the int string is 0.098708

------------All Results From Bee----------- 
Higher number @ first columns nearest u are 
--------------------------------------
Psifia,Power,Result of Power,Diafora from Main,Diairesi from Main
--------------------------------------
1 PWR tw 86799521406435649.4789434480400062699168017843476263806223869 7534156916386280549382318919292450.000000 364599531599363592761805221948798.000000 1.048393 
15 PWR tw 88874948371212264.0987075721953536711072985099235665984451771 7898756447985645475268349709425225.000000 1333124225568183977.000000 1.000000 
15 PWR tw 88874948371212264.0987075721953536711072985099235665984451771 7898756447985645475268349709425225.000000 1333124225568183977.000000 1.000000 
15 PWR tw 88874948371212263.5987075721953535739627838552223693113774061 7898756447985645386393401338212944.000000 1244249277196971696.000000 1.000000 
15 PWR tw 88874948371212262.0987075721953535045738448161500855349004269 7898756447985645119768556224576143.000000 977624432083334895.000000 1.000000 
15 PWR tw 88874948371212261.5987075721953534213071179692633450031280518 7898756447985645030893607853363867.000000 888749483712122619.000000 1.000000 
16 PWR tw 88874948371212260.0987075721953533657959667380055179819464684 7898756447985644764268762739727074.000000 622124638598485826.000000 1.000000 
16 PWR tw 88874948371212259.5987075721953533380403911223766044713556767 7898756447985644675393814368514810.000000 533249690227273562.000000 1.000000 
16 PWR tw 88874948371212258.0987075721953532964070276989332342054694891 7898756447985644408768969254878026.000000 266624845113636778.000000 1.000000 
16 PWR tw 88874948371212257.5987075721953532825292398911187774501740932 7898756447985644319894020883665765.000000 177749896742424517.000000 1.000000 
16 PWR tw 88874948371212256.0987075721953532686514520833043206948786974 7898756447985644053269175770028992.000000 88874948371212256.000000 1.000000 
33 PWR tw 88874948371212256.5987075721953532686514520833043206948786974 7898756447985644142144124141241249.000000 1.000000 1.000000 
17 PWR: 88874948371212256.7993537860976766273868321377449319697916508 | 7898756447985644177808967944137648.000000 35664843802896400.000000 1.000000 
16 PWR: 88874948371212256.2249192232622095749539070652645023074001074 | 7898756447985644075703283714853613.000000 66440840426387635.000000 1.000000 
--------------------------------------
with main number 7898756447985644142144124141241248
with the internal math.h sqrt function 88874948371212256.5987075721953532686514520833043206948786974
